{
  "id": "react",
  "title": "React",
  "intro": "|\nA React cheat sheet with the most important concepts, functions, methods, and more. A complete quick reference for beginners.",
  "tags": [
    "react",
    "web"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#1289D8]",
  "content": "## Getting Started\n\n### JSX\n\nJSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file.\n\n```javascript\nlet element = <h1>Hello, world!</h1>;\n\nlet emptyHeading = <h1 />;\n```\n\n### JSX Expressions\n\n```javascript\nlet name = 'Josh Perez';\nlet element = <h1>Hello, {name}</h1>;\n\nfunction fullName(firstName, lastName) {\n  return firstName + ' ' + lastName;\n}\nlet element = <h1>Hello, {fullName('Julie', 'Johnson')}</h1>;\n```\n\n### JSX Attributes\n\n```javascript\nconst element = <img src={user.avatarUrl} />;\nconst element = <button className=\"btn\">Click me</button>;\n```\n\n### JSX Functions\n\n```javascript\nname() {\n  return \"Julie\";\n}\n\nreturn (\n  <h1>\n    Hi {name()}!\n  </h1>\n)\n```\n\n### JSX Conditional Rendering {.col-span-2}\n\n```javascript\nimport React from 'react';\nfunction Weather(props) {\n  if (props.temperature >= 20) {\n    return (\n      <p>\n        It is {props.temperature}°C (Warm) in {props.city}\n      </p>\n    );\n  } else {\n    return (\n      <p>\n        It is {props.temperature}°C in {props.city}\n      </p>\n    );\n  }\n}\n\nexport default () => <Weather city=\"New York\" temperature={24} />;\n```\n\nNote: A component must always return something.\n\n## Components\n\n### Functional Component\n\n```javascript\nimport React from 'react';\n\nexport default function UserProfile() {\n  return (\n    <div className=\"UserProfile\">\n      <div>Hello</div>\n      <div>World</div>\n    </div>\n  );\n}\n```\n\nNote: Every component needs one root element\n\n### Embed an internal Component\n\n```javascript\nimport React from 'react';\nimport UserAvatar from './UserAvatar';\n\nexport default function UserProfile() {\n  return (\n    <div className=\"UserProfile\">\n      <UserAvatar />\n      <UserAvatar />\n    </div>\n  );\n}\n```\n\nNote: Assuming UserAvatar is declared in UserAvatar.js\n\n### Embed an external Component\n\n```javascript\nimport React from 'react';\nimport ComponentName from 'component-name';\n\nexport default function UserProfile() {\n  return (\n    <div className=\"UserProfile\">\n      <ComponentName />\n    </div>\n  );\n}\n```\n\nNote: External components are found on npmjs.com and need to be imported first.\n\n### Advanced Functional Components\n\n```javascript\nimport React from 'react';\n\nfunction Hello(props) {\n  function fullName() {\n    return `${props.firstName} ${props.lastName}`;\n  }\n  return <p>{fullName()}</p>;\n}\n\nexport default () => <Hello firstName=\"Matt\" lastName=\"Delac\" />;\n```\n\n## Properties {.cols-2}\n\n### Passing Properties to a Component\n\n<!-- prettier-ignore -->\n```javascript\n<Student\n  firstName=\"Julie\"\n  lastName=\"Johnson\"\n  age={23}\n  pro={true}\n/>\n```\n\n### Assigning the Properties from a Component\n\n```javascript\nimport React from 'react';\n\nexport default function Student(props) {\n  return (\n    <h1>\n      {props.firstName} {props.lastName} is {props.age}.\n    </h1>\n  );\n}\n```\n\n## States {.cols-1}\n\n### React State\n\n```javascript\nimport React, { useState } from 'react';\n\nexport default function Hello(props) {\n  let [name, setName] = useState('Julie');\n  function updateName() {\n    let newName = prompt('What is your name?');\n    setName(newName);\n  }\n\n  return (\n    <div>\n      <h1>{name}</h1>\n      <button onClick={updateName}>Update name</button>\n    </div>\n  );\n}\n```\n\n## Events {.cols-1}\n\n### Event Listener\n\n```javascript\nimport React from 'react';\n\nexport default function Hello() {\n  function handleClick(event) {\n    event.preventDefault();\n    alert('Hello World');\n  }\n\n  return (\n    <a href=\"/\" onClick={handleClick}>\n      Say Hi\n    </a>\n  );\n}\n```\n\nNote: The most common event listeners are onClick for links/buttons and onSubmit for forms.\n\n## Loops {.cols-2}\n\n### Looping through an Array\n\n```javascript\nlet elements = ['one', 'two', 'three'];\n\nreturn (\n  <ul>\n    {elements.map(function (value, index) {\n      return <li key={index}>{value}</li>;\n    })}\n  </ul>\n);\n```\n\nNote: Each list item inside a map loop needs a key attribute with a unique value which is generally the index.\n\n### Looping through an Array of Objects\n\n```javascript\nlet elements = [\n  {\n    name: 'one',\n    value: 1\n  },\n  {\n    name: 'two',\n    value: 2\n  },\n  {\n    name: 'three',\n    value: 3\n  }\n];\nreturn (\n  <ul>\n    {elements.map(function (element, index) {\n      return (\n        <li key={index}>\n          The value for {element.name} is {element.value}\n        </li>\n      );\n    })}\n  </ul>\n);\n```\n\nNote: Each list item inside a map loop needs a key attribute with a unique value which is generally the index.\n\n## Forms {.cols-1}\n\n### React Forms\n\n```javascript\nimport React, { useState } from 'react';\n\nexport default function LoginForm() {\n  let [username, setUsername] = useState('');\n  let [password, setPassword] = useState('');\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    alert(`Loging in with ${username} and ${password}`);\n  }\n\n  function updateUsername(event) {\n    setUsername(event.target.value);\n  }\n\n  function updatePassword(event) {\n    setPassword(event.target.value);\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" placeholder=\"Username\" onChange={updateUsername} />\n      <input type=\"password\" placeholder=\"Password\" onChange={updatePassword} />\n      <input type=\"submit\" value=\"Login\" />\n    </form>\n  );\n}\n```\n\n## CSS {.cols-1}\n\n### CSS in a React Component\n\n```javascript\nimport React from 'react';\nimport './Student.css';\n\nexport default function Student() {\n  return <div className=\"Student\">Julie Johnson</div>;\n}\n```\n\nNote: You'll then have to crate a css file called Student.css\n\n## AJAX {.cols-1}\n\n### AJAX Request with Axios\n\n```javascript\nimport React from 'react';\nimport axios from 'axios';\n\nexport default function Weather(props) {\n  function handleResponse(response) {\n    console.log(response);\n  }\n\n  if (notifications) {\n    return <p>notifications</p>;\n  } else {\n    let url = `https://notifications.com`;\n    axios.get(url).then(handleResponse);\n    return <p>Loading notifications..</p>;\n  }\n}\n```\n\nNote: Make sure to import Axios first to your project.\n\n## Hooks {.cols-2}\n\n### useState Hook\n\n```javascript\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n\nexport default Counter;\n```\n\nNote: The useState Hook is a built-in React Hook that allows functional components to manage local state. It provides a\nway to declare state variables and update them within a functional component. Example code illustrating how to use it\n\n### Multiple State Variable Declaration\n\n```javascript\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const [name, setName] = useState('');\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  const handleIncrement = () => {\n    setCount(count + 1);\n  };\n\n  const handleNameChange = (event) => {\n    setName(event.target.value);\n  };\n\n  const toggleCompletion = () => {\n    setIsCompleted(!isCompleted);\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={handleIncrement}>Increment</button>\n\n      <input\n        type=\"text\"\n        value={name}\n        onChange={handleNameChange}\n        placeholder=\"Enter your name\"\n      />\n\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={isCompleted}\n          onChange={toggleCompletion}\n        />\n        Completed\n      </label>\n    </div>\n  );\n}\n\nexport default Counter;\n```\n\nNote: You can declare multiple state variables using the useState Hook by calling it multiple times in a functional\ncomponent. Each call to useState manages a separate piece of state.\n\n### Input State Management\n\n```javascript\nimport { useState } from 'react';\n\nfunction FormExample() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    alert(\n      `Name: ${formData.name}, Email: ${formData.email}, Message: ${formData.message}`\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"name\">Name:</label>\n      <input\n        type=\"text\"\n        id=\"name\"\n        name=\"name\"\n        value={formData.name}\n        onChange={handleChange}\n      />\n\n      <label htmlFor=\"email\">Email:</label>\n      <input\n        type=\"email\"\n        id=\"email\"\n        name=\"email\"\n        value={formData.email}\n        onChange={handleChange}\n      />\n\n      <label htmlFor=\"message\">Message:</label>\n      <textarea\n        id=\"message\"\n        name=\"message\"\n        value={formData.message}\n        onChange={handleChange}\n      />\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default FormExample;\n```\n\n### useEffect Hook\n\n```javascript\nimport React, { useState, useEffect } from 'react';\n\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds((prevSeconds) => prevSeconds + 1);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return <div>Seconds: {seconds}</div>;\n}\n\nexport default Timer;\n```\n\nNote: The useEffect Hook in React is used for performing side effects in functional components. It allows you to execute\ncode based on component lifecycle events like mounting, updating, and unmounting.\n\n### Fetch API using useEffect\n\n```javascript\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction UserList() {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get('https://jsonplaceholder.typicode.com/users')\n      .then((response) => {\n        setUsers(response.data);\n      })\n      .catch((error) => {\n        console.error('Error fetching users:', error);\n      });\n  }, []);\n\n  return (\n    <div>\n      <h2>User List</h2>\n      <ul>\n        {users.map((user) => (\n          <li key={user.id}>{user.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default UserList;\n```\n\nNote: Make sure to import Axios first to your project.\n\n### Custom Hook creation useLocalStorage\n\n```javascript\nimport { useState, useEffect } from 'react';\n\nfunction useLocalStorage(key, initialValue) {\n  const [value, setValue] = useState(() => {\n    const storedValue = localStorage.getItem(key);\n    return storedValue !== null ? JSON.parse(storedValue) : initialValue;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  return [value, setValue];\n}\n\nexport default useLocalStorage;\n```\n\nNote: Custom Hooks are reusable functions in React that contain logic shared across multiple components. They allow you\nto extract stateful logic from components into standalone functions.\n\n### Creating Refs in Class Components\n\n```javascript\nimport React, { Component } from 'react';\n\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(this.myRef.current); // Access the DOM element\n  }\n\n  render() {\n    return <div ref={this.myRef}>Hello, world!</div>;\n  }\n}\n\nexport default MyComponent;\n```\n\n### Using Refs in Functional Components\n\n```javascript\nimport React, { useRef, useEffect } from 'react';\n\nfunction MyComponent() {\n  const myRef = useRef(null);\n\n  useEffect(() => {\n    console.log(myRef.current); // Access the DOM element\n  }, []);\n\n  return <div ref={myRef}>Hello, world!</div>;\n}\n\nexport default MyComponent;\n```\n\n### Callback Refs\n\n```javascript\nimport React, { Component } from 'react';\n\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = null;\n    this.setRef = (element) => {\n      this.myRef = element;\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.myRef); // Access the DOM element\n  }\n\n  render() {\n    return <div ref={this.setRef}>Hello, world!</div>;\n  }\n}\n\nexport default MyComponent;\n```\n\n### Forwarding Refs\n\n```javascript\nCopy code\nimport React from \"react\";\n\nconst FancyButton = React.forwardRef((props, ref) => (\n  <button ref={ref} className=\"FancyButton\">\n    {props.children}\n  </button>\n));\n\n// Usage\nconst ref = React.createRef();\n<FancyButton ref={ref}>Click me!</FancyButton>;\n```\n\n### Accessing DOM Elements with Refs\n\n```javascript\nimport React, { useRef, useEffect } from 'react';\n\nfunction FocusInput() {\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    // Focus the input element when the component mounts\n    inputRef.current.focus();\n  }, []);\n\n  return <input ref={inputRef} type=\"text\" />;\n}\n\nexport default FocusInput;\n```\n\nNote: Refs are often used to access and interact with DOM elements directly. Here's an example where we focus an input\nelement using a ref.\n\n### Managing Focus with Refs\n\n```javascript\nimport React, { useRef } from 'react';\n\nfunction Form() {\n  const firstInputRef = useRef(null);\n  const secondInputRef = useRef(null);\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      secondInputRef.current.focus();\n    }\n  };\n\n  return (\n    <div>\n      <input ref={firstInputRef} type=\"text\" onKeyDown={handleKeyDown} />\n      <input ref={secondInputRef} type=\"text\" />\n    </div>\n  );\n}\n\nexport default Form;\n```\n\nNote: You can also manage focus between multiple elements using refs.\n"
}