{
  "id": "javascript",
  "title": "JavaScript",
  "intro": "|\nA JavaScript cheat sheet with the most important concepts, functions, methods, and more. A complete quick reference for beginners.",
  "tags": [
    "js",
    "web"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#ebd94e]",
  "content": "## Getting Started\n\n### Introduction\n\nJavaScript is a lightweight, interpreted programming language.\n\n- [JSON cheatsheet](/json) _(cheatsheets.zip)_\n- [Regex in JavaScript](/regex#regex-in-javascript) _(cheatsheets.zip)_\n\n### Console\n\n```javascript\n// => Hello world!\nconsole.log('Hello world!');\n\n// => Hello CheatSheets.zip\nconsole.warn('hello %s', 'CheatSheets.zip');\n\n// Prints error message to stderr\nconsole.error(new Error('Oops!'));\n```\n\n### Numbers\n\n```javascript\nlet amount = 6;\nlet price = 4.99;\n```\n\n### Variables\n\n```javascript\nlet x = null;\nlet name = 'Tammy';\nconst found = false;\n\n// => Tammy, false, null\nconsole.log(name, found, x);\n\nvar a;\nconsole.log(a); // => undefined\n```\n\n### Strings\n\n```javascript\nlet singleQuotes = 'Wheres my bandit hat?';\nlet doubleQuotes = 'Wheres my bandit hat?';\n// this is used to embed expressions or for creating multi-line strings\nlet backTicks = `Wheres my bandit hat? ${some_value}`;\n\n// they can also be mixed,\n// NOTE: if you need the functionality of the backticks, use it as the surrounding quotes\nlet mixedQuotes = `hello ${'dear' + name}, \"let's have a great day today`;\n\n// => 21\nconsole.log(singleQuotes.length);\n```\n\n### Arithmetic Operators\n\n```javascript\n5 + 5 = 10     // Addition\n10 - 5 = 5     // Subtraction\n5 * 10 = 50    // Multiplication\n10 / 5 = 2     // Division\n10 % 5 = 0     // Modulo\n```\n\n### Comments\n\n```javascript\n// This line will denote a comment\n\n/*\nThe below configuration must be\nchanged before deployment.\n*/\n```\n\n### Assignment Operators\n\n```javascript\nlet number = 100;\n\n// Both statements will add 10\nnumber = number + 10;\nnumber += 10;\n\nconsole.log(number);\n// => 120\n```\n\n### String Interpolation\n\n```javascript\nlet age = 7;\n\n// String concatenation\n'Tommy is ' + age + ' years old.';\n\n// String interpolation\n`Tommy is ${age} years old.`;\n```\n\n### let Keyword\n\n```javascript\nlet count;\nconsole.log(count); // => undefined\ncount = 10;\nconsole.log(count); // => 10\n```\n\n### const Keyword\n\n```javascript\nconst numberOfColumns = 4;\n\n// TypeError: Assignment to constant...\nnumberOfColumns = 8;\n```\n\n## JavaScript Conditionals\n\n### if Statement\n\n```javascript\nconst isMailSent = true;\n\nif (isMailSent) {\n  console.log('Mail sent to recipient');\n}\n```\n\n### Ternary Operator\n\n```javascript\n// The ternary operator is a concise way to write an if-else statement in a single line: condition ? exprIfTrue : exprIfFalse.\n\nvar x = 1;\n\n// true, (condition) ? value_if_true : value_if_false\nresult = x == 1 ? true : false;\n```\n\n### Operators {.row-span-2}\n\n```javascript\ntrue || false; // true\n10 > 5 || 10 > 20; // true\nfalse || false; // false\n10 > 100 || 10 > 20; // false\n```\n\n#### Logical Operator &&\n\n```javascript\ntrue && true; // true\n1 > 2 && 2 > 1; // false\ntrue && false; // false\n4 === 4 && 3 > 1; // true\n```\n\n#### Comparison Operators\n\n```javascript\n1 > 3; // false\n3 > 1; // true\n250 >= 250; // true\n1 === 1; // true\n1 === 2; // false\n1 === '1'; // false\n```\n\n#### Logical Operator !\n\n```javascript\nlet lateToWork = true;\nlet oppositeValue = !lateToWork;\n\n// => false\nconsole.log(oppositeValue);\n```\n\n#### Nullish coalescing operator ??\n\n```javascript\nnull ?? 'I win'; //  'I win'\nundefined ?? 'Me too'; //  'Me too'\n\nfalse ?? 'I lose'; //  false\n0 ?? 'I lose again'; //  0\n'' ?? 'Damn it'; //  ''\n```\n\n### else if\n\n```javascript\nconst size = 10;\n\nif (size > 100) {\n  console.log('Big');\n} else if (size > 20) {\n  console.log('Medium');\n} else if (size > 4) {\n  console.log('Small');\n} else {\n  console.log('Tiny');\n}\n// Print: Small\n```\n\n### switch Statement\n\n```javascript\nconst food = 'salad';\n\nswitch (food) {\n  case 'oyster':\n    console.log('The taste of the sea');\n    break;\n  case 'pizza':\n    console.log('A delicious pie');\n    break;\n  default:\n    console.log('Enjoy your meal');\n}\n```\n\n### == vs ===\n\n```javascript\n0 == false; // true\n0 === false; // false, different type\n1 == '1'; // true,  automatic type conversion\n1 === '1'; // false, different type\nnull == undefined; // true\nnull === undefined; // false\n'0' == false; // true\n'0' === false; // false\n```\n\nThe `==` just check the value, `===` check both the value and the type.\n\n## JavaScript Functions\n\n### Functions\n\n```javascript\n// Defining the function:\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// Calling the function:\nsum(3, 6); // 9\n```\n\n### Anonymous Functions\n\n```javascript\n// Named function\nfunction rocketToMars() {\n  return 'BOOM!';\n}\n\n// Anonymous function\nconst rocketToMars = function () {\n  return 'BOOM!';\n};\n```\n\n### Arrow Functions (ES6) {.row-span-2}\n\n#### With two arguments\n\n```javascript\nconst sum = (param1, param2) => {\n  return param1 + param2;\n};\nconsole.log(sum(2, 5)); // => 7\n```\n\n#### With no arguments\n\n```javascript\nconst printHello = () => {\n  console.log('hello');\n};\nprintHello(); // => hello\n```\n\n#### With a single argument\n\n```javascript\nconst checkWeight = (weight) => {\n  console.log(`Weight : ${weight}`);\n};\ncheckWeight(25); // => Weight : 25\n```\n\n#### Concise arrow functions\n\n```javascript\nconst multiply = (a, b) => a * b;\n// => 60\nconsole.log(multiply(2, 30));\n```\n\n[Arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) available\nstarting ES2015\n\n### return Keyword\n\n```javascript\n// With return\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// The function doesn't output the sum\nfunction sum(num1, num2) {\n  num1 + num2;\n}\n```\n\n### Calling Functions\n\n```javascript\n// Defining the function\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// Calling the function\nsum(2, 4); // 6\n```\n\n### Function Expressions\n\n```javascript\nconst dog = function () {\n  return 'Woof!';\n};\n```\n\n### Function Parameters\n\n```javascript\n// The parameter is name\nfunction sayHello(name) {\n  return `Hello, ${name}!`;\n}\n```\n\n### Function Declaration\n\n```javascript\nfunction add(num1, num2) {\n  return num1 + num2;\n}\n```\n\n## JavaScript Scope\n\n### Scope\n\n```javascript\nfunction myFunction() {\n  var pizzaName = 'Margarita';\n  // Code here can use pizzaName\n}\n\n// Code here can't use pizzaName\n```\n\n### Block Scoped Variables\n\n```javascript\nconst isLoggedIn = true;\n\nif (isLoggedIn == true) {\n  const statusMessage = 'Logged in.';\n}\n\n// Uncaught ReferenceError...\nconsole.log(statusMessage);\n```\n\n### Global Variables\n\n```javascript\n// Variable declared globally\nconst color = 'blue';\n\nfunction printColor() {\n  console.log(color);\n}\n\nprintColor(); // => blue\n```\n\n### let vs var\n\n```javascript\nfor (let i = 0; i < 3; i++) {\n  // This is the Max Scope for 'let'\n  // i accessible ✔️\n}\n// i not accessible ❌\n```\n\n---\n\n```javascript\nfor (var i = 0; i < 3; i++) {\n  // i accessible ✔️\n}\n// i accessible ✔️\n```\n\n`var` is scoped to the nearest function block, and `let` is scoped to the nearest enclosing block.\n\n### Loops with closures\n\n```javascript{.wrap}\n// Prints 3 thrice, not what we meant.\nfor (var i = 0; i < 3; i++) {\n  setTimeout(_ => console.log(i), 10);\n}\n```\n\n---\n\n```javascript{.wrap}\n// Prints 0, 1 and 2, as expected.\nfor (let j = 0; j < 3; j++) {\n  setTimeout(_ => console.log(j), 10);\n}\n```\n\nThe variable has its own copy using `let`, and the variable has shared copy using `var`.\n\n## JavaScript Arrays\n\n### Arrays\n\n```javascript\nconst fruits = ['apple', 'orange', 'banana'];\n\n// Different data types\nconst data = [1, 'chicken', false];\n```\n\n### Property .length\n\n```javascript\nconst numbers = [1, 2, 3, 4];\n\nnumbers.length; // 4\n```\n\n### Index\n\n```javascript\n// Accessing an array element\nconst myArray = [100, 200, 300];\n\nconsole.log(myArray[0]); // 100\nconsole.log(myArray[1]); // 200\n```\n\n### Mutable chart\n\n|           | add | remove | start | end |\n| :-------- | :-: | :----: | :---: | :-: |\n| `push`    | ✔  |        |       | ✔  |\n| `pop`     |     |   ✔   |       | ✔  |\n| `unshift` | ✔  |        |  ✔   |     |\n| `shift`   |     |   ✔   |  ✔   |     |\n\n{.show-header}\n\n### Array.push()\n\n```javascript\n// Adding a single element:\nconst cart = ['apple', 'orange'];\ncart.push('pear');\n\n// Adding multiple elements:\nconst numbers = [1, 2];\nnumbers.push(3, 4, 5);\n```\n\nAdd items to the end and returns the new array length.\n\n### Array.pop()\n\n```javascript\nconst fruits = ['apple', 'orange', 'banana'];\n\nconst fruit = fruits.pop(); // 'banana'\nconsole.log(fruits); // [\"apple\", \"orange\"]\n```\n\nRemove an item from the end and returns the removed item.\n\n### Array.shift()\n\n```javascript\nlet cats = ['Bob', 'Willy', 'Mini'];\n\ncats.shift(); // ['Willy', 'Mini']\n```\n\nRemove an item from the beginning and returns the removed item.\n\n### Array.unshift()\n\n```javascript\nlet cats = ['Bob'];\n\n// => ['Willy', 'Bob']\ncats.unshift('Willy');\n\n// => ['Puff', 'George', 'Willy', 'Bob']\ncats.unshift('Puff', 'George');\n```\n\nAdd items to the beginning and returns the new array length.\n\n### Array.concat()\n\n```javascript\nconst numbers = [3, 2, 1];\nconst newFirstNumber = 4;\n\n// => [ 4, 3, 2, 1 ]\n[newFirstNumber].concat(numbers);\n\n// => [ 3, 2, 1, 4 ]\nnumbers.concat(newFirstNumber);\n```\n\nIf you want to avoid mutating your original array, you can use concat.\n\n## JavaScript Set\n\n### Create Set\n\n```javascript\n// Empty Set Object\nconst emptySet = new Set();\n\n// Set Object with values\nconst setObj = new Set([1, true, 'hi']);\n```\n\n### Add\n\n```javascript\nconst emptySet = new Set();\n\n// add values\nemptySet.add('a'); // 'a'\nemptySet.add(1); // 'a', 1\nemptySet.add(true); // 'a', 1, true\nemptySet.add('a'); // 'a', 1, true\n```\n\n### Delete\n\n```javascript\nconst emptySet = new Set([1, true, 'a']);\n\n// delete values\nemptySet.delete('a'); // 1, true\nemptySet.delete(true); // 1\nemptySet.delete(1); //\n```\n\n### Has\n\n```javascript\nconst setObj = new Set([1, true, 'a']);\n\n// returns true or false\nsetObj.has('a'); // true\nsetObj.has(1); // true\nsetObj.has(false); // false\n```\n\n### Clear\n\n```javascript\nconst setObj = new Set([1, true, 'a']);\n\n// clears the set\nconsole.log(setObj); // 1, true, 'a'\nsetObj.clear(); //\n```\n\n### Size\n\n```javascript\nconst setObj = new Set([1, true, 'a']);\n\nconsoloe.log(setObj.size); // 3\n```\n\n### ForEach\n\n```javascript\nconst setObj = new Set([1, true, 'a']);\n\nsetObj.forEach(function (value) {\n  console.log(value);\n});\n\n// 1\n// true\n// 'a'\n```\n\n## JavaScript Loops\n\n### While Loop\n\n```javascript\nwhile (condition) {\n  // code block to be executed\n}\n\nlet i = 0;\nwhile (i < 5) {\n  console.log(i);\n  i++;\n}\n```\n\n### Reverse Loop\n\n```javascript\nconst fruits = ['apple', 'orange', 'banana'];\n\nfor (let i = fruits.length - 1; i >= 0; i--) {\n  console.log(`${i}. ${fruits[i]}`);\n}\n\n// => 2. banana\n// => 1. orange\n// => 0. apple\n```\n\n### Do…While Statement\n\n```javascript\nx = 0;\ni = 0;\n\ndo {\n  x = x + i;\n  console.log(x);\n  i++;\n} while (i < 5);\n// => 0 1 3 6 10\n```\n\n### For Loop\n\n```javascript\nfor (let i = 0; i < 4; i += 1) {\n  console.log(i);\n}\n\n// => 0, 1, 2, 3\n```\n\n### Looping Through Arrays\n\n```javascript\nfor (let i = 0; i < array.length; i++) {\n  console.log(array[i]);\n}\n\n// => Every item in the array\n```\n\n### Break\n\n```javascript\nfor (let i = 0; i < 99; i += 1) {\n  if (i > 5) {\n    break;\n  }\n  console.log(i);\n}\n// => 0 1 2 3 4 5\n```\n\n### Continue\n\n```javascript\nfor (i = 0; i < 10; i++) {\n  if (i === 3) {\n    continue;\n  }\n  text += 'The number is ' + i + '<br>';\n}\n```\n\n### Nested\n\n```javascript\nfor (let i = 0; i < 2; i += 1) {\n  for (let j = 0; j < 3; j += 1) {\n    console.log(`${i}-${j}`);\n  }\n}\n```\n\n### for...in loop\n\n```javascript\nconst fruits = ['apple', 'orange', 'banana'];\n\n// 1. Print only indexes\nfor (let index in fruits) {\n  console.log(index);\n}\n// => 0\n// => 1\n// => 2\n\n\n// 2. Print only values\nfor (let index in fruits) {\n  console.log(fruits[index]);\n}\n// => apple\n// => orange\n// => banana\n\n\n// 3. Print index with value\nfor (let index in fruits) {\n  console.log(index, fruits[index]);\n}\n// => 0 apple\n// => 1 orange\n// => 2 banana\n```\n\n### for...of loop\n\n```javascript\nconst fruits = ['apple', 'orange', 'banana'];\n\nfor (let fruit of fruits) {\n  console.log(fruit);\n}\n// => apple\n// => orange\n// => banana\n\nfor (let [index, value] of fruits.entries()) {\n  console.log(index, value);\n}\n// => 0 apple\n// => 1 orange\n// => 2 banana\n```\n\n## JavaScript Iterators {.cols-2}\n\n### Functions Assigned to Variables\n\n```javascript\nlet plusFive = (number) => {\n  return number + 5;\n};\n// f is assigned the value of plusFive\nlet f = plusFive;\n\nplusFive(3); // 8\n// Since f has a function value, it can be invoked.\nf(9); // 14\n```\n\n### Callback Functions\n\n```javascript\nconst isEven = (n) => {\n  return n % 2 == 0;\n};\n\nlet printMsg = (evenFunc, num) => {\n  const isNumEven = evenFunc(num);\n  console.log(`${num} is an even number: ${isNumEven}.`);\n};\n\n// Pass in isEven as the callback function\nprintMsg(isEven, 4);\n// => 4 is an even number: True.\n```\n\n### Array.reduce()\n\n```javascript\nconst numbers = [1, 2, 3, 4];\n\nconst sum = numbers.reduce((accumulator, curVal) => {\n  return accumulator + curVal;\n});\n\nconsole.log(sum); // 10\n```\n\n### Array.map()\n\n```javascript\nconst members = ['Taylor', 'Donald', 'Don', 'Natasha', 'Bobby'];\n\nconst announcements = members.map((member) => {\n  return member + ' joined the contest.';\n});\n\nconsole.log(announcements);\n```\n\n### Array.forEach()\n\n```javascript\nconst numbers = [28, 77, 45, 99, 27];\n\nnumbers.forEach((number) => {\n  console.log(number);\n});\n```\n\n### Array.filter()\n\n```javascript\nconst randomNumbers = [4, 11, 42, 14, 39];\nconst filteredArray = randomNumbers.filter((n) => {\n  return n > 5;\n});\n```\n\n## JavaScript Objects {.cols-2}\n\n### Accessing Properties\n\n```javascript\nconst apple = {\n  color: 'Green',\n  price: { bulk: '$3/kg', smallQty: '$4/kg' }\n};\nconsole.log(apple.color); // => Green\nconsole.log(apple.price.bulk); // => $3/kg\n```\n\n### Naming Properties\n\n```javascript\n// Example of invalid key names\nconst trainSchedule = {\n  // Invalid because of the space between words.\n  platform num: 10,\n  // Expressions cannot be keys.\n  40 - 10 + 2: 30,\n  // A + sign is invalid unless it is enclosed in quotations.\n  +compartment: 'C'\n}\n```\n\n### Non-existent properties\n\n```javascript\nconst classElection = {\n  date: 'January 12'\n};\n\nconsole.log(classElection.place); // undefined\n```\n\n### Mutable {.row-span-2}\n\n```javascript\nconst student = {\n  name: 'Sheldon',\n  score: 100,\n  grade: 'A'\n};\n\nconsole.log(student);\n// { name: 'Sheldon', score: 100, grade: 'A' }\n\ndelete student.score;\nstudent.grade = 'F';\nconsole.log(student);\n// { name: 'Sheldon', grade: 'F' }\n\nstudent = {};\n// TypeError: Assignment to constant variable.\n```\n\n### Assignment shorthand syntax\n\n```javascript\nconst person = {\n  name: 'Tom',\n  age: '22'\n};\nconst { name, age } = person;\nconsole.log(name); // 'Tom'\nconsole.log(age); // '22'\n```\n\n### Delete operator\n\n```javascript\nconst person = {\n  firstName: 'Matilda',\n  age: 27,\n  hobby: 'knitting',\n  goal: 'learning JavaScript'\n};\n\ndelete person.hobby; // or delete person[hobby];\n\nconsole.log(person);\n/*\n{\n  firstName: \"Matilda\"\n  age: 27\n  goal: \"learning JavaScript\"\n}\n*/\n```\n\n### Objects as arguments\n\n```javascript\nconst origNum = 8;\nconst origObj = { color: 'blue' };\n\nconst changeItUp = (num, obj) => {\n  num = 7;\n  obj.color = 'red';\n};\n\nchangeItUp(origNum, origObj);\n\n// Will output 8 since integers are passed by value.\nconsole.log(origNum);\n\n// Will output 'red' since objects are passed\n// by reference and are therefore mutable.\nconsole.log(origObj.color);\n```\n\n### Shorthand object creation\n\n```javascript\nconst activity = 'Surfing';\nconst beach = { activity };\nconsole.log(beach); // { activity: 'Surfing' }\n```\n\n### this Keyword\n\n```javascript\nconst cat = {\n  name: 'Pipey',\n  age: 8,\n  whatName() {\n    return this.name;\n  }\n};\nconsole.log(cat.whatName()); // => Pipey\n```\n\n### Factory functions\n\n```javascript\n// A factory function that accepts 'name',\n// 'age', and 'breed' parameters to return\n// a customized dog object.\nconst dogFactory = (name, age, breed) => {\n  return {\n    name: name,\n    age: age,\n    breed: breed,\n    bark() {\n      console.log('Woof!');\n    }\n  };\n};\n```\n\n### Object methods\n\n```javascript\nconst engine = {\n  // method shorthand, with one argument\n  start(adverb) {\n    console.log(`The engine starts up ${adverb}...`);\n  },\n  // anonymous arrow function expression with no arguments\n  sputter: () => {\n    console.log('The engine sputters...');\n  }\n};\n\nengine.start('noisily');\nengine.sputter();\n```\n\n### Getters and setters\n\n```javascript\nconst myCat = {\n  _name: 'Dottie',\n  get name() {\n    return this._name;\n  },\n  set name(newName) {\n    this._name = newName;\n  }\n};\n\n// Reference invokes the getter\nconsole.log(myCat.name);\n\n// Assignment invokes the setter\nmyCat.name = 'Yankee';\n```\n\n## JavaScript Classes\n\n### Static Methods\n\n```javascript\nclass Dog {\n  constructor(name) {\n    this._name = name;\n  }\n\n  introduce() {\n    console.log('This is ' + this._name + ' !');\n  }\n\n  // A static method\n  static bark() {\n    console.log('Woof!');\n  }\n}\n\nconst myDog = new Dog('Buster');\nmyDog.introduce();\n\n// Calling the static method\nDog.bark();\n```\n\n### Class\n\n```javascript\nclass Song {\n  constructor() {\n    this.title;\n    this.author;\n  }\n\n  play() {\n    console.log('Song playing!');\n  }\n}\n\nconst mySong = new Song();\nmySong.play();\n```\n\n### Class Constructor\n\n```javascript\nclass Song {\n  constructor(title, artist) {\n    this.title = title;\n    this.artist = artist;\n  }\n}\n\nconst mySong = new Song('Bohemian Rhapsody', 'Queen');\nconsole.log(mySong.title);\n```\n\n### Class Methods\n\n```javascript\nclass Song {\n  play() {\n    console.log('Playing!');\n  }\n\n  stop() {\n    console.log('Stopping!');\n  }\n}\n```\n\n### extends\n\n```javascript\n// Parent class\nclass Media {\n  constructor(info) {\n    this.publishDate = info.publishDate;\n    this.name = info.name;\n  }\n}\n\n// Child class\nclass Song extends Media {\n  constructor(songData) {\n    super(songData);\n    this.artist = songData.artist;\n  }\n}\n\nconst mySong = new Song({\n  artist: 'Queen',\n  name: 'Bohemian Rhapsody',\n  publishDate: 1975\n});\n```\n\n## JavaScript Modules {.cols-2}\n\n### Export\n\n```javascript\n// myMath.js\n\n// Default export\nexport default function add(x, y) {\n  return x + y;\n}\n\n// Normal export\nexport function subtract(x, y) {\n  return x - y;\n}\n\n// Multiple exports\nfunction multiply(x, y) {\n  return x * y;\n}\nfunction duplicate(x) {\n  return x * 2;\n}\nexport { multiply, duplicate };\n```\n\n### Import\n\n```javascript\n// main.js\nimport add, { subtract, multiply, duplicate } from './myMath.js';\n\nconsole.log(add(6, 2)); // 8\nconsole.log(subtract(6, 2)) // 4\nconsole.log(multiply(6, 2)); // 12\nconsole.log(duplicate(5)) // 10\n\n// index.html\n<script type=\"module\" src=\"main.js\"></script>\n```\n\n### Export Module\n\n```javascript\n// myMath.js\n\nfunction add(x, y) {\n  return x + y;\n}\nfunction subtract(x, y) {\n  return x - y;\n}\nfunction multiply(x, y) {\n  return x * y;\n}\nfunction duplicate(x) {\n  return x * 2;\n}\n\n// Multiple exports in node.js\nmodule.exports = {\n  add,\n  subtract,\n  multiply,\n  duplicate\n};\n```\n\n### Require Module\n\n```javascript\n// main.js\nconst myMath = require('./myMath.js');\n\nconsole.log(myMath.add(6, 2)); // 8\nconsole.log(myMath.subtract(6, 2)); // 4\nconsole.log(myMath.multiply(6, 2)); // 12\nconsole.log(myMath.duplicate(5)); // 10\n```\n\n## JavaScript Promises {.cols-2}\n\n### Promise states {.row-span-2}\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  const res = true;\n  // An asynchronous operation.\n  if (res) {\n    resolve('Resolved!');\n  } else {\n    reject(Error('Error'));\n  }\n});\n\npromise.then(\n  (res) => console.log(res),\n  (err) => console.error(err)\n);\n```\n\n### Executor function\n\n```javascript\nconst executorFn = (resolve, reject) => {\n  resolve('Resolved!');\n};\n\nconst promise = new Promise(executorFn);\n```\n\n### setTimeout()\n\n```javascript\nconst loginAlert = () => {\n  console.log('Login');\n};\n\nsetTimeout(loginAlert, 6000);\n```\n\n### .then() method\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('Result');\n  }, 200);\n});\n\npromise.then(\n  (res) => {\n    console.log(res);\n  },\n  (err) => {\n    console.error(err);\n  }\n);\n```\n\n### Promise.catch()\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject(Error('Promise Rejected Unconditionally.'));\n  }, 1000);\n});\n\npromise.then((res) => {\n  console.log(value);\n});\n\npromise.catch((err) => {\n  console.error(err);\n});\n```\n\n### Promise.all()\n\n```javascript\nconst promise1 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(3);\n  }, 300);\n});\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(2);\n  }, 200);\n});\n\nPromise.all([promise1, promise2]).then((res) => {\n  console.log(res[0]);\n  console.log(res[1]);\n});\n```\n\n### Promise.allSettled()\n\n```javascript\nconst promise1 = Promise.resolve(3);\nconst promise2 = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject(2);\n  }, 100);\n});\n\nPromise.allSettled([promise1, promise2]).then((res) => {\n  console.log(res[0].status);\n  console.log(res[1].status);\n});\n```\n\n### Avoiding nested Promise and .then()\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('*');\n  }, 1000);\n});\n\nconst twoStars = (star) => {\n  return star + star;\n};\n\nconst oneDot = (star) => {\n  return star + '.';\n};\n\nconst print = (val) => {\n  console.log(val);\n};\n\n// Chaining them all together\npromise.then(twoStars).then(oneDot).then(print);\n```\n\n### Creating\n\n```javascript\nconst executorFn = (resolve, reject) => {\n  console.log('The executor function of the promise!');\n};\n\nconst promise = new Promise(executorFn);\n```\n\n### Chaining multiple .then()\n\n```javascript\nconst promise = new Promise((resolve) =>\n  setTimeout(() => resolve('dAlan'), 100)\n);\n\npromise\n  .then((res) => {\n    return res === 'Alan'\n      ? Promise.resolve('Hey Alan!')\n      : Promise.reject('Who are you?');\n  })\n  .then(\n    (res) => {\n      console.log(res);\n    },\n    (err) => {\n      console.error(err);\n    }\n  );\n```\n\n### Fake http Request with Promise\n\n```javascript\nconst mock = (success, timeout = 1000) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (success) {\n        resolve({ status: 200, data: {} });\n      } else {\n        reject({ message: 'Error' });\n      }\n    }, timeout);\n  });\n};\nconst someEvent = async () => {\n  try {\n    await mock(true, 1000);\n  } catch (e) {\n    console.log(e.message);\n  }\n};\n```\n\n## JavaScript Async-Await {.cols-2}\n\n### Asynchronous\n\n```javascript\nfunction helloWorld() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('Hello World!');\n    }, 2000);\n  });\n}\n\nconst msg = async function () {\n  //Async Function Expression\n  const msg = await helloWorld();\n  console.log('Message:', msg);\n};\n\nconst msg1 = async () => {\n  //Async Arrow Function\n  const msg = await helloWorld();\n  console.log('Message:', msg);\n};\n\nmsg(); // Message: Hello World! <-- after 2 seconds\nmsg1(); // Message: Hello World! <-- after 2 seconds\n```\n\n### Resolving Promises\n\n```javascript\nlet pro1 = Promise.resolve(5);\nlet pro2 = 44;\nlet pro3 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 100, 'foo');\n});\n\nPromise.all([pro1, pro2, pro3]).then(function (values) {\n  console.log(values);\n});\n// expected => Array [5, 44, \"foo\"]\n```\n\n### Async Await Promises\n\n```javascript\nfunction helloWorld() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('Hello World!');\n    }, 2000);\n  });\n}\n\nasync function msg() {\n  const msg = await helloWorld();\n  console.log('Message:', msg);\n}\n\nmsg(); // Message: Hello World! <-- after 2 seconds\n```\n\n### Error Handling\n\n```javascript\nlet json = '{ \"age\": 30 }'; // incomplete data\n\ntry {\n  let user = JSON.parse(json); // <-- no errors\n  console.log(user.name); // no name!\n} catch (e) {\n  console.error('Invalid JSON data!');\n}\n```\n\n### Aysnc await operator\n\n```javascript\nfunction helloWorld() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('Hello World!');\n    }, 2000);\n  });\n}\n\nasync function msg() {\n  const msg = await helloWorld();\n  console.log('Message:', msg);\n}\n\nmsg(); // Message: Hello World! <-- after 2 seconds\n```\n\n## JavaScript Requests\n\n### JSON\n\n```json\nconst jsonObj = {\n  \"name\": \"Rick\",\n  \"id\": \"11A\",\n  \"level\": 4\n};\n```\n\nAlso see: [JSON cheatsheet](/json)\n\n### XMLHttpRequest\n\n```javascript\nconst xhr = new XMLHttpRequest();\nxhr.open('GET', 'mysite.com/getjson');\n```\n\n`XMLHttpRequest` is a browser-level API that enables the client to script data transfers via JavaScript, NOT part of the\nJavaScript language.\n\n### GET\n\n```javascript\nconst req = new XMLHttpRequest();\nreq.responseType = 'json';\nreq.open('GET', '/getdata?id=65');\nreq.onload = () => {\n  console.log(xhr.response);\n};\n\nreq.send();\n```\n\n### POST {.row-span-2}\n\n```javascript\nconst data = {\n  fish: 'Salmon',\n  weight: '1.5 KG',\n  units: 5\n};\nconst xhr = new XMLHttpRequest();\nxhr.open('POST', '/inventory/add');\nxhr.responseType = 'json';\nxhr.send(JSON.stringify(data));\n\nxhr.onload = () => {\n  console.log(xhr.response);\n};\n```\n\n### fetch api {.row-span-2}\n\n```javascript\nfetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      'apikey': apiKey\n    },\n    body: data\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error('Request failed!');\n  }, networkError => {\n    console.log(networkError.message)\n  })\n}\n```\n\n### JSON Formatted\n\n```javascript\nfetch('url-that-returns-JSON')\n  .then((response) => response.json())\n  .then((jsonResponse) => {\n    console.log(jsonResponse);\n  });\n```\n\n### promise url parameter fetch api\n\n```javascript\nfetch('url')\n.then(\n  response  => {\n    console.log(response);\n  },\n rejection => {\n    console.error(rejection.message);\n);\n```\n\n### Fetch API Function\n\n```javascript\nfetch('https://api-xxx.com/endpoint', {\n  method: 'POST',\n  body: JSON.stringify({ id: '200' })\n})\n  .then(\n    (response) => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Request failed!');\n    },\n    (networkError) => {\n      console.log(networkError.message);\n    }\n  )\n  .then((jsonResponse) => {\n    console.log(jsonResponse);\n  });\n```\n\n### async await syntax {.col-span-2}\n\n```javascript\nconst getSuggestions = async () => {\n  const wordQuery = inputField.value;\n  const endpoint = `${url}${queryParams}${wordQuery}`;\n  try {\n    const response = await fetch(endpoint, { cache: 'no-cache' });\n    if (response.ok) {\n      const jsonResponse = await response.json();\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n```\n"
}