{
  "id": "docker",
  "title": "Docker",
  "intro": "|\nThis is a quick reference cheat sheet for [Docker](https://docs.docker.com/get-started/). And you can find the most common Docker commands here.",
  "tags": [
    "container",
    "virtual"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#488fdf]",
  "content": "## Getting Started {.cols-2}\n\n### Getting started\n\nCreate and run a container in background\n\n```shell script\n$ docker run -d -p 80:80 docker/getting-started\n```\n\n---\n\n- `-d` - Run the container in detached mode\n- `-p 80:80` - Map port 80 to port 80 in the container\n- `docker/getting-started` - The image to use\n\n{.marker-none}\n\nCreate and run a container in foreground\n\n```shell script\n$ docker run -it -p 8001:8080 --name my-nginx nginx\n```\n\n---\n\n- `-it` - Interactive bash mode\n- `-p 8001:8080` - Map port 8001 to port 8080 in the container\n- `--name my-nginx` - Specify a name\n- `nginx` - The image to use\n\n{.marker-none}\n\n### General commands\n\n| Example                             | Description                                      |\n| ----------------------------------- | ------------------------------------------------ |\n| `docker ps`                         | List running containers                          |\n| `docker ps -a`                      | List all containers                              |\n| `docker ps -s`                      | List running containers<br>_(with CPU / memory)_ |\n| `docker images`                     | List all images                                  |\n| `docker exec -it <container>  bash` | Connecting to container                          |\n| `docker logs <container>`           | Shows container's console log                    |\n| `docker stop <container>`           | Stop a container                                 |\n| `docker restart <container>`        | Restart a container                              |\n| `docker rm <container>`             | Remove a container                               |\n| `docker port <container>`           | Shows container's port mapping                   |\n| `docker top <container>`            | List processes                                   |\n| `docker kill <container>`           | Kill a container                                 |\n\nParameter `<container>` can be container id or name\n\n## Docker Containers {.cols-2}\n\n### Starting & Stopping\n\n| Description               | Example                             |\n| ------------------------- | ----------------------------------- |\n| `docker start my-nginx`   | Starting                            |\n| `docker stop my-nginx`    | Stopping                            |\n| `docker restart my-nginx` | Restarting                          |\n| `docker pause my-nginx`   | Pausing                             |\n| `docker unpause my-nginx` | Unpausing                           |\n| `docker wait my-nginx`    | Blocking a Container                |\n| `docker kill my-nginx`    | Sending a SIGKILL                   |\n| `docker attach my-nginx`  | Connecting to an Existing Container |\n\n### Information\n\n| Example                   | Description                            |\n| ------------------------- | -------------------------------------- |\n| `docker ps`               | List running containers                |\n| `docker ps -a`            | List all containers                    |\n| `docker logs my-nginx`    | Container Logs                         |\n| `docker inspect my-nginx` | Inspecting Containers                  |\n| `docker events my-nginx`  | Containers Events                      |\n| `docker port my-nginx`    | Public Ports                           |\n| `docker top my-nginx`     | Running Processes                      |\n| `docker stats my-nginx`   | Container Resource Usage               |\n| `docker diff my-nginx`    | Lists the changes made to a container. |\n\n### Creating\n\n```yaml\ndocker create [options] IMAGE\n  -a, --attach               # attach stdout/err\n  -i, --interactive          # attach stdin (interactive)\n  -t, --tty                  # pseudo-tty\n      --name NAME            # name your image\n  -p, --publish 5000:5000    # port map (host:container)\n      --expose 5432          # expose a port to containers\n  -P, --publish-all          # publish all ports\n      --link container:alias # linking\n  -v, --volume `pwd`:/app    # mount (absolute paths needed)\n  -e, --env NAME=hello       # env vars\n```\n\n#### Example\n\n```shell script\n$ docker create --name my_redis --expose 6379 redis:3.0.2\n```\n\n### Manipulating\n\nRenaming a Container\n\n```shell script\ndocker rename my-nginx my-nginx\n```\n\nRemoving a Container\n\n```shell script\ndocker rm my-nginx\n```\n\nUpdating a Container\n\n```shell script\ndocker update --cpu-shares 512 -m 300M my-nginx\n```\n\n## Docker Images {.cols-2}\n\n### Manipulating\n\n| `Example`                          | Description                     |\n| ---------------------------------- | ------------------------------- |\n| `docker images`                    | Listing images                  |\n| `docker rmi nginx`                 | Removing an image               |\n| `docker load < ubuntu.tar.gz`      | Loading a tarred repository     |\n| `docker load --input ubuntu.tar`   | Loading a tarred repository     |\n| `docker save busybox > ubuntu.tar` | Save an image to a tar archive  |\n| `docker history`                   | Showing the history of an image |\n| `docker commit nginx`              | Save a container as an image.   |\n| `docker tag nginx eon01/nginx`     | Tagging an image                |\n| `docker push eon01/nginx`          | Pushing an image                |\n\n### Building Images\n\n```shell script\n$ docker build .\n$ docker build github.com/creack/docker-firefox\n$ docker build - < Dockerfile\n$ docker build - < context.tar.gz\n$ docker build -t eon/my-nginx .\n$ docker build -f myOtherDockerfile .\n$ curl example.com/remote/Dockerfile | docker build -f - .\n```\n\n## Docker Networking {.cols-2}\n\n### Manipulating\n\nRemoving a network\n\n```shell script\ndocker network rm MyOverlayNetwork\n```\n\nListing networks\n\n```shell script\ndocker network ls\n```\n\nGetting information about a network\n\n```shell script\ndocker network inspect MyOverlayNetwork\n```\n\nConnecting a running container to a network\n\n```shell script\ndocker network connect MyOverlayNetwork nginx\n```\n\nConnecting a container to a network when it starts\n\n```shell script\ndocker run -it -d --network=MyOverlayNetwork nginx\n```\n\nDisconnecting a container from a network\n\n```shell script\ndocker network disconnect MyOverlayNetwork nginx\n```\n\n### Creating Networks\n\n```shell script\ndocker network create -d overlay MyOverlayNetwork\n\ndocker network create -d bridge MyBridgeNetwork\n\ndocker network create -d overlay \\\n  --subnet=192.168.0.0/16 \\\n  --subnet=192.170.0.0/16 \\\n  --gateway=192.168.0.100 \\\n  --gateway=192.170.0.100 \\\n  --ip-range=192.168.1.0/24 \\\n  --aux-address=\"my-router=192.168.1.5\" \\\n  --aux-address=\"my-switch=192.168.1.6\" \\\n  --aux-address=\"my-printer=192.170.1.5\" \\\n  --aux-address=\"my-nas=192.170.1.6\" \\\n  MyOverlayNetwork\n```\n\n## Clean Up {.cols-2}\n\n### Clean All\n\nCleans up dangling images, containers, volumes, and networks (ie, not associated with a container)\n\n```shell\ndocker system prune\n```\n\n---\n\nAdditionally, remove any stopped containers and all unused images (not just dangling images)\n\n```shell\ndocker system prune -a\n```\n\n### Containers\n\nStop all running containers\n\n```shell\ndocker stop $(docker ps -a -q)\n```\n\nDelete stopped containers\n\n```shell\ndocker container prune\n```\n\n### Images\n\nRemove all dangling (not tagged and is not associated with a container) images:\n\n```shell\ndocker image prune\n```\n\nRemove all images which are not used by existing containers\n\n```shell\ndocker image prune -a\n```\n\n### Volumes\n\n```shell\ndocker volume prune\n```\n\nRemove all volumes not used by at least one container\n\n## Miscellaneous {.cols-2}\n\n### Docker Hub\n\n| Docker Syntax               | Description                         |\n| --------------------------- | ----------------------------------- |\n| `docker search search_word` | Search docker hub for images.       |\n| `docker pull user/image   ` | Downloads an image from docker hub. |\n| `docker login             ` | Authenticate to docker hub          |\n| `docker push user/image   ` | Uploads an image to docker hub.     |\n\n### Registry commands {.row-span-3}\n\nLogin to a Registry\n\n```shell script\n$ docker login\n$ docker login localhost:8080\n```\n\nLogout from a Registry\n\n```shell script\n$ docker logout\n$ docker logout localhost:8080\n```\n\nSearching an Image\n\n```shell script\n$ docker search nginx\n$ docker search nginx --stars=3 --no-trunc busybox\n```\n\nPulling an Image\n\n```shell script\n$ docker pull nginx\n$ docker pull eon01/nginx localhost:5000/myadmin/nginx\n```\n\nPushing an Image\n\n```shell script\n$ docker push eon01/nginx\n$ docker push eon01/nginx localhost:5000/myadmin/nginx\n```\n\n### Batch clean\n\n| Example                             | Description             |\n| ----------------------------------- | ----------------------- |\n| `docker stop -f $(docker ps -a -q)` | Stopping all containers |\n| `docker rm -f $(docker ps -a -q)`   | Removing all containers |\n| `docker rmi -f $(docker images -q)` | Removing all images     |\n\n### Volumes\n\nCheck volumes\n\n```shell script\n$ docker volume ls\n```\n\nCleanup unused volumes\n\n```shell script\n$ docker volume prune\n```\n"
}