{
  "id": "mitmproxy",
  "title": "Mitmproxy",
  "intro": "|\n[mitmproxy](https://mitmproxy.org/) is a free and open source interactive HTTPS proxy. This is a quick reference cheat sheet to the mitmproxy.",
  "tags": [
    "capture",
    "traffic",
    "network",
    "utility"
  ],
  "categories": [
    "Toolkit"
  ],
  "background": "bg-[#d86138]",
  "content": "## Getting Started\n\n### Usage {.col-span-2}\n\n| Option | Example                                            | Description                               |\n| ------ | -------------------------------------------------- | ----------------------------------------- |\n| `-p`   | mitmproxy -p 8001                                  | Start proxy on port 8001                  |\n| `-m`   | mitmproxy -p 8001 -m reverse:http://127.0.0.1:4000 | Reverse proxy on port 8001 to port 4000   |\n| `-w`   | mitmproxy -p 8001 -w traffic.mitm                  | Stream flows to file as they arrive       |\n| `-r`   | mitmproxy -r traffic.mitm                          | Read flows from file                      |\n| `-C`   | mitmproxy -C traffic.mitm                          | Replay client requests from a saved file  |\n| `-S`   | mitmproxy -S traffic.mitm                          | Replay server responses from a saved file |\n| `-s`   | mitmproxy -s myScript.py                           | Execute a script                          |\n| `-h`   | mitmproxy -h                                       | mitmproxy quick help                      |\n\n### Movement\n\n```\n        k                 Ctrl b\n        ▲                   ▲▲\n        │                   ││\nh ◀ ─── + ─── ▶ l           ││ page\n        │                   ││\n        ▼                   ▼▼\n        j             Ctrl f / Space\n```\n\n---\n\n| -                    | -                     |\n| -------------------- | --------------------- |\n| `h`, `j`, `k` ,`l`   | Left, Down, Up, Right |\n| `Ctrl` `b`           | Page up               |\n| `Space` / `Ctrl` `f` | Page down             |\n| `g` / `G`            | Go to beginning / end |\n| `Arrows`             | Up, Down, Left, Right |\n\n{.shortcuts}\n\n### Copy to Clipboard\n\nCommand Syntax:\n\n```\n:export.clip format flow\n```\n\n---\n\nExample:\n\n| Description                    | Command Example                    |\n| ------------------------------ | ---------------------------------- |\n| 1. Copy as a curl command      | `:export.clip curl @focus`         |\n| 2. Copy as a httpie            | `:export.clip httpie @focus`       |\n| 2. Copy as a raw               | `:export.clip raw @focus`          |\n| 2. Copy as a raw HTTP request  | `:export.clip raw_request @focus`  |\n| 2. Copy as a raw HTTP response | `:export.clip raw_response @focus` |\n\n{.style-list}\n\nExport a flow to the system clipboard.\n\n### Save to File\n\nCommand Syntax:\n\n```\n:export.file format flow path\n```\n\n---\n\nExample:\n\n| Description                  | Command Example                                    |\n| ---------------------------- | -------------------------------------------------- |\n| 1. Export to /tmp/a.curl     | `:export.file curl @focus /tmp/a.curl`             |\n| 2. Export to /tmp/a.httpie   | `:export.file httpie @focus /tmp/a.httpie`         |\n| 2. Export to /tmp/a.raw      | `:export.file raw @focus  /tmp/a.raw`              |\n| 2. Export to /tmp/a.request  | `:export.file raw_request @focus /tmp/a.request`   |\n| 2. Export to /tmp/a.response | `:export.file raw_response @focus /tmp/a.response` |\n\n{.style-list}\n\nExport a flow to the system clipboard.\n\n### Common Keybindings\n\n| -       | -                |\n| ------- | ---------------- |\n| `q`     | Back / Exit      |\n| `z`     | Clear flow list  |\n| `:`     | Command prompt   |\n| `E`     | View event log   |\n| `O`     | View options     |\n| `r`     | Replay this flow |\n| `Tab`   | Next             |\n| `Enter` | Select           |\n\n{.shortcuts}\n\n### Global Keybindings\n\n| -              | -                         |\n| -------------- | ------------------------- |\n| `-`            | Cycle to next layout      |\n| `?`            | View help                 |\n| `B`            | Start an attached browser |\n| `C`            | View commands             |\n| `I`            | Toggle intercept          |\n| `K`            | View key bindings         |\n| `P`            | View flow details         |\n| `Q`            | Exit immediately          |\n| `W`            | Stream to file            |\n| `i`            | Set intercept             |\n| `Ctrl` `right` | Focus next layout pane    |\n| `Shift` `tab`  | Focus next layout pane    |\n\n{.shortcuts}\n\n### Flow (View)\n\n| -               | -                            |\n| --------------- | ---------------------------- |\n| `A`             | Resume all intercepted flows |\n| `D`             | Duplicate flow               |\n| `F`             | Set focus follow             |\n| `L`             | Load flows from file         |\n| `M`             | Toggle viewing marked flows  |\n| `S`             | Start server replay          |\n| `U`             | Un-set all marks             |\n| `V`             | Revert changes to this flow  |\n| `X`             | Kill this flow               |\n| `Z`             | Purge all flows not showing  |\n| `a`             | Resume this intercepted flow |\n| `b`             | Save response body to file   |\n| `d`             | Delete flow from view        |\n| `e`             | Export this flow to file     |\n| `f`             | Set view filter              |\n| `m`             | Toggle mark on this flow     |\n| `n`             | Create a new flow            |\n| `o`             | Set flow list order          |\n| `r`             | Replay this flow             |\n| `v`             | Reverse flow list order      |\n| `w`             | Save listed flows to file    |\n| <code>\\|</code> | Run a script on this flow    |\n| `Ctrl` `l`      | Send cuts to clipboard       |\n\n{.shortcuts}\n\n## Mitmproxy Filter\n\n### Filter\n\n| -   | -                                     |\n| --- | ------------------------------------- |\n| `f` | Set view filter _(on flow view page)_ |\n\n{.shortcuts}\n\n---\n\n- [RegEX cheatsheet](/regex) _(cheatsheets.zip)_\n\nThe regex are Python-style, it can be specified as quoted strings\n\n### Operators\n\n| -       | -         |\n| ------- | --------- | --- |\n| `!`     | unary not |\n| `&`     | and       |\n| `       | `         | or  |\n| `(...)` | grouping  |\n\n### Expressions {.row-span-2}\n\n| -              | -                                                          |\n| -------------- | ---------------------------------------------------------- |\n| `~a`           | Match asset in response: CSS, Javascript, Flash, images.   |\n| `~b` `regex`   | Body                                                       |\n| `~bq` `regex`  | Request body                                               |\n| `~bs` `regex`  | Response body                                              |\n| `~c` `int`     | HTTP response code                                         |\n| `~d` `regex`   | Domain                                                     |\n| `~dst` `regex` | Match destination address                                  |\n| `~e`           | Match error                                                |\n| `~h` `regex`   | Header                                                     |\n| `~hq` `regex`  | Request header                                             |\n| `~hs` `regex`  | Response header                                            |\n| `~http`        | Match HTTP flows                                           |\n| `~m` `regex`   | Method                                                     |\n| `~marked`      | Match marked flows                                         |\n| `~q`           | Match request with no response                             |\n| `~s`           | Match response                                             |\n| `~src` `regex` | Match source address                                       |\n| `~t` `regex`   | Content-type header                                        |\n| `~tcp`         | Match TCP flows                                            |\n| `~tq` `regex`  | Request Content-Type header                                |\n| `~ts` `regex`  | Response Content-Type header                               |\n| `~u` `regex`   | URL                                                        |\n| `~websocket`   | Match WebSocket flows (and HTTP-WebSocket handshake flows) |\n\n### Flow selectors\n\nExpressions\n\n| -           | -                          |\n| ----------- | -------------------------- |\n| `@all     ` | All flows                  |\n| `@focus   ` | The currently focused flow |\n| `@shown   ` | All flows currently shown  |\n| `@hidden  ` | All flows currently hidden |\n| `@marked  ` | All marked flows           |\n| `@unmarked` | All unmarked flows         |\n\nmitmproxy has a set of convenient flow selectors that operate on the current view\n\n### Examples\n\nURL containing \"google.com\"\n\n```\ngoogle\\.com\n```\n\nRequests whose body contains the string \"test\"\n\n```\n~q ~b test\n```\n\nAnything but requests with a text/html content type:\n\n```\n!(~q & ~t \"text/html\")\n```\n\nReplace entire GET string in a request (quotes required to make it work):\n\n```\n\":~q ~m GET:.*:/replacement.html\"\n```\n\n## Mitmproxy Scripts {.cols-2}\n\n### Custom response\n\n```python\nfrom mitmproxy import http\n\n\ndef request(flow: http.HTTPFlow) -> None:\n    if flow.request.pretty_url == \"http://example.com/path\":\n        flow.response = http.HTTPResponse.make(\n            200,  # (optional) status code\n            b\"Hello World\",  # (optional) content\n            {\"Content-Type\": \"text/html\"}  # (optional) headers\n        )\n```\n\nSend a reply from the proxy without sending any data to the remote server\n\n### Add header\n\n```python\nclass AddHeader:\n    def __init__(self):\n        self.num = 0\n\n    def response(self, flow):\n        self.num = self.num + 1\n        flow.response.headers[\"count\"] = str(self.num)\n\n\naddons = [\n    AddHeader()\n]\n```\n\nAdd an HTTP header to each response\n\n## Also see\n\n- [mitmproxy addons](https://github.com/mitmproxy/mitmproxy/tree/master/examples/addons) _(github.com)_\n- [mitmproxy docs](https://docs.mitmproxy.org/) _(mitmproxy.org)_\n"
}