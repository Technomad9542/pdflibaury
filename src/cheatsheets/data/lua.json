{
  "id": "lua",
  "title": "Lua",
  "intro": "|\nThe [Lua](https://www.lua.org/) cheat sheet is a one-page reference sheet for the Lua 5.4 programming language.",
  "tags": [
    "script",
    "interpret"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[##00007f]",
  "content": "## Getting Started\n\n### Introduction\n\n- [Lua](https://www.lua.org/) _(lua.org)_\n- [Lua Document](https://www.lua.org/docs.html) _(lua.org/docs.html)_\n- [Learn X in Y minutes](https://learnxinyminutes.com/docs/lua/) _(learnxinyminutes.com)_\n\n### Hello World\n\n```lua\n\nprint(\"Hello, World!\") -- Hello, World!\n\n-- You can omit parentheses if the argument is one string or table literal\nprint \"Hello, World!\"  -- Hello, World!\n\nprint [[multi-line\n Hello\n World]]\n\n\n```\n\nThe famous \"Hello World\" program in Lua\n\n### Variables\n\n```lua\n\nlocal age = 18 -- local variable\nboys, girls = 2, 3 -- global variables\n\n-- Now x = 1, y = 2, z = 3, and 4 is thrown away.\nx, y, z = 1, 2, 3, 4\n\n-- Undefined variables return nil.\n-- This is not an error:\nfoo = anUnknownVariable  -- Now foo = nil.\n\n-- Variables are global by default unless declared with local.\n\n```\n\nLua is a dynamically typed language and hence only the values will have types not the variables.\n\n### Data Types {.col-span-2 .row-span-2}\n\n| Value Type | Description                                    |\n| ---------- | ---------------------------------------------- |\n| `number`   | Represent (double-precision) numbers           |\n| `string`   | Represents text                                |\n| `nil`      | Differentiates between values with data or not |\n| `boolean`  | true or false value                            |\n| `function` | Represents a sub routine                       |\n| `userdata` | Represents arbitrary C data                    |\n| `thread`   | Represents independent threads of execution    |\n| `table`    | key-value pair, or array.                      |\n\nSee: [Data Type APIs](#data-type-apis)\n\n### IO\n\n```lua\n-- Writes data to the standard output or a file.\nio.write(\"Enter your name: \")\n-- Reads input from the user or a file. You can specify formats like \"*l\" (line), \"*n\" (number), or \"*a\" (all).\nname = io.read()\n\nio.write(\"Enter your age: \")\nage = io.read()\n```\n\n### Comments\n\n```lua\n-- This is a single line comments\n```\n\n```lua\n--[[\n Comments (multi-line) could also be written like this\n--]]\n```\n\n## Operators\n\n### Arithmetic\n\n```lua\n-- add\n  result = 10 + 30  -- => 40\n\n-- subtract\nresult = 40 - 10  -- => 30\n\n-- multiply\nresult = 50 * 5   -- => 250\n\n-- divide (float division)\nresult = 16 / 4   -- => 4.0\n\n-- divide (integer division, Lua 5.3+)\nresult = 16 // 4  -- => 4\n\n-- modulo\nresult = 25 % 2   -- => 1\n\n-- power\nresult = 5 ^ 3    -- => 125\n\n-- unary minus\na = 12\nresult = -a -- => -12\n```\n\n### Relational\n\n```lua\na = 10\nb = 20\n\n-- equals\nprint(a == b) -- false\n\n-- not equals\nprint(a ~= b) -- true\n\n-- greater than\nprint(a > b) -- false\n\n-- less than\nprint(a < b) -- true\n\n-- greater than or equals\nprint(a >= b) -- false\n\n-- less than or equals\nprint(a <= b) -- true\n```\n\n### Logical\n\n```lua\n-- and\nfalse and nil  --> false\n0 and 20       --> 20\n10 and 20      --> 20\n\n-- or\ntrue or false  --> true\n10 or 0        --> 10\n12 or 4        --> 12\n\n  -- not\nnot true       --> false\n\n```\n\nOnly nil and false are falsy; 0 and '' are true!\n\n## Conditionals\n\n### if-else {.col-span-3 .row-span-2}\n\n```lua\nnum = 15\nif num > 10 then\n  print(\"num is greater than 10\")\nelseif num < 10 then\n  print(\"num is smaller than 10\")\nelse\n  print(\"num is 10\")\nend\n\n-- making a ternary operator\n-- This is similar to the a?b:c operator in C/js:\nans = aBoolValue and 'yes' or 'no'  --> 'no'\n\n```\n\n## Loops\n\n### While loop\n\n```lua\ni = 1\nwhile i <= 5 do\n  print(i)\n  i = i + 1\nend\n```\n\n### For loop\n\n```lua\n-- Numeric for loop (start, end, step)\nfor i = 1, 5, 1 do\n  print(i)\nend\n\n-- Generic for loop for tables\nt = {10, 20, 30}\nfor k, v in ipairs(t) do\n  print(k, v) -- prints 1 10, 2 20, 3 30\nend\n```\n\n### Repeat-until loop\n\n```lua\ni = 1\nrepeat\n  print(i)\n  i = i + 1\nuntil i > 5\n```\n\n### Breaking out\n\n```lua\nwhile x do\n  if condition then\n    break\n  end\nend\n```\n\n### Continue\n\n```lua\n-- prints even numbers in [|1,10|]\nfor i=1,10 do\n   if i % 2 == 1 then\n    goto continue\n  end\n   print(i)\n   ::continue::\nend\n```\n\n## Functions\n\n### Creating fns\n\n```lua\nfunction myFunction()\n  return 1\nend\n\nfunction myFunctionWithArgs(a, b)\n  -- ...\nend\n\n-- function as arg\nfunction operate(a, b, func)\n    return func(a, b)\nend\n\n\n\n-- anonymous function\nfunction (parameters)\n    -- body of the function\nend\n\n\nlocal greet = function(name)\n    return \"Hello, \" .. name\nend\n\n\n-- Not exported in the module\nlocal function myPrivateFunction()\nend\n\n\n-- Splats\nfunction doAction(action, ...)\n  print(\"Doing '\"..action..\"' to\", ...)\nend\n\n```\n\n### Invoking fns {.col-span-2}\n\n```lua\nmyFunction()\n\nprint(greet(\"Lua\")) -- Output: Hello, Lua\n\n\n-- function as arg\nlocal result = operate(5, 3, function(x, y)\n    return x + y\nend)\n\nprint(result) -- Output: 8\n\n\ndoAction('write', \"Shirley\", \"Abed\")\n--> Doing 'write' to Shirley Abed\n```\n\nYou can omit parentheses if the argument is one string or table literal\n\n```lua\nprint \"Hello World\"     -->     print(\"Hello World\")\n\ndofile 'a.lua'          -->     dofile ('a.lua')\n\nprint [[a multi-line    -->     print([[a multi-line\n message]]                        message]])\n\nf{x=10, y=20}           -->     f({x=10, y=20})\n\ntype{}                  -->     type({})\n```\n\n## Data Type APIs\n\n### Global functions {.col-span-2 .row-span-2}\n\nAssert\n\n```lua\nlocal my_table = {}\nassert(my_table, \"my_table should exist!\") -- This will not fail\n\nlocal a = nil\n-- This will cause a runtime error with the message \"a is nil\"\nassert(a, \"a is nil\")\n```\n\nType\n\n```lua\nlocal my_var = 10\nprint(type(my_var)) -- \"number\"\n\nlocal my_str = \"hello\"\nprint(type(my_str)) -- \"string\"\n\nlocal my_func = function() end\nprint(type(my_func)) -- \"function\"\n```\n\nDofile & Loadfile\n\n```lua\n-- Using dofile\ndofile(\"my_file.lua\") -- Executes my_file.lua immediately\n\n-- Using loadfile\nlocal my_func = loadfile(\"my_file.lua\")\nif my_func then\n  -- my_file.lua is valid, now execute it\n  my_func()\nelse\n  print(\"Error loading file.\")\nend\n```\n\nPairs\n\n```lua\nlocal my_table = {10, \"hello\", 20, name = \"Lua\"}\n\nprint(\"Using pairs:\")\nfor key, value in pairs(my_table) do\n  print(key, value)\nend\n\nprint(\"Using ipairs:\")\nfor key, value in ipairs(my_table) do\n  print(key, value)\nend\n```\n\nTo number\n\n```lua\nlocal num1 = tonumber(\"34\")\nprint(num1, type(num1)) -- 34 number\n\nlocal num2 = tonumber(\"34.5\")\nprint(num2, type(num2)) -- 34.5 number\n\nlocal num3 = tonumber(\"abc\")\nprint(num3) -- nil (conversion failed)\n\nlocal hex_num = tonumber(\"8f\", 16)\nprint(hex_num) -- 143 (8 * 16 + 15)\n```\n\n### Strings\n\n```lua\ns = \"Hello\"\n```\n\nConcatenation\n\n```lua\ns .. \" there\" -- => Hello there\n```\n\nCommonly used methods\n\n```lua\ns:upper() -- => HELLO\ns:lower() -- => hello\ns:len()   -- => 5\ns:find(\"o\") -- => 5\ns:reverse() -- => olleH\n```\n\nSub\n\n```lua\nlocal s = \"programming\"\ns:sub(3, 7) -- (extracts substring) => \"ogram\"\n```\n\nGsub\n\n```lua\ns:gsub() --> (substitutes all matches)\n```\n\nChar\n\n```lua\ns = \"ha\"\ns:rep(3) -- // repeats 3 times -> \"hahaha\"\nlocal s_char = string.char(72, 101, 108, 108, 111)\nprint(s_char) -- \"Hello\"\n```\n\nFormat\n\n```lua\nlocal name = \"Alice\"\nlocal age = 30\nlocal formatted = string.format(\"My name is %s and I am %d years old.\", name, age)\nprint(formatted) -- \"My name is Alice and I am 30 years old.\"\n```\n\nOthers\n\n```lua\ns:match()\ns:gmatch()\ns:dump()\ns:byte()\n```\n\n### placeholder\n\n### Math {.col-span-2 .row-span-2}\n\n```lua\nmath.abs(-5) -- => 5\n-- Returns the absolute value of x.\n```\n\n---\n\n```lua\nmath.acos(1) -- => 0\n-- Returns the arc cosine of x in radians.\n```\n\n---\n\n```lua\nmath.asin(0) -- => 0\n-- Returns the arc sine of x in radians.\n```\n\n---\n\n```lua\nmath.atan(y, x)` -- => arctangent of y/x\n-- Returns the arctangent of `y/x` in radians, using the signs of both arguments to determine the correct quadrant.\n```\n\n---\n\n```lua\nmath.ceil(x)` -- => smallest integer greater than or equal to x\n-- Returns the smallest integer value not less than `x`.\n```\n\n---\n\n```lua\nmath.cos(x)` -- => cosine of x\n-- Returns the cosine of `x` (assumed to be in radians).\n```\n\n---\n\n```lua\nmath.deg(x)` -- => radians to degrees\n-- Returns the angle `x` (in radians) converted to degrees.\n```\n\n---\n\n```lua\nmath.exp(x)` -- => e^x\n-- Returns the value of $e^x$, where $e$ is the base of natural logarithms.\n```\n\n---\n\n```lua\nmath.floor(x)` -- => largest integer less than or equal to x\n-- Returns the largest integer value not greater than `x`.\n```\n\n---\n\n```lua\nmath.fmod(x, y)` -- => remainder of x divided by y\n-- Returns the remainder of `x` divided by `y`, with the same sign as `x`.\n```\n\n---\n\n```lua\nmath.log(x, base)` -- => logarithm of x\n-- Returns the logarithm of `x` in the given `base`. If `base` is not provided, it defaults to the natural logarithm.\n```\n\n---\n\n```lua\nmath.max(x, ...)` -- => largest argument\n-- Returns the largest among its arguments.\n```\n\n---\n\n```lua\nmath.min(x, ...)` -- => smallest argument\n-- Returns the smallest among its arguments.\n```\n\n---\n\n```lua\nmath.modf(x)` -- => integer and fractional parts\n-- Returns two numbers: the integer part of `x` and the fractional part.\n```\n\n---\n\n```lua\nmath.pow(x, y)` -- => x^y\n-- Returns `x` raised to the power of `y`.\n```\n\n---\n\n```lua\nmath.rad(x)` -- => degrees to radians\n-- Returns the angle `x` (in degrees) converted to radians.\n```\n\n---\n\n```lua\nmath.random(m, n)` -- => random number\n-- Returns a pseudo-random number. When called without arguments, returns a float in the range $[0, 1)$. With one argument `n`, returns an integer in the range $[1, n]$. With two arguments `m` and `n`, returns an integer in the range $[m, n]$.\n```\n\n---\n\n```lua\nmath.sin(x)` -- => sine of x\n-- Returns the sine of `x` (assumed to be in radians).\n```\n\n---\n\n```lua\nmath.sqrt(x)` -- => square root of x\n-- Returns the non-negative square root of `x`.\n```\n\n---\n\n```lua\nmath.tan(x)` -- => tangent of x\n-- Returns the tangent of `x` (assumed to be in radians).\n\n```\n\n### Table basics\n\n```lua\n-- Array-like table (one-indexed)\nlocal colors = {\"red\", \"green\", \"blue\"}\nprint(colors[1]) -- \"red\"\n\n-- Dictionary-like table\nlocal user = {name = \"Jane\", age = 25}\nprint(user.name) -- \"Jane\"\nprint(user[\"age\"]) -- 25\n\n-- Mixed table\nlocal mixed = {1, \"two\", key = \"value\"}\nprint(mixed[1]) -- 1\nprint(mixed.key) -- \"value\"\n\n-- Getting the length of an array-like table\nprint(#colors) -- 3\n```\n\n### Tables\n\n```lua\nlocal my_table = {10, 20}\n\n-- insert (appends 30 to the end)\ntable.insert(my_table, 30)\n\n-- insertion (inserts 2 in position 1)\ntable.insert(my_table, 1, 2)\n\n-- remove (remove item in position 3)\ntable.remove(my_table, 3)\n\n-- Default numerical sort\nlocal numbers = {5, 2, 8, 1}\ntable.sort(numbers) -- {1, 2, 5, 8}\n\n-- Custom sort for descending order\nlocal numbers_desc = {5, 2, 8, 1}\ntable.sort(numbers_desc, function(a, b)\n  return a > b\nend) -- {8, 5, 2, 1}\n\n-- concat\nlocal fruit = {\"apple\", \"banana\", \"cherry\"}\nlocal fruit_string = table.concat(fruit, \", \")\nprint(fruit_string) -- apple, banana, cherry\n```\n\n## Misc\n\n### Classes {.col-span-2 .row-span-2}\n\nClasses aren't built in; there are different ways to make them using tables and metatables.\n\n```lua\n\n```\n\nShort explanation; what we are trying to do is basically making a table that can hold data and functions\n\n```lua\n\nDog = {}\n\nfunction Dog:new()\n  newObj = {sound = 'woof'}\n  self.__index = self\n  return setmetatable(newObj, self)\nend\n\nfunction Dog:makeSound()\n  print('I say ' .. self.sound)\nend\n\nmrDog = Dog:new()\nmrDog:makeSound()  -- 'I say woof'\n\n```\n\nInheritance\n\n```lua\nLoudDog = Dog:new()\n\nfunction LoudDog:makeSound()\n  s = self.sound .. ' '\n  print(s .. s .. s)\nend\n\nseymour = LoudDog:new()\nseymour:makeSound()  -- 'woof woof woof'\n```\n\nAnother example\n\n```lua\nAccount = {}\n\nfunction Account:new(balance)\n  local t = setmetatable({}, { __index = Account })\n\n  -- Your constructor stuff\n  t.balance = (balance or 0)\n  return t\nend\n\nfunction Account:withdraw(amount)\n  print(\"Withdrawing \" .. amount .. \"...\")\n  self.balance = self.balance - amount\n  self:report()\nend\n\nfunction Account:report()\n  print(\"Your current balance is: \"..self.balance)\nend\n\na = Account:new(9000)\na:withdraw(200)    -- method call\n```\n\n### Meta-tables\n\nA metatable is simply a table with functions in it.\n\n```lua\nmt = {}\n\nmt.__tostring = function() return \"lol\" end\nmt.__add      = function(b) ... end       -- a + b\nmt.__mul      = function(b) ... end       -- a * b\nmt.__index    = function(k) ... end       -- Lookups (a[k] or a.k)\nmt.__newindex = function(k, v) ... end    -- Setters (a[k] = v)\n```\n\nMetatables allow you to override behavior of another table.\n\n```lua\n\nmytable = {}\nsetmetatable(mytable, mt)\n\nprint(myobject)\n```\n\n### Files\n\n```lua\nlocal file = io.open(\"test.txt\", \"w\")\nif file then\n  file:write(\"Hello from Lua!\")\n  io.close(file)\nend\n\nlocal file = io.open(\"test.txt\", \"r\")\nif file then\n  local content = file:read(\"*a\") -- read all content\n  print(content)\n  io.close(file)\nend\n```\n"
}