{
  "id": "pm2",
  "title": "PM2",
  "intro": "|\n[PM2] is a daemon process manager that will help you manage and keep your application online. Getting started with PM2 is straightforward, it is offered as a simple and intuitive CLI.",
  "tags": [
    "process"
  ],
  "categories": [
    "Linux Command"
  ],
  "background": "bg-[#230769]",
  "content": "## Getting Started\n\n### Install\n\nThe latest PM2 version is installable with NPM or Yarn\n\n```shell script\n$ npm install pm2@latest -g\n```\n\nOR\n\n```shell script\n$ yarn global add pm2\n```\n\n### Start an app\n\nThe simplest way to start, daemonize and monitor your application is by using this command line\n\n```shell script\n$ pm2 start app.js\n```\n\nOr start any other application easily\n\n```shell script\n$ pm2 start bashscript.sh\n$ pm2 start python-app.py --watch\n$ pm2 start binary-file -- --port 1520\n```\n\n### Some options you can pass to the CLI {.row-span-3}\n\nSpecify an app name\n\n```shell script\n--name <app_name>\n```\n\nWatch and Restart app when files change\n\n```shell script\n--watch\n```\n\nSet memory threshold for app reload\n\n```shell script\n--max-memory-restart <200MB>\n```\n\nSpecify log file\n\n```shell script\n--log <log_path>\n```\n\nPass extra arguments to the script\n\n```shell script\n-- arg1 arg2 arg3\n```\n\nDelay between automatic restarts\n\n```shell script\n--restart-delay <delay in ms>\n```\n\nPrefix logs with time\n\n```shell script\n--time\n```\n\nDo not auto restart app\n\n```shell script\n--no-autorestart\n```\n\nSpecify cron for forced restart\n\n```shell script\n--cron <cron_pattern>\n```\n\nAttach to application log\n\n```shell script\n--no-daemon\n```\n\n### Managing processes\n\nManaging application state is simple here are the commands\n\n```shell script\n$ pm2 restart app_name\n$ pm2 reload app_name\n$ pm2 stop app_name\n$ pm2 delete app_name\n```\n\n#### Instead of app_name you can pass\n\n- `all` to act on all processes\n- `id` to act on a specific process id\n\n### Check status, logs, metrics {.row-span-2}\n\nNow that you have started this application, you can check its status, logs, metrics and even get the online dashboard\nwith [pm2.io](https://pm2.io/).\n\nList the status of all application managed by PM2\n\n```shell script\n$ pm2 [list|ls|status]\n```\n\nTo display logs in realtime\n\n```shell script\n$ pm2 logs\n```\n\nTo dig in older logs\n\n```shell script\n$ pm2 logs --lines 200\n```\n\nHere is a realtime dashboard that fits directly into your terminal\n\n```shell script\n$ pm2 monit\n```\n\nWeb based dashboard, cross servers with diagnostic system\n\n```shell script\n$ pm2 plus\n```\n\n### Cluster mode\n\nFor Node.js applications, PM2 includes an automatic load balancer that will share all HTTP[s]/Websocket/TCP/UDP\nconnections between each spawned processes.\n\nTo start an application in Cluster mode\n\n```shell script\n$ pm2 start app.js -i max\n```\n\nRead more about cluster mode [here](https://pm2.keymetrics.io/docs/usage/quick-start/).\n\n### Ecosystem File {.row-span-2}\n\nYou can also create a configuration file, called Ecosystem File, to manage multiple applications. To generate an\nEcosystem file\n\n```shell script\n$ pm2 ecosystem\n```\n\nThis will generate an ecosystem.config.js file\n\n```\nmodule.exports = {\n  apps : [{\n    name: \"app\",\n    script: \"./app.js\",\n    env: {\n      NODE_ENV: \"development\",\n    },\n    env_production: {\n      NODE_ENV: \"production\",\n    }\n  }, {\n     name: 'worker',\n     script: 'worker.js'\n  }]\n}\n```\n\nAnd start it easily\n\n```shell script\n$ pm2 start ecosystem.config.js\n```\n\nRead more about application declaration [here](https://pm2.keymetrics.io/docs/usage/application-declaration/)\n\n### Setup startup script\n\nRestarting PM2 with the processes you manage on server boot/reboot is critical. To solve this, just run this command to\ngenerate an active startup script\n\n```shell script\n$ pm2 save\n```\n\nRead more about startup script generator [here](https://pm2.keymetrics.io/docs/usage/startup/)\n\n### Restart application on changes\n\nItâ€™s pretty easy with the `--watch` option\n\n```\n$ cd /path/to/my/app\n$ pm2 start env.js --watch --ignore-watch=\"node_modules\"\n```\n\nThis will watch & restart the app on any file change from the current directory + all subfolders and it will ignore any\nchanges in the node_modules folder `--ignore-watch=\"node_modules\"`.\n\nYou can then use `pm2 logs` to check for restarted app logs.\n\n---\n\n### CheatSheet {.row-span-2 .col-span-2}\n\nHere are some commands that are worth knowing. Just try them with a sample application or with your current web\napplication on your development machine\n\nFork mode\n\n```shell script\n$ pm2 start app.js --name my-api # Name process\n```\n\nCluster mode\n\n```shell script\n$ pm2 start app.js -i 0        # Will start maximum processes with LB depending on available CPUs\n$ pm2 start app.js -i max      # Same as above, but deprecated.\n$ pm2 scale app +3             # Scales `app` up by 3 workers\n$ pm2 scale app 2              # Scales `app` up or down to 2 workers total\n```\n\nListing\n\n```shell script\n$ pm2 list               # Display all processes status\n$ pm2 jlist              # Print process list in raw JSON\n$ pm2 prettylist         # Print process list in beautified JSON\n\n$ pm2 describe 0         # Display all information about a specific process\n\n$ pm2 monit              # Monitor all processes\n```\n\nLogs\n\n```shell script\n$ pm2 logs [--raw]       # Display all processes logs in streaming\n$ pm2 flush              # Empty all log files\n$ pm2 reloadLogs         # Reload all logs\n```\n\nActions\n\n```shell script\n$ pm2 stop all           # Stop all processes\n$ pm2 restart all        # Restart all processes\n\n$ pm2 reload all         # Will 0s downtime reload (for NETWORKED apps)\n\n$ pm2 stop 0             # Stop specific process id\n$ pm2 restart 0          # Restart specific process id\n\n$ pm2 delete 0           # Will remove process from pm2 list\n$ pm2 delete all         # Will remove all processes from pm2 list\n```\n\nMisc\n\n```shell script\n$ pm2 reset <process>    # Reset meta data (restarted time...)\n$ pm2 updatePM2          # Update in memory pm2\n$ pm2 ping               # Ensure pm2 daemon has been launched\n$ pm2 sendSignal SIGUSR2 my-app # Send system signal to script\n$ pm2 start app.js --no-daemon\n$ pm2 start app.js --no-vizion\n$ pm2 start app.js --no-autorestart\n```\n\n### Updating PM2\n\nWe made it simple, there is no breaking change between releases and the procedure is straightforward\n\n```shell script\n$ npm install pm2@latest -g\n```\n\nThen update the in-memory PM2\n\n```shell script\n$ pm2 update\n```\n\n## Also see\n\n- [QUICK START](https://pm2.keymetrics.io/docs/usage/quick-start/) _(pm2.keymetrics.io)_\n"
}