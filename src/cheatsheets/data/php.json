{
  "id": "php",
  "title": "PHP",
  "intro": "|\nThis [PHP](https://www.php.net/manual/en/) cheat sheet provides a reference for quickly looking up the correct syntax for the code you use most frequently.",
  "tags": [
    "web"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#7477a9]",
  "content": "## Getting Started\n\n### hello.php\n\n```php\n<?php // begin with a PHP open tag.\n\necho \"Hello World\\n\";\nprint(\"Hello cheatsheets.zip\");\n\n?>\n```\n\nPHP run command\n\n```shell script\n$ php hello.php\n```\n\n### Variables\n\n```php\n$boolean1 = true;\n$boolean2 = True;\n\n$int = 12;\n$float = 3.1415926;\nunset($float);  // Delete variable\n\n$str1 = \"How are you?\";\n$str2 = 'Fine, thanks';\n```\n\nSee: [Types](#php-types)\n\n### Strings\n\n```php\n$url = \"cheatsheets.zip\";\necho \"I'm learning PHP at $url\";\n\n// Concatenate strings\necho \"I'm learning PHP at \" . $url;\n\n$hello = \"Hello, \";\n$hello .= \"World!\";\necho $hello;   # => Hello, World!\n```\n\nSee: [Strings](#php-strings)\n\n### Arrays\n\n```php\n$num = [1, 3, 5, 7, 9];\n$num[5] = 11;\nunset($num[2]);    // Delete variable\nprint_r($num);     # => 1 3 7 9 11\necho count($num);  # => 5\n```\n\nSee: [Arrays](#php-arrays)\n\n### Operators\n\n```php\n$x = 1;\n$y = 2;\n\n$sum = $x + $y;\necho $sum;   # => 3\n```\n\nSee: [Operators](#php-operators)\n\n### Include {.row-span-3}\n\n#### vars.php\n\n```php\n<?php // begin with a PHP open tag.\n$fruit = 'apple';\necho \"I was imported\";\nreturn 'Anything you like.';\n?>\n```\n\n#### test.php\n\n```php\n<?php\ninclude 'vars.php';\necho $fruit . \"\\n\";   # => apple\n\n/* Same as include,\ncause an error if cannot be included*/\nrequire 'vars.php';\n\n// Also works\ninclude('vars.php');\nrequire('vars.php');\n\n// Include through HTTP\ninclude 'http://x.com/file.php';\n\n// Include and the return statement\n$result = include 'vars.php';\necho $result;  # => Anything you like.\n?>\n```\n\n### Functions\n\n```php\nfunction add($num1, $num2 = 1) {\n    return $num1 + $num2;\n}\necho add(10);    # => 11\necho add(10, 5); # => 15\n```\n\nSee: [Functions](#php-functions)\n\n### Comments\n\n```php\n# This is a one line shell-style comment\n\n// This is a one line c++ style comment\n\n/* This is a multi line comment\n   yet another line of comment */\n```\n\n### Constants\n\n```php\nconst MY_CONST = \"hello\";\n\necho MY_CONST;   # => hello\n\n# => MY_CONST is: hello\necho 'MY_CONST is: ' . MY_CONST;\n```\n\n### Classes\n\n```php\nclass Student {\n    public function __construct($name) {\n        $this->name = $name;\n    }\n}\n$alex = new Student(\"Alex\");\n```\n\nSee: [Classes](#php-classes)\n\n## PHP Types\n\n### Boolean {.row-span-2}\n\n```php\n$boolean1 = true;\n$boolean2 = TRUE;\n$boolean3 = false;\n$boolean4 = FALSE;\n\n$boolean5 = (boolean) 1;   # => true\n$boolean6 = (boolean) 0;   # => false\n```\n\nBoolean are case-insensitive\n\n### Integer {.row-span-2}\n\n```php\n$int1 = 28;    # => 28\n$int2 = -32;   # => -32\n$int3 = 012;   # => 10 (octal)\n$int4 = 0x0F;  # => 15 (hex)\n$int5 = 0b101; # => 5  (binary)\n\n# => 2000100000 (decimal, PHP 7.4.0)\n$int6 = 2_000_100_000;\n```\n\nSee also: [Integers](https://www.php.net/manual/en/language.types.integer.php)\n\n### Strings\n\n```php\necho 'this is a simple string';\n```\n\nSee: [Strings](#php-strings)\n\n### Arrays\n\n```php\n$arr = array(\"hello\", \"world\", \"!\");\n```\n\nSee: [Arrays](#php-arrays)\n\n### Float (Double)\n\n```php\n$float1 = 1.234;\n$float2 = 1.2e7;\n$float3 = 7E-10;\n\n$float4 = 1_234.567;  // as of PHP 7.4.0\nvar_dump($float4);    // float(1234.567)\n\n$float5 = 1 + \"10.5\";   # => 11.5\n$float6 = 1 + \"-1.3e3\"; # => -1299\n```\n\n### Null\n\n```php\n$a = null;\n$b = 'Hello php!';\necho $a ?? 'a is unset'; # => a is unset\necho $b ?? 'b is unset'; # => Hello php\n\n$a = array();\n$a == null    # => true\n$a === null   # => false\nis_null($a)   # => false\n```\n\n### Iterables\n\n```php\nfunction bar(): iterable {\n    return [1, 2, 3];\n}\nfunction gen(): iterable {\n    yield 1;\n    yield 2;\n    yield 3;\n}\nforeach (bar() as $value) {\n    echo $value;   # => 123\n}\n```\n\n## PHP Strings\n\n### String\n\n```php\n# => '$String'\n$sgl_quotes = '$String';\n\n# => 'This is a $String.'\n$dbl_quotes = \"This is a $sgl_quotes.\";\n\n# => a \t tab character.\n$escaped   = \"a \\t tab character.\";\n\n# => a slash and a t: \\t\n$unescaped = 'a slash and a t: \\t';\n```\n\n### Multi-line\n\n```php\n$str = \"foo\";\n\n// Uninterpolated multi-liners\n$nowdoc = <<<'END'\nMulti line string\n$str\nEND;\n\n// Will do string interpolation\n$heredoc = <<<END\nMulti line\n$str\nEND;\n```\n\n### Manipulation\n\n```php\n$s = \"Hello Phper\";\necho strlen($s);       # => 11\n\necho substr($s, 0, 3); # => Hel\necho substr($s, 1);    # => ello Phper\necho substr($s, -4, 3);# => hpe\n\necho strtoupper($s);   # => HELLO PHPER\necho strtolower($s);   # => hello phper\n\necho strpos($s, \"l\");      # => 2\nvar_dump(strpos($s, \"L\")); # => false\n```\n\nSee: [String Functions](https://www.php.net/manual/en/ref.strings.php)\n\n## PHP Arrays\n\n### Defining {.row-span-2}\n\n```php\n$a1 = [\"hello\", \"world\", \"!\"]\n$a2 = array(\"hello\", \"world\", \"!\");\n$a3 = explode(\",\", \"apple,pear,peach\");\n```\n\n#### Mixed int and string keys\n\n```php\n$array = array(\n    \"foo\" => \"bar\",\n    \"bar\" => \"foo\",\n    100   => -100,\n    -100  => 100,\n);\nvar_dump($array);\n```\n\n#### Short array syntax\n\n```php\n$array = [\n    \"foo\" => \"bar\",\n    \"bar\" => \"foo\",\n];\n```\n\n### Multi array\n\n```php\n$multiArray = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\nprint_r($multiArray[0][0]) # => 1\nprint_r($multiArray[0][1]) # => 2\nprint_r($multiArray[0][2]) # => 3\n```\n\n### Multi type {.row-span-2}\n\n```php\n$array = array(\n    \"foo\" => \"bar\",\n    42    => 24,\n    \"multi\" => array(\n         \"dim\" => array(\n             \"a\" => \"foo\"\n         )\n    )\n);\n\n# => string(3) \"bar\"\nvar_dump($array[\"foo\"]);\n\n# => int(24)\nvar_dump($array[42]);\n\n# =>  string(3) \"foo\"\nvar_dump($array[\"multi\"][\"dim\"][\"a\"]);\n```\n\n### manipulation\n\n```php\n$arr = array(5 => 1, 12 => 2);\n$arr[] = 56;      // Append\n$arr[\"x\"] = 42;   // Add with key\nsort($arr);       // Sort\nunset($arr[5]);   // Remove\nunset($arr);      // Remove all\n```\n\nSee: [Array Functions](https://www.php.net/manual/en/ref.array.php)\n\n### Indexing iteration\n\n```php\n$array = array('a', 'b', 'c');\n$count = count($array);\n\nfor ($i = 0; $i < $count; $i++) {\n    echo \"i:{$i}, v:{$array[$i]}\\n\";\n}\n```\n\n### Value iteration\n\n```php\n$colors = array('red', 'blue', 'green');\n\nforeach ($colors as $color) {\n    echo \"Do you like $color?\\n\";\n}\n```\n\n### Key iteration\n\n```php\n$arr = [\"foo\" => \"bar\", \"bar\" => \"foo\"];\n\nforeach ( $arr as $key => $value )\n{\n  \techo \"key: \" . $key . \"\\n\";\n    echo \"val: {$arr[$key]}\\n\";\n}\n```\n\n### Concatenate arrays\n\n```php\n$a = [1, 2];\n$b = [3, 4];\n\n// PHP 7.4 later\n# => [1, 2, 3, 4]\n$result = [...$a, ...$b];\n```\n\n### Into functions\n\n```php\n$array = [1, 2];\n\nfunction foo(int $a, int $b) {\n\techo $a; # => 1\n  \techo $b; # => 2\n}\nfoo(...$array);\n```\n\n### Splat Operator\n\n```php\nfunction foo($first, ...$other) {\n\tvar_dump($first); # => a\n  \tvar_dump($other); # => ['b', 'c']\n}\nfoo('a', 'b', 'c' /*, ...*/ );\n// or\nfunction foo($first, string ...$other){}\n```\n\n## PHP Operators {.cols-4}\n\n### Arithmetic\n\n| -    | -              |\n| ---- | -------------- |\n| `+`  | Addition       |\n| `-`  | Subtraction    |\n| `*`  | Multiplication |\n| `/`  | Division       |\n| `%`  | Modulo         |\n| `**` | Exponentiation |\n\n### Assignment\n\n| -        | -                   |\n| -------- | ------------------- |\n| `a += b` | Same as `a = a + b` |\n| `a -= b` | Same as `a = a â€“ b` |\n| `a *= b` | Same as `a = a * b` |\n| `a /= b` | Same as `a = a / b` |\n| `a %= b` | Same as `a = a % b` |\n\n### Comparison {.row-span-2}\n\n| -     | -                            |\n| ----- | ---------------------------- |\n| `==`  | Equal                        |\n| `===` | Identical                    |\n| `!=`  | Not equal                    |\n| `<>`  | Not equal                    |\n| `!==` | Not identical                |\n| `<`   | Less than                    |\n| `>`   | Greater than                 |\n| `<=`  | Less than or equal           |\n| `>=`  | Greater than or equal        |\n| `<=>` | Less than/equal/greater than |\n\n### Logical\n\n| -     | -            |\n| ----- | ------------ | --- | --- |\n| `and` | And          |\n| `or`  | Or           |\n| `xor` | Exclusive or |\n| `!`   | Not          |\n| `&&`  | And          |\n| `     |              | `   | Or  |\n\n### Arithmetic {.col-span-2}\n\n```php\n// Arithmetic\n$sum        = 1 + 1; // 2\n$difference = 2 - 1; // 1\n$product    = 2 * 2; // 4\n$quotient   = 2 / 1; // 2\n\n// Shorthand arithmetic\n$num = 0;\n$num += 1;       // Increment $num by 1\necho $num++;     // Prints 1 (increments after evaluation)\necho ++$num;     // Prints 3 (increments before evaluation)\n$num /= $float;  // Divide and assign the quotient to $num\n```\n\n### Bitwise\n\n| -    | -                  |\n| ---- | ------------------ | ----------------- |\n| `&`  | And                |\n| `    | `                  | Or (inclusive or) |\n| `^`  | Xor (exclusive or) |\n| `~`  | Not                |\n| `<<` | Shift left         |\n| `>>` | Shift right        |\n\n## PHP Conditionals\n\n### If elseif else\n\n```php\n$a = 10;\n$b = 20;\n\nif ($a > $b) {\n    echo \"a is bigger than b\";\n} elseif ($a == $b) {\n    echo \"a is equal to b\";\n} else {\n    echo \"a is smaller than b\";\n}\n```\n\n### Switch\n\n```php\n$x = 0;\nswitch ($x) {\n    case '0':\n        print \"it's zero\";\n        break;\n    case 'two':\n    case 'three':\n        // do something\n        break;\n    default:\n        // do something\n}\n```\n\n### Ternary operator\n\n```php\n# => Does\nprint (false ? 'Not' : 'Does');\n\n$x = false;\n# => Does\nprint($x ?: 'Does');\n\n$a = null;\n$b = 'Does print';\n# => a is unset\necho $a ?? 'a is unset';\n# => print\necho $b ?? 'b is unset';\n```\n\n### Match\n\n```php\n$statusCode = 500;\n$message = match($statusCode) {\n  200, 300 => null,\n  400 => 'not found',\n  500 => 'server error',\n  default => 'known status code',\n};\necho $message; # => server error\n```\n\nSee: [Match](https://www.php.net/manual/en/control-structures.match.php)\n\n### Match expressions\n\n```php\n$age = 23;\n\n$result = match (true) {\n    $age >= 65 => 'senior',\n    $age >= 25 => 'adult',\n    $age >= 18 => 'young adult',\n    default => 'kid',\n};\n\necho $result; # => young adult\n```\n\n## PHP Loops\n\n### while\n\n```php\n$i = 1;\n# => 12345\nwhile ($i <= 5) {\n    echo $i++;\n}\n```\n\n### do while\n\n```php\n$i = 1;\n# => 12345\ndo {\n    echo $i++;\n} while ($i <= 5);\n```\n\n### for i\n\n```php\n# => 12345\nfor ($i = 1; $i <= 5; $i++) {\n    echo $i;\n}\n```\n\n### break\n\n```php\n# => 123\nfor ($i = 1; $i <= 5; $i++) {\n    if ($i === 4) {\n        break;\n    }\n    echo $i;\n}\n```\n\n### continue\n\n```php\n# => 1235\nfor ($i = 1; $i <= 5; $i++) {\n    if ($i === 4) {\n        continue;\n    }\n    echo $i;\n}\n```\n\n### foreach\n\n```php\n$a = ['foo' => 1, 'bar' => 2];\n# => 12\nforeach ($a as $k) {\n    echo $k;\n}\n```\n\nSee: [Array iteration](#php-value-iteration)\n\n## PHP Functions\n\n### Returning values\n\n```php\nfunction square($x)\n{\n    return $x * $x;\n}\n\necho square(4);  # => 16\n```\n\n### Return types\n\n```php\n// Basic return type declaration\nfunction sum($a, $b): float {/*...*/}\nfunction get_item(): string {/*...*/}\n\nclass C {}\n// Returning an object\nfunction getC(): C { return new C; }\n```\n\n### Nullable return types\n\n```php\n// Available in PHP 7.1\nfunction nullOrString(int $v) : ?string\n{\n    return $v % 2 ? \"odd\" : null;\n}\necho nullOrString(3);       # => odd\nvar_dump(nullOrString(4));  # => NULL\n```\n\nSee: [Nullable types](https://www.php.net/manual/en/migration71.new-features.php)\n\n### Void functions\n\n```php\n// Available in PHP 7.1\nfunction voidFunction(): void\n{\n\techo 'Hello';\n\treturn;\n}\n\nvoidFunction();  # => Hello\n```\n\n### Variable functions\n\n```php\nfunction bar($arg = '')\n{\n    echo \"In bar(); arg: '$arg'.\\n\";\n}\n\n$func = 'bar';\n$func('test'); # => In bar(); arg: test\n```\n\n### Anonymous functions\n\n```php\n$greet = function($name)\n{\n    printf(\"Hello %s\\r\\n\", $name);\n};\n\n$greet('World'); # => Hello World\n$greet('PHP');   # => Hello PHP\n```\n\n### Recursive functions\n\n```php\nfunction recursion($x)\n{\n    if ($x < 5) {\n        echo \"$x\";\n        recursion($x + 1);\n    }\n}\nrecursion(1);  # => 1234\n```\n\n### Default parameters\n\n```php\nfunction coffee($type = \"cappuccino\")\n{\n    return \"Making a cup of $type.\\n\";\n}\n# => Making a cup of cappuccino.\necho coffee();\n# => Making a cup of .\necho coffee(null);\n# => Making a cup of espresso.\necho coffee(\"espresso\");\n```\n\n### Arrow Functions\n\n```php\n$y = 1;\n\n$fn1 = fn($x) => $x + $y;\n\n// equivalent to using $y by value:\n$fn2 = function ($x) use ($y) {\n    return $x + $y;\n};\necho $fn1(5);   # => 6\necho $fn2(5);   # => 6\n```\n\n## PHP Classes\n\n### Constructor\n\n```php\nclass Student {\n    public function __construct($name) {\n        $this->name = $name;\n    }\n  \tpublic function print() {\n        echo \"Name: \" . $this->name;\n    }\n}\n$alex = new Student(\"Alex\");\n$alex->print();    # => Name: Alex\n```\n\n### Inheritance\n\n```php\nclass ExtendClass extends SimpleClass\n{\n    // Redefine the parent method\n    function displayVar()\n    {\n        echo \"Extending class\\n\";\n        parent::displayVar();\n    }\n}\n\n$extended = new ExtendClass();\n$extended->displayVar();\n```\n\n### Classes variables {.row-span-2}\n\n```php\nclass MyClass\n{\n    const MY_CONST       = 'value';\n    static $staticVar    = 'static';\n\n    // Visibility\n    public static $var1  = 'pubs';\n\n    // Class only\n    private static $var2 = 'pris';\n\n    // The class and subclasses\n    protected static $var3 = 'pros';\n\n    // The class and subclasses\n    protected $var6      = 'pro';\n\n    // The class only\n    private $var7        = 'pri';\n}\n```\n\nAccess statically\n\n```php\necho MyClass::MY_CONST;   # => value\necho MyClass::$staticVar; # => static\n```\n\n### Magic Methods\n\n```php\nclass MyClass\n{\n    // Object is treated as a String\n    public function __toString()\n    {\n        return $property;\n    }\n    // opposite to __construct()\n    public function __destruct()\n    {\n        print \"Destroying\";\n    }\n}\n```\n\n### Interface\n\n```php\ninterface Foo\n{\n    public function doSomething();\n}\ninterface Bar\n{\n    public function doSomethingElse();\n}\nclass Cls implements Foo, Bar\n{\n    public function doSomething() {}\n    public function doSomethingElse() {}\n}\n```\n\n## PHP Trait \n\n### Trait declaration & Use case {.col-span-3}\n```php\n// Declare Trait allows reuse of code\n// across multiple classes for common characteristics or use cases\n\n<?php\ntrait Logger {\n    public function log($message) {\n    \t$date = new DateTime();\n        echo \"| \".  $date->format('Y-m-d H:i:s') . \" | \" . $message;\n    }\n}\n\n// Use case : \n// Call trait with \"use <trait name> in Class\"\n\nclass User {\n    use Logger; \n\n    public function createUser() {\n        // User creation logic\n        $this->log(\"User created.\");\n    }\n}\n\nclass Product {\n    use Logger;\n\n    public function createProduct() {\n        // Product creation logic\n        $this->log(\"Product created.\");\n    }\n}\n\n$user = new User();\n$user->createUser(); // Output ex: | 2025-06-18 14:06:09 | User created.\n\n$product = new Product();\n$product->createProduct(); // Output ex: | 2025-06-18 14:06:09 | Product created.\n```\n\n## PHP Enums (PHP 8.1)\n\n### Enum Declaration & Use case {.col-span-3}\n\n```php\n<?php\n// enum is a data type that allows you to define a set of named constants,\n// representing a fixed group of related values\n\nenum Status {\n    case Pending;\n    case Approved;\n    case Rejected;\n}\n\n// Use case\n\nfunction getStatusMessage(Status $status): string {\n    return match($status) {\n        Status::Pending => \"Waiting for approval.\",\n        Status::Approved => \"Your request has been approved.\",\n        Status::Rejected => \"Your request has been rejected.\",\n    };\n}\n\n$currentStatus = Status::Approved;\necho getStatusMessage($currentStatus); // Output : Your request has been approved.\n```\n\n## PHP Date & Time Handling \n\n### Current date and time\n```php\n// DateTime in PHP handles both date and time\n\n<?php\n$now = new DateTime();\necho $now->format('Y-m-d H:i:s.u'); \n\n// Output ex: 2024-04-27 14:35:22.123456\n```\n\n\n### Creating specific date/time objects\n```php\n<?php\n// Create a date object\n$d = new DateTime('2024-04-27');\necho $d->format('Y-m-d'); \n\n// Output : 2024-04-27\n\n// Create a time object \n$t = new DateTime('15:30:45');\necho $t->format('H:i:s'); \n\n// Output : 15:30:45\n\n// Create a datetime object\n$dt = new DateTime('2024-04-27 15:30:45');\necho $dt->format('Y-m-d H:i:s'); \n\n// Output :  2024-04-27 15:30:45\n```\n\n### Converting between date formats\n```php\n<?php\n// Convert a string to a DateTime object\n$date_str = \"2024-04-27 14:00\";\n$dt_obj = new DateTime($date_str);\necho $dt_obj->format('Y-m-d H:i:s'); \n\n// Output : 2024-04-27 14:00:0027\n\n// Convert a DateTime object to a string\n$formatted_str = $dt_obj->format('d/m/Y H:i');\necho $formatted_str;\n \n// Output :  27/04/2024 14:00\n```\n### Timestamps and Unix time {.col-span-2}\n```php\n<?php\n// Get current timestamp\n$timestamp = time();\necho $timestamp; \n\n// Output ex:  1750253583\n\n// Convert timestamp back to DateTime\n$dt_from_timestamp = (new DateTime())->setTimestamp($timestamp);\necho $dt_from_timestamp->format('Y-m-d H:i:s');\n\n// Output ex : 2025-06-18 13:33:03\n```\n\n\n### Date difference and timedelta {.col-span-1}\n```php\n<?php\n$date1 = new DateTime('2024-04-27');\n$date2 = new DateTime('2024-05-01');\n\n$interval = $date1->diff($date2);\necho $interval->days; \n\n// Output : 4\n\n// Using DateInterval for date arithmetic\n$new_date = clone $date1;\n$new_date->add(new DateInterval('P10D'));\necho $new_date->format('Y-m-d'); \n\n// Output : 2024-05-07\n```\n\n## Miscellaneous\n\n### Basic error handling\n\n```php\ntry {\n    // Do something\n} catch (Exception $e) {\n    // Handle exception\n} finally {\n    echo \"Always print!\";\n}\n```\n\n### Exception in PHP 8.0 {.col-span-2}\n\n```php {.wrap}\n$nullableValue = null;\n\ntry {\n\t$value = $nullableValue ?? throw new InvalidArgumentException();\n} catch (InvalidArgumentException) { // Variable is optional\n    // Handle my exception\n    echo \"print me!\";\n}\n```\n\n### Custom exception {.row-span-2}\n\n```php\nclass MyException extends Exception {\n    // do something\n}\n```\n\nUsage\n\n```php\ntry {\n    $condition = true;\n    if ($condition) {\n        throw new MyException('bala');\n    }\n} catch (MyException $e) {\n    // Handle my exception\n}\n```\n\n### Nullsafe Operator {.row-span-2}\n\n```php\n// As of PHP 8.0.0, this line:\n$result = $repo?->getUser(5)?->name;\n\n// Equivalent to the following code:\nif (is_null($repo)) {\n    $result = null;\n} else {\n    $user = $repository->getUser(5);\n    if (is_null($user)) {\n        $result = null;\n    } else {\n        $result = $user->name;\n    }\n}\n```\n\nSee also: [Nullsafe Operator](https://wiki.php.net/rfc/nullsafe_operator)\n\n### Regular expressions\n\n```php\n$str = \"Visit cheatsheets.zip\";\necho preg_match(\"/ch/i\", $str); # => 1\n```\n\nSee: [Regex in PHP](/regex#regex-in-php)\n\n### fopen() mode\n\n| -    | -                        |\n| ---- | ------------------------ |\n| `r`  | Read                     |\n| `r+` | Read and write, prepend  |\n| `w`  | Write, truncate          |\n| `w+` | Read and write, truncate |\n| `a`  | Write, append            |\n| `a+` | Read and write, append   |\n\n### Super Global Variables {.col-span-2}\n\n| Variable     | Description                                                  |\n|--------------|:-------------------------------------------------------------|\n| `$_SERVER`   | Holds information about headers, paths, and script locations |\n| `$_GET`      | Contains data sent via URL parameters (query string)         |\n| `$_POST`     | Contains data sent via HTTP POST method                      |\n| `$_FILES`    | Contains information about uploaded files                    |\n| `$_COOKIE`   | Contains cookie data                                         |\n| `$_SESSION`  | Stores session variables                                     |\n| `$_REQUEST`  | Contains data from `$_GET`, `$_POST`, and `$_COOKIE`         |\n| `$_ENV`      | Contains environment variables                               |\n| `$GLOBALS`   | References all global variables available in the script      |\n\n{.left-text}\n\nSuper Global Variables are built-in variables always available in all scopes.\n\n\n### Runtime defined Constants\n\n```php\ndefine(\"CURRENT_DATE\", date('Y-m-d'));\n\n// One possible representation\necho CURRENT_DATE;   # => 2021-01-05\n\n# => CURRENT_DATE is: 2021-01-05\necho 'CURRENT_DATE is: ' . CURRENT_DATE;\n```\n\n## Also see\n\n- [PHP Docs](https://www.php.net/manual/en/index.php)\n- [Learn X in Y minutes](https://learnxinyminutes.com/docs/php/)\n"
}