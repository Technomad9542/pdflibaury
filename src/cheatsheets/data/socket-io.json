{
  "id": "socket-io",
  "title": "Socket io",
  "intro": "|\nSocket.IO is a JavaScript library for real-time web applications. It enables bi-directional, event-based communication between clients (typically browsers or native apps) and servers.",
  "tags": [
    "socket io",
    "web"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#1289D8]",
  "content": "# Socket.IO Multi-Language Cheat Sheet (v4)\n\n## Introduction\n\n### Introduction\n\n- [Socket.IO Official Website](https://socket.io/) _(socket.io)_\n- [Socket.IO Documentation (v4.1)](https://socket.io/docs/v4/) _(socket.io)_\n- [Socket.IO GitHub Repository](https://github.com/socketio/socket.io) _(github.com)_\n- [Getting Started with Socket.IO (Chat App Tutorial)](https://socket.io/get-started/chat/) _(socket.io)_\n- [FreeCodeCamp Socket.IO Tutorial](https://www.freecodecamp.org/news/socket-io-tutorial/) _(freecodecamp.org)_\n\n## Installation / Setup\n\n### Installation / Setup\n\n**JavaScript (Node.js)**\n\n```bash\nnpm install socket.io socket.io-client\n```\n\n**Python**\n\n```bash\npip install python-socketio eventlet\n# or\npip install python-socketio aiohttp\n```\n\n**Java**\n\n```groovy\nimplementation 'io.socket:socket.io-client:2.0.1'\n```\n\n### Installation / Setup\n\n**Swift (iOS)**\n\n```ruby\npod 'Socket.IO-Client-Swift', '~> 16.0.1'\n```\n\n**C# (.NET)**\n\n```powershell\nInstall-Package SocketIoClientDotNet\n```\n\n**React Native**\n\n```bash\nnpm install socket.io-client\n```\n\n### Installation / Setup\n\n**Go**\n\n```bash\ngo get github.com/googollee/go-socket.io\n```\n\n**Rust**\n\n```bash\n\ncargo add socketio-client\n\n```\n\n---\n\n## Connecting / Setup\n\n### JavaScript (Browser Client then Node.js Server)\n\n**Client**\n\n```js\nimport { io } from 'socket.io-client';\nconst socket = io('http://localhost:3000');\n```\n\n**Server**\n\n```js\nconst io = require('socket.io')(3000, {\n  cors: { origin: '*' }\n});\nio.on('connection', (socket) => {\n  console.log('Client connected:', socket.id);\n});\n```\n\n### Python (Client then Server)\n\n**Client**\n\n```python\nimport socketio\nsio = socketio.Client()\nsio.connect('http://localhost:3000')\n```\n\n**Server**\n\n```python\nimport socketio, eventlet, flask\n\napp = flask.Flask(__name__)\nsio = socketio.Server(cors_allowed_origins='*')\napp = socketio.WSGIApp(sio, app)\n\n@sio.event\ndef connect(sid, environ):\n    print('Client connected:', sid)\n\nif __name__ == '__main__':\n    eventlet.wsgi.server(eventlet.listen(('', 3000)), app)\n```\n\n### Java (Client then Server)\n\n**Client**\n\n```java\nIO.Options opts = new IO.Options();\nSocket socket = IO.socket(\"http://localhost:3000\", opts);\nsocket.connect();\n```\n\n**Server**\n\n```java\nimport io.socket.engineio.server.EngineIoServer;\nimport io.socket.server.SocketIoServer;\n\nEngineIoServer engineIo = new EngineIoServer();\nSocketIoServer io = new SocketIoServer(engineIo);\nio.listen(3000);\n\nio.on(\"connection\", args -> {\n    var client = args[0];\n    System.out.println(\"Client connected: \" + client.id());\n});\n```\n\n### Swift (iOS Client then Server)\n\n**Client**\n\n```swift\nlet manager = SocketManager(\n  socketURL: URL(string: \"http://localhost:3000\")!,\n  config: [.log(true), .compress]\n)\nlet socket = manager.defaultSocket\nsocket.connect()\n```\n\n**Server**\n_Server setups in Swift are uncommon; usually Node.js or Python is used._\n\n### C# (.NET Client then Server)\n\n**Client**\n\n```csharp\nvar socket = IO.Socket(\"http://localhost:3000\");\nsocket.Connect();\n```\n\n**Server**\n\n```csharp\nusing Fleck;\nvar server = new WebSocketServer(\"ws://0.0.0.0:3000\");\nserver.Start(socket =>\n{\n    socket.OnOpen = () => Console.WriteLine(\"Client connected\");\n});\n```\n\n### React Native (Client)\n\n**Client**\n\n```js\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:3000');\n```\n\n_(Server side same as JavaScript above.)_\n\n### Go (Client then Server)\n\n**Client**\n\n```go\nimport \"github.com/googollee/go-socket.io-client\"\nsocket, err := gosocketio.Dial(\n    gosocketio.GetUrl(\"localhost\", 3000, false),\n    transport.GetDefaultWebsocketTransport(),\n)\n```\n\n**Server**\n\n```go\nimport (\n    \"github.com/googollee/go-socket.io\"\n    \"net/http\"\n)\n\nserver, _ := socketio.NewServer(nil)\nserver.OnConnect(\"/\", func(s socketio.Conn) error {\n    fmt.Println(\"Client connected:\", s.ID())\n    return nil\n})\nhttp.Handle(\"/socket.io/\", server)\ngo http.ListenAndServe(\":3000\", nil)\n```\n\n### Rust (Client then Server)\n\n**Client**\n\n```rust\nuse socketio_client::ClientBuilder;\n\nasync fn run() -> Result<(), Box<dyn std::error::Error>> {\n    let socket = ClientBuilder::new(\"http://localhost:3000\")\n        .transport(\"websocket\")\n        .connect()\n        .await?;\n    Ok(())\n}\n```\n\n**Server**\n_Rust server support is experimental; commonly use Node.js/Python servers._\n\n---\n\n## Emitting & Listening to Events\n\n### JavaScript (Client then Server)\n\n**Client**\n\n```js\nsocket.emit('msg', 'Hi');\nsocket.on('reply', (data) => console.log('Reply:', data));\n```\n\n**Server**\n\n```js\nio.on('connection', (socket) => {\n  socket.on('msg', (msg) => {\n    console.log('Received:', msg);\n    socket.emit('reply', 'Hello from server');\n  });\n});\n```\n\n### Python (Client then Server)\n\n**Client**\n\n```python\nsio.emit('msg', 'Hi')\n\n@sio.on('reply')\ndef on_reply(data):\n    print('Reply:', data)\n```\n\n**Server**\n\n```python\n@sio.event\ndef msg(sid, data):\n    print('Received:', data)\n    sio.emit('reply', 'Hello from server', to=sid)\n```\n\n### Java (Client then Server)\n\n**Client**\n\n```java\nsocket.emit(\"msg\", \"Hi\");\nsocket.on(\"reply\", args -> System.out.println(\"Reply: \" + args[0]));\n```\n\n**Server**\n\n```java\nio.on(\"connection\", args -> {\n    var client = args[0];\n    client.on(\"msg\", msgArgs -> {\n        System.out.println(\"Received: \" + msgArgs[0]);\n        client.emit(\"reply\", \"Hello from server\");\n    });\n});\n```\n\n### Swift (Client then Server)\n\n**Client**\n\n```swift\nsocket.emit(\"msg\", \"Hi\")\nsocket.on(\"reply\") { data, _ in\n  print(\"Reply:\", data[0])\n}\n```\n\n**Server**\n_Server side in Swift is rare; use Node.js/Python._\n\n### C# (Client then Server)\n\n**Client**\n\n```csharp\nsocket.Emit(\"msg\", \"Hi\");\nsocket.On(\"reply\", data => Console.WriteLine(\"Reply: \" + data));\n```\n\n**Server**\n\n```csharp\nsocket.OnMessage = message =>\n{\n    Console.WriteLine(\"Received: \" + message);\n    socket.Send(\"reply\", \"Hello from server\");\n};\n```\n\n### Go (Client then Server)\n\n**Client**\n\n```go\nsocket.Emit(\"msg\", \"Hi\")\nsocket.On(\"reply\", func(msg string) {\n    fmt.Println(\"Reply:\", msg)\n})\n```\n\n**Server**\n\n```go\nserver.OnEvent(\"/\", \"msg\", func(s socketio.Conn, msg string) {\n    fmt.Println(\"Received:\", msg)\n    s.Emit(\"reply\", \"Hello from server\")\n})\n```\n\n### Rust (Client then Server)\n\n**Client**\n\n```rust\nsocket.emit(\"msg\", Payload::String(\"Hi\"));\nsocket.on(\"reply\", |payload| println!(\"Reply: {:?}\", payload));\n```\n\n**Server**\n_Experimental; typically use Node.js/Python._\n\n---\n\n## Broadcasting & Rooms\n\n### Client (All Languages)\n\n- **Join a room:**\n\n  ```js\n  // JavaScript/Python/C#/etc.\n  socket.emit('join', 'room1');\n  socket.on('msg', (data) => console.log('Room message:', data));\n  ```\n\n### Server (All Languages)\n\n- **Node.js**\n\n  ```js\n  io.on('connection', (socket) => {\n    socket.on('join', (room) => {\n      socket.join(room);\n      io.to(room).emit('msg', 'Hello Room');\n    });\n  });\n  ```\n\n- **Python**\n\n  ```python\n  @sio.event\n  def join(sid, room):\n      sio.enter_room(sid, room)\n      sio.emit('msg', 'Hello Room', room=room)\n  ```\n\n- **Go**\n\n  ```go\n  server.OnEvent(\"/\", \"join\", func(s socketio.Conn, room string) {\n      s.Join(room)\n      server.BroadcastToRoom(\"/\", room, \"msg\", \"Welcome\")\n  })\n  ```\n\n---\n\n## Disconnects & Errors\n\n### Client (All Languages)\n\n```js\nsocket.on('disconnect', (reason) => console.log('Disconnected:', reason));\nsocket.on('connect_error', (err) => console.error('Connection error:', err));\n```\n\n```python\n@sio.event\ndef disconnect():\n    print('Disconnected')\n\n@sio.event\ndef connect_error(data):\n    print('Connection error:', data)\n```\n\n```go\n// Go client library varies; similar patterns apply.\n```\n\n### Server (All Languages)\n\n```js\nio.on('connection', (socket) => {\n  socket.on('disconnect', (reason) =>\n    console.log('Client disconnected:', reason)\n  );\n});\n```\n\n```go\nserver.OnDisconnect(\"/\", func(s socketio.Conn, reason string) {\n    fmt.Println(\"Client disconnected:\", reason)\n})\n```\n\n---\n\n## Namespaces\n\n### Client (All Languages)\n\n```js\nconst adminSocket = io('/admin');\n```\n\n```python\nsio.connect('http://localhost:3000/admin', namespaces=['/admin'])\n```\n\n### Server (All Languages)\n\n```js\nio.of('/admin').on('connection', (socket) => {\n  console.log('Admin connected:', socket.id);\n});\n```\n\n```go\nserver.Of(\"/admin\").OnConnect(func(s socketio.Conn) {\n  fmt.Println(\"Admin connected:\", s.ID())\n})\n```\n\n---\n\n## Authentication (Basic Token)\n\n### Client (All Languages)\n\n```js\nconst socket = io('http://localhost:3000', {\n  auth: { token: 'abc' }\n});\n```\n\n```python\nsio.connect('http://localhost:3000', auth={'token': 'abc'})\n```\n\n### Server (All Languages)\n\n```js\nio.use((socket, next) => {\n  const token = socket.handshake.auth.token;\n  token === 'abc' ? next() : next(new Error('Auth error'));\n});\n```\n\n---\n\n## Tips for Debugging & Logging\n\n### Client\n\n- Log events:\n\n  ```js\n  socket.onAny((event, ...args) => console.log(event, args));\n  ```\n\n- Inspect network in browser devtools.\n\n### Server\n\n- **JavaScript**\n\n  ```bash\n  DEBUG=socket.io* node server.js\n  ```\n\n- **Python**\n\n  ```python\n  import logging\n  logging.getLogger('socketio').setLevel(logging.DEBUG)\n  ```\n\n- **Go**\n  Print handler errors and use middleware for structured logs.\n\n---\n\n## Advanced Features\n\n### Middleware\n\n**Client**\n_(Rarely needed)_\n\n**Server**\n\n```js\nio.use((socket, next) => {\n  console.log('Middleware:', socket.id);\n  next();\n});\n```\n\n```go\nserver.Use(func(s socketio.Conn, next func()) {\n  fmt.Println(\"Middleware triggered:\", s.ID())\n  next()\n})\n```\n\n### Binary Streaming\n\n**Client**\n\n```js\nfetch('/file')\n  .then((res) => res.arrayBuffer())\n  .then((buf) => socket.emit('file', buf));\n```\n\n**Server**\n\n```go\nserver.OnEvent(\"/\", \"file\", func(s socketio.Conn, data []byte) {\n    ioutil.WriteFile(\"upload\", data, 0644)\n})\n```\n\n---\n\n## Best Practices\n\n# Implement reconnection with exponential backoff on the client.\n\n# Sanitize and validate all data on both sides.\n\n# Use TLS in production and rotate authentication tokens frequently.\n\n# Separate concerns with namespaces and rooms.\n\n# Throttle high-frequency events and enable compression where possible.\n\n> Official docs: [https://socket.io/docs/v4/](https://socket.io/docs/v4/)\n"
}