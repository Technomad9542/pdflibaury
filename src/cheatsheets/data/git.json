{
  "id": "git",
  "title": "Git",
  "intro": "This cheat sheet summarizes commonly used Git command line instructions for quick reference.",
  "tags": [
    "github",
    "gitlab",
    "version",
    "VCS"
  ],
  "categories": [
    "Linux Command"
  ],
  "background": "bg-[#d7593e]",
  "content": "## Getting Started\n\n### Create a Repository\n\nCreate a new local repository\n\n```shell script\n$ git init [project name]\n```\n\nClone a repository\n\n```shell script\n$ git clone git_url\n```\n\nClone a repository into a specified directory\n\n```shell script\n$ git clone git_url my_directory\n```\n\n### Make a change {.row-span-2}\n\nShow modified files in working directory, staged for your next commit\n\n```shell script\n$ git status\n```\n\nStages the file, ready for commit\n\n```shell script\n$ git add [file]\n```\n\nStage all changed files, ready for commit\n\n```shell script\n$ git add .\n```\n\nCommit all staged files to version history\n\n```shell script\n$ git commit -m \"commit message\"\n```\n\nCommit all your tracked files to version history\n\n```shell script\n$ git commit -am \"commit message\"\n```\n\nDiscard changes in working directory which is not staged\n\n```shell script\n$ git restore [file]\n```\n\nUnstage a staged file or file which is staged\n\n```shell script\n$ git restore --staged [file]\n```\n\nUnstage a file, keeping the file changes\n\n```shell script\n$ git reset [file]\n```\n\nRevert everything to the last commit\n\n```shell script\n$ git reset --hard\n```\n\nDiff of what is changed but not staged\n\n```shell script\n$ git diff\n```\n\nDiff of what is staged but not yet committed\n\n```shell script\n$ git diff --staged\n```\n\nApply any commits of current branch ahead of specified one\n\n```shell script\n$ git rebase [branch]\n```\n\n### Configuration\n\nSet the name that will be attached to your commits and tags\n\n```shell script\n$ git config --global user.name \"name\"\n```\n\nSet an email address that will be attached to your commits and tags\n\n```shell script\n$ git config --global user.email \"email\"\n```\n\nEnable some colorization of Git output\n\n```shell script\n$ git config --global color.ui auto\n```\n\nEdit the global configuration file in a text editor\n\n```shell script\n$ git config --global --edit\n```\n\n### Working with Branches\n\nList all local branches\n\n```shell script\n$ git branch\n```\n\nList all branches, local and remote\n\n```shell script\n$ git branch -av\n```\n\nSwitch to my_branch, and update working directory\n\n```shell script\n$ git checkout my_branch\n```\n\nCreate a new branch called new_branch\n\n```shell script\n$ git checkout -b new_branch\n```\n\nDelete the branch called my_branch\n\n```shell script\n$ git branch -d my_branch\n```\n\nMerge branchA into branchB\n\n```shell script\n$ git checkout branchB\n$ git merge branchA\n```\n\nTag the current commit\n\n```shell script\n$ git tag my_tag\n```\n\n### Observe your Repository\n\nShow the commit history for the currently active branch\n\n```shell script\n$ git log\n```\n\nShow the commits on branchA that are not on branchB\n\n```shell script\n$ git log branchB..branchA\n```\n\nShow the commits that changed file, even across renames\n\n```shell script\n$ git log --follow [file]\n```\n\nShow the diff of what is in branchA that is not in branchB\n\n```shell script\n$ git diff branchB...branchA\n```\n\nShow any object in Git in human-readable format\n\n```shell script\n$ git show [SHA]\n```\n\n### Synchronize\n\nFetch down all the branches from that Git remote\n\n```shell script\n$ git fetch [alias]\n```\n\nMerge a remote branch into your current branch to bring it up to date\n\n```shell script\n$ git merge [alias]/[branch]\n# No fast-forward\n$ git merge --no-ff [alias]/[branch]\n# Only fast-forward\n$ git merge --ff-only [alias]/[branch]\n```\n\nTransmit local branch commits to the remote repository branch\n\n```shell script\n$ git push [alias] [branch]\n```\n\nFetch and merge any commits from the tracking remote branch\n\n```shell script\n$ git pull\n```\n\nMerge just one specific commit from another branch to your current branch\n\n```shell script\n$ git cherry-pick [commit_id]\n```\n\n### Remote\n\nAdd a git URL as an alias\n\n```shell script\n$ git remote add [alias] [url]\n```\n\nShow the names of the remote repositories you've set up\n\n```shell script\n$ git remote\n```\n\nShow the names and URLs of the remote repositories\n\n```shell script\n$ git remote -v\n```\n\nRemove a remote repository\n\n```shell script\n$ git remote rm [remote repo name]\n```\n\nChange the URL of the git repo\n\n```shell script\n$ git remote set-url origin [git_url]\n```\n\n### Temporary Commits\n\nSave modified and staged changes\n\n```shell script\n$ git stash\n```\n\nList stack-order of stashed file changes\n\n```shell script\n$ git stash list\n```\n\nWrite working from top of stash stack\n\n```shell script\n$ git stash pop\n```\n\nDiscard the changes from top of stash stack\n\n```shell script\n$ git stash drop\n```\n\n### Tracking path Changes\n\nDelete the file from project and stage the removal for commit\n\n```shell script\n$ git rm [file]\n```\n\nChange an existing file path and stage the move\n\n```shell script\n$ git mv [existing-path] [new-path]\n```\n\nShow all commit logs with indication of any paths that moved\n\n```shell script\n$ git log --stat -M\n```\n\n### Ignoring Files\n\n```\n/logs/*\n\n# \"!\" means don't ignore\n!logs/.gitkeep\n\n/# Ignore Mac system files\n.DS_store\n\n# Ignore node_modules folder\nnode_modules\n\n# Ignore SASS config files\n.sass-cache\n```\n\nA `.gitignore` file specifies intentionally untracked files that Git should ignore\n\n## Git Tricks\n\n### Rename branch\n\n- #### **Renamed** to `new_name`\n  ```shell script\n  $ git branch -m <new_name>\n  ```\n- #### **Push** and reset\n  ```shell script\n  $ git push origin -u <new_name>\n  ```\n- #### **Delete** remote branch\n  ```shell script\n  $ git push origin --delete <old>\n  ```\n  {.marker-timeline}\n\n### Log\n\nSearch change by content\n\n```shell script\n$ git log -S'<a term in the source>'\n```\n\nShow changes over time for specific file\n\n```shell script\n$ git log -p <file_name>\n```\n\nPrint out a cool visualization of your log\n\n```shell script {.wrap}\n$ git log --pretty=oneline --graph --decorate --all\n```\n\nList files changed in a commit \n\n```shell script\n$ git log --name-only <commit-id>\n```\n\nList files changed in commits excluding merges\n\n```shell script\n$ git log --no-merges --name-only\n```\n\nLimit commits to the last N entries \n\n```shell script\n$ git log -<number>\n```\n\nLimit commits to the last N entries (alternate syntax) \n\n```shell script\n$ git log -n <number>\n```\n\nLimit commits to a maximum of N entries \n\n```shell script\n$ git log --max-count=<number>\n```\n\nShow commits more recent than a specific date \n\n```shell script\n$ git log --after=\"YYYY-MM-DD HH:MM:SS ±HHMM\"\n```\n\nShow commits older than a specific date \n\n```shell script\n$ git log --before=\"YYYY-MM-DD HH:MM:SS ±HHMM\"\n```\n\nFilter commits by author matching a pattern \n\n```shell script\n$ git log --author=<pattern>\n```\n\nFilter commits by commit message matching a pattern \n\n```shell script\n$ git log --grep=<pattern>\n```\n\nShow commit graph of the current branch with reference decorations\n\n```shell script\n$ git log --graph --decorate\n```\n\nShow commit graph of a specific branch without switching to it\n\n```shell script\n$ git log --graph --decorate <branch>\n```\n\nShow commit graph for commits in one branch not in another\n\n```shell script\n$ git log --graph --decorate <branchB>..<branchA>\n```\n\nShow commit graph of all branches\n\n```shell script\n$ git log --graph --decorate --all\n```\n\n### Branch {.row-span-2}\n\nList all branches and their upstreams\n\n```shell script\n$ git branch -vv\n```\n\nQuickly switch to the previous branch\n\n```shell script\n$ git checkout -\n```\n\nGet only remote branches\n\n```shell script\n$ git branch -r\n```\n\nCheckout a single file from another branch\n\n```shell script\n$ git checkout <branch> -- <file>\n```\n\n### Rewriting history\n\nRewrite last commit message\n\n```shell script\n$ git commit --amend -m \"new message\"\n```\n\nAmend the latest commit without changing the commit message.\n\n```shell script\n$ git commit --amend --no-edit\n```\n\nSee also: [Rewriting history](https://www.atlassian.com/git/tutorials/rewriting-history)\n\n### Git Aliases\n\n```cmd\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.st status\n```\n\nSee also: [More Aliases](https://gist.github.com/johnpolacek/69604a1f6861129ef088)\n\n## Advanced Git\n\n### Worktrees\n\nCreate a new working tree at the specified path. If a branch is specified, it checks out that branch. If no branch is given, a new one is created based on HEAD and named after the new directory.\n\n```shell script\n$ git worktree add <path> [<branch>]\n```\n\nList all of the active working trees associated with the repository.\n\n```shell script\n$ git worktree list\n```\n\nRemove the specified working tree.\n\n```shell script\n$ git worktree remove <path>\n```\n\nClean up stale or manually deleted working trees.\n\n```shell script\n$ git worktree prune\n```\n\nRelocate the working tree to a new path.\n\n```shell script\n$  git worktree move <old_path> <new_path>\n```\n\n### Submodules\n\nCreate a new submodule within your repository:\n\n```shell script\n$ git submodule add <repository_url> <path>\n```\n\nClone a repository and initialize its submodules:\n\n```shell script\n$ git clone --recursive <repository_url>\n```\n\nUpdate all the submodules in your repository to the latest commit of their respective branches:\n\n```shell script\n$ git submodule update\n```\n\nPull the latest changes from the remote repositories of the submodules and update them in your main repository:\n\n```shell script\n$ git submodule update --remote\n```\n\nRemove a submodule from your repository:\n\n```shell script\n$ git submodule deinit <path>\n$ git rm <path>\n$ git commit -m \"Removed submodule\"\n```\n\n### Cherry-picking\n\nCherry-picking allows you to apply a specific commit from one branch to another branch.\n\n```shell script\n$ git cherry-pick <commit_hash>\n```\n\n### Reflog\n\nDisplay the reflog, showing the history of HEAD and branch movements:\n\n```shell script\n$ git reflog\n```\n\nFind the hash of the lost commit or branch using the reflog and then checkout to that hash to restore it:\n\n```shell script\n$ git checkout <commit_or_branch_hash>\n```\n"
}