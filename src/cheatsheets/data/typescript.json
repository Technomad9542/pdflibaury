{
  "id": "typescript",
  "title": "TypeScript",
  "intro": "|\nA TypeScript cheat sheet with the most important concepts, functions, methods, and more. A complete quick reference for beginners.",
  "tags": [
    "ts",
    "web"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#4476c0]",
  "content": "## Getting Started\n\n### Installing the Compiler\n\n```shell\nnpm install typescript --save-dev\nnpm tsc\n```\n\n### Introduction\n\nTypeScript is a superset of JavaScript that adds **static typing**, **interfaces**, and **compile-time error checking**. It compiles down to plain JavaScript.\n- [TypeScript Handbook](https://www.typescriptlang.org/docs/)\n\n### Basic Types\n\n```typescript\nlet age: number = 25;\nlet name: string = \"Alice\";\nlet isOnline: boolean = true;\nlet notSure: any = \"Could be anything\";\nlet nothingHere: null = null;\nlet notDefined: undefined = undefined;\nlet symbolValue: symbol = Symbol(\"unique\");\nlet bigIntValue: bigint = 9007199254740991n;\n```\n\n### Arrays\n\n```typescript\nlet numbers: number[] = [1, 2, 3];\nlet fruits: Array<string> = [\"apple\", \"banana\"];\nlet mixed: (string | number)[] = [\"one\", 2, \"three\"];\n```\n\n### Tuples\n\n```typescript\nlet person: [string, number];\nperson = [\"John\", 30]; // ✅\nperson = [30, \"John\"]; // ❌ Error\n```\n\n### Enums\n\n```typescript\nenum Direction {\n  Up = 1,\n  Down,\n  Left,\n  Right\n}\n\nlet move: Direction = Direction.Up;\n\nenum Status {\n  Success = \"SUCCESS\",\n  Error = \"ERROR\"\n}\n```\n\n### Type Aliases\n\n```typescript\ntype ID = string | number;\nlet userId: ID = 123;\n\ntype Callback = () => void;\n```\n\n### Interfaces\n\n```typescript\ninterface User {\n  name: string;\n  age: number;\n  isAdmin?: boolean; // optional\n  readonly id: number; // readonly\n}\n\nconst user: User = { name: \"Bob\", age: 25, id: 1 };\n```\n\n### Extending Interfaces\n\n```typescript\ninterface Animal {\n  name: string;\n}\n\ninterface Dog extends Animal {\n  breed: string;\n}\n\nconst dog: Dog = { name: \"Fido\", breed: \"Labrador\" };\n```\n\n### Functions\n\n```typescript\nfunction greet(name: string): string {\n  return `Hello, ${name}`;\n}\n\nconst add = (a: number, b: number): number => a + b;\n```\n\n### Optional & Default Parameters\n\n```typescript\nfunction log(message: string, userId?: string) {\n  console.log(message, userId ?? \"Guest\");\n}\n\nfunction multiply(a: number, b: number = 2) {\n  return a * b;\n}\n```\n\n### Rest Parameters\n\n```typescript\nfunction sum(...numbers: number[]): number {\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n}\n```\n\n### Function Overloads\n\n```typescript\nfunction combine(a: number, b: number): number;\nfunction combine(a: string, b: string): string;\nfunction combine(a: any, b: any): any {\n  return a + b;\n}\n```\n\n### Union & Intersection Types\n\n```typescript\ntype Status = \"success\" | \"error\" | \"loading\";\n\ntype UserInfo = { name: string };\ntype AdminInfo = { admin: boolean };\n\ntype AdminUser = UserInfo & AdminInfo;\n```\n\n### Literal Types\n\n```typescript\ntype Alignment = \"left\" | \"center\" | \"right\";\nlet align: Alignment = \"left\";\n```\n\n### Generics\n\n```typescript\nfunction identity<T>(value: T): T {\n  return value;\n}\n\nlet num = identity<number>(42);\nlet str = identity(\"Hello\");\n```\n\n### Generic Constraints\n\n```typescript\ninterface Lengthwise {\n  length: number;\n}\n\nfunction logLength<T extends Lengthwise>(arg: T): void {\n  console.log(arg.length);\n}\n```\n\n### Generic Interfaces\n\n```typescript\ninterface GenericIdentityFn<T> {\n  (arg: T): T;\n}\n\nconst myIdentity: GenericIdentityFn<number> = identity;\n```\n\n### Classes\n\n```typescript\nclass Person {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  greet() {\n    console.log(`Hello, I'm ${this.name}`);\n  }\n}\n\nconst alice = new Person(\"Alice\");\nalice.greet();\n```\n\n### Access Modifiers\n\n```typescript\nclass Car {\n  public brand: string;\n  private speed: number;\n  protected year: number;\n\n  constructor(brand: string, speed: number, year: number) {\n    this.brand = brand;\n    this.speed = speed;\n    this.year = year;\n  }\n}\n```\n\n### Abstract Classes\n\n```typescript\nabstract class Animal {\n  abstract makeSound(): void;\n  move(): void {\n    console.log(\"Moving...\");\n  }\n}\n\nclass Dog extends Animal {\n  makeSound() {\n    console.log(\"Woof!\");\n  }\n}\n```\n\n### Implements Interface\n\n```typescript\ninterface Vehicle {\n  start(): void;\n}\n\nclass Bike implements Vehicle {\n  start() {\n    console.log(\"Bike starting...\");\n  }\n}\n```\n\n### Type Assertions\n\n```typescript\nlet someValue: unknown = \"Hello TypeScript\";\nlet strLength: number = (someValue as string).length;\n```\n\n### Nullish Coalescing\n\n```typescript\nlet input: string | null = null;\nlet result = input ?? \"Default\";\n```\n\n### Optional Chaining\n\n```typescript\nconst user = { profile: { name: \"Alice\" } };\nconsole.log(user.profile?.name); // Alice\nconsole.log(user.address?.street); // undefined\n```\n\n### Namespaces\n\n```typescript\nnamespace Utils {\n  export function log(msg: string) {\n    console.log(msg);\n  }\n}\n\nUtils.log(\"Hello\");\n```\n\n### Modules\n\n```typescript\n// math.ts\nexport function add(a: number, b: number) {\n  return a + b;\n}\n\n// app.ts\nimport { add } from \"./math\";\nconsole.log(add(2, 3));\n```\n\n### Export Default\n\n```typescript\n// logger.ts\nexport default class Logger {\n  log(msg: string) {\n    console.log(msg);\n  }\n}\n\n// main.ts\nimport Logger from \"./logger\";\nconst logger = new Logger();\nlogger.log(\"Info\");\n```\n\n### Promises & Async/Await\n\n```typescript\nasync function fetchData(): Promise<string> {\n  return \"Data loaded\";\n}\n\nfetchData().then(console.log);\n```\n\n### Typing Async Functions\n\n```typescript\ninterface User {\n  id: number;\n  name: string;\n}\n\nasync function getUser(id: number): Promise<User> {\n  // Simulate fetch\n  return { id, name: \"User\" };\n}\n```\n\n### Readonly & Record\n\n```typescript\ninterface Config {\n  readonly apiKey: string;\n}\n\ntype Point = Record<\"x\" | \"y\", number>;\nconst origin: Point = { x: 0, y: 0 };\n```\n\n## Advanced Features\n\n### Type Guards\n\n```typescript\nfunction isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\nfunction process(value: string | number) {\n  if (isString(value)) {\n    console.log(value.toUpperCase());\n  } else {\n    console.log(value.toFixed(2));\n  }\n}\n```\n\n### Index Signatures\n\n```typescript\ninterface Dictionary {\n  [key: string]: string;\n}\n\nconst dict: Dictionary = { hello: \"world\" };\n```\n\n### Mapped Types\n\n```typescript\ntype Flags = { [K in \"option1\" | \"option2\"]: boolean };\nconst flags: Flags = { option1: true, option2: false };\n```\n\n### Conditional Types\n\n```typescript\ntype NonNullable<T> = T extends null | undefined ? never : T;\ntype SafeString = NonNullable<string | null>; // string\n```\n\n### Unknown vs Any\n\n```typescript\nlet value: unknown;\nvalue = 5; // OK\n// console.log(value.length); // Error\n\nlet anyValue: any;\nanyValue = 5;\nconsole.log(anyValue.length); // No error, but risky\n```\n\n### Never Type\n\n```typescript\nfunction throwError(msg: string): never {\n  throw new Error(msg);\n}\n```\n\n### Decorators (Experimental)\n\n```typescript\nfunction sealed(target: any) {\n  Object.seal(target);\n  Object.seal(target.prototype);\n}\n\n@sealed\nclass SealedClass {}\n```\n\n### Utility Types\n\n```typescript\ninterface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\n// Partial\ntype PartialTodo = Partial<Todo>;\n\n// Required\ntype RequiredTodo = Required<PartialTodo>;\n\n// Pick\ntype TodoPreview = Pick<Todo, \"title\" | \"completed\">;\n\n// Omit\ntype TodoWithoutDesc = Omit<Todo, \"description\">;\n\n// ReturnType\nfunction f() { return { x: 10, y: 3 }; }\ntype P = ReturnType<typeof f>;\n\n// Parameters\ntype Params = Parameters<(a: number, b: string) => void>;\n```\n\n### Keyof and Typeof\n\n```typescript\ninterface Person {\n  name: string;\n  age: number;\n}\n\ntype PersonKeys = keyof Person; // \"name\" | \"age\"\n\nconst person = { name: \"Alice\", age: 30 };\ntype PersonType = typeof person; // { name: string; age: number }\n```\n\n### Infer Keyword\n\n```typescript\ntype ReturnType<T> = T extends (...args: any[]) => infer R ? R : any;\n```\n\n## Conditionals and Loops\n\n### if Statement\n\n```typescript\nconst max: number = 100;\nif (max > 50) {\n  console.log(\"Large\");\n}\n```\n\n### Ternary Operator\n\n```typescript\nconst isEven: boolean = (10 % 2 === 0) ? true : false;\n```\n\n### Switch Statement\n\n```typescript\nconst color: string = \"red\";\nswitch (color) {\n  case \"red\":\n    console.log(\"Stop\");\n    break;\n  default:\n    console.log(\"Go\");\n}\n```\n\n### For Loop\n\n```typescript\nfor (let i: number = 0; i < 5; i++) {\n  console.log(i);\n}\n```\n\n### While Loop\n\n```typescript\nlet count: number = 0;\nwhile (count < 5) {\n  console.log(count++);\n}\n```\n\n### For...of Loop\n\n```typescript\nconst arr: number[] = [1, 2, 3];\nfor (const num of arr) {\n  console.log(num);\n}\n```\n\n### For...in Loop\n\n```typescript\nconst obj = { a: 1, b: 2 };\nfor (const key in obj) {\n  console.log(key);\n}\n```\n\n## Arrays and Iterables\n\n### Array Methods\n\n```typescript\nconst nums: number[] = [1, 2, 3];\n\n// Map\nconst doubled: number[] = nums.map(n => n * 2);\n\n// Filter\nconst evens: number[] = nums.filter(n => n % 2 === 0);\n\n// Reduce\nconst sum: number = nums.reduce((acc, curr) => acc + curr, 0);\n```\n\n### Readonly Arrays\n\n```typescript\nconst readOnlyNums: ReadonlyArray<number> = [1, 2, 3];\n// readOnlyNums.push(4); // Error\n```\n\n### Sets\n\n```typescript\nconst set: Set<number> = new Set([1, 2, 3]);\nset.add(4);\nset.delete(1);\n```\n\n### Maps\n\n```typescript\nconst map: Map<string, number> = new Map();\nmap.set(\"one\", 1);\nmap.get(\"one\"); // 1\n```\n\n## Objects\n\n### Object Types\n\n```typescript\nconst car: { type: string, mileage?: number } = {\n  type: \"Toyota\"\n};\n```\n\n### Indexable Types\n\n```typescript\ninterface StringArray {\n  [index: number]: string;\n}\n\nconst myArray: StringArray = [\"Bob\", \"Fred\"];\n```\n\n### Excess Property Checks\n\n```typescript\ninterface Square {\n  color: string;\n  width: number;\n}\n\n// const redSquare = { color: \"red\", width: 100, height: 100 }; // Error if strict\n```\n\n## Modules and Namespaces\n\n### Namespace with Internal Modules\n\n```typescript\nnamespace Geometry {\n  export interface Point {\n    x: number;\n    y: number;\n  }\n  export function distance(p1: Point, p2: Point): number {\n    return Math.sqrt((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2);\n  }\n}\n```\n\n### Module Resolution\n\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node\"\n  }\n}\n\n## Error Handling\n\n### Try Catch\n\n```typescript\ntry {\n  throw new Error(\"Oops\");\n} catch (e: unknown) {\n  if (e instanceof Error) {\n    console.log(e.message);\n  }\n}\n```\n\n### Custom Errors\n\n```typescript\nclass CustomError extends Error {\n  constructor(message: string) {\n    super(message);\n  }\n}\n```\n\n## TypeScript with JavaScript Features\n\n### Destructuring\n\n```typescript\nconst [first, second]: [number, number] = [1, 2];\nconst { name: userName, age }: { name: string, age: number } = { name: \"Alice\", age: 30 };\n```\n\n### Spread Operator\n\n```typescript\nconst arr1: number[] = [1, 2];\nconst arr2: number[] = [...arr1, 3, 4];\n```\n\n### Template Literals\n\n```typescript\nconst greeting: string = `Hello, ${name}`;\n```\n\n### Arrow Functions\n\n```typescript\nconst square = (x: number): number => x * x;\n```\n"
}