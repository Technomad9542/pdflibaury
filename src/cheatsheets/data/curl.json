{
  "id": "curl",
  "title": "Curl",
  "intro": "|\nThis [Curl](https://github.com/curl/curl) cheat sheet contains commands and examples of some common Curl tricks.",
  "tags": [
    "url",
    "request"
  ],
  "categories": [
    "Linux Command"
  ],
  "background": "bg-slate-600",
  "content": "## Getting Started\n\n### Introduction\n\n`Curl` is a tool for transferring data between servers, supporting protocols, including:\n\n- HTTP\n- HTTPS\n- FTP\n- IMAP\n- LDAP\n- POP3\n- SCP\n- SFTP\n- SMB\n- SMTP\n- etc...\n\n{.cols-3 .marker-none}\n\n---\n\n- [Curl GitHub source repository](https://github.com/curl/curl) _(github.com)_\n- [Curl Official Website](https://curl.se/) _(curl.se)_\n\n### Options {.col-span-2 row-span-2}\n\n```bash\n-o <file>    # --output: write to file\n-u user:pass # --user: authentication\n```\n\n---\n\n```bash\n-v   # --verbose: Make curl verbose during operation\n-vv  # more verbose\n-s   # --silent: don't show progress meter or errors\n-S   # --show-error: When used with --silent (-sS), show errors but no progress meter\n```\n\n---\n\n```bash\n-i  # --include: include HTTP headers in the output\n-I  # --head: header only\n```\n\n### Request\n\n```bash\n-X POST # --request\n-L # If the page redirects, follow the link\n-F # --form: HTTP POST data for multipart/form-data\n```\n\n### data\n\n```bash\n# --data: HTTP post data\n# URL encoding (eg, status=\"Hello\")\n-d 'data'\n\n# --data pass file\n-d @file\n\n# --get: send -d data via get\n-G\n```\n\n### Header information Headers\n\n```bash\n-A <str>      # --user-agent\n\n-b name=val   # --cookie\n\n-b, --cookie FILE           # Load cookies from the specified file for the URL\n-c, --cookie-jar FILE       # Save cookies to the specified file from the URL\n\n-H \"X-Foo: y\" # --header\n\n--compressed  # use deflate/gzip\n```\n\n### SSL\n\n```bash\n    --cacert <file>\n    --capath <dir>\n```\n\n```bash\n-E, --cert <cert> # --cert: client certificate file\n    --cert-type # der/pem/eng\n-k, --insecure # For self-signed certificates\n```\n\n#### Install\n\n```bash\napk add --update curl # install in alpine linux\n```\n\n## Example {.cols-6}\n\n### CURL GET/HEAD {.col-span-4 .row-span-2}\n\n| command                                                               | description                         |\n| :-------------------------------------------------------------------- | :---------------------------------- |\n| `curl -I https://cheatsheets.zip`                                     | `curl` sends a request              |\n| `curl -v -I https://cheatsheets.zip`                                  | `curl` request with details         |\n| `curl -X GET https://cheatsheets.zip`                                 | use explicit http method for `curl` |\n| `curl --noproxy 127.0.0.1 http://www.stackoverflow.com`               | `curl` without http proxy           |\n| `curl --connect-timeout 10 -I -k https://cheatsheets.zip`             | `curl` has no timeout by default    |\n| `curl --verbose --header \"Host: www.mytest.com:8182\" cheatsheets.zip` | `curl` get extra header             |\n| `curl -k -v https://www.google.com`                                   | `curl` get response with headers    |\n\n### Multiple file upload {.col-span-2}\n\n```bash\n$ curl -v --include \\\n--form key1=value1 \\\n    --form upload=@localfilename URL\n```\n\n### Prettify json output for curl response {.col-span-2}\n\n```bash\n$ curl -XGET http://${elasticsearch_ip}:9200/_cluster/nodes | python -m json.tool\n```\n\n### CURL POST {.col-span-4}\n\n| command                                                                     | description         |\n| :-------------------------------------------------------------------------- | :------------------ |\n| `curl -d \"name=username&password=123456\" <URL>`                             | `curl` send request |\n| `curl <URL> -H \"content-type: application/json\" -d \"{ \\\"woof\\\": \\\"bark\\\"}\"` | `curl` sends json   |\n\n### CURL script install rvm {.col-span-2}\n\n```shell\ncurl -sSL https://get.rvm.io | bash\n```\n\n### CURL Advanced {.col-span-6}\n\n| command                                                                                     | description                    |\n| :------------------------------------------------------------------------------------------ | :----------------------------- |\n| `curl -L -s http://ipecho.net/plain, curl -L -s http://whatismijnip.nl`                     | get my public `IP`             |\n| `curl -u $username:$password http://repo.dennyzhang.com/README.txt`                         | `curl` with credentials        |\n| `curl -v -F key1=value1 -F upload=@localfilename <URL>`                                     | `curl` upload                  |\n| `curl -k -v --http2 https://www.google.com/`                                                | use http2 curl                 |\n| `curl -T cryptopp552.zip -u test:test ftp://10.32.99.187/`                                  | curl `ftp` upload              |\n| `curl -u test:test ftp://10.32.99.187/cryptopp552.zip -o cryptopp552.zip`                   | curl `ftp` download            |\n| `curl -v -u admin:admin123 --upload-file package1.zip http://mysever:8081/dir/package1.zip` | upload with credentials `curl` |\n\n### Check website response time {.col-span-4}\n\n```shell\ncurl -s -w \\\n'\\nLookup time:\\t%{time_namelookup}\\nConnect time:\\t%{time_connect}\\nAppCon time:\\t%{time_appconnect}\\nRedirect time:\\t%{time_redirect}\\nPreXfer time:\\t%{time_pretransfer }\\nStartXfer time:\\t%{time_starttransfer}\\n\\nTotal time:\\t%{time_total}\\n' \\\n     -o /dev/null https://www.google.com\n```\n\n### Use Curl to check if a remote resource is available {.col-span-2}\n\n```bash\ncurl -o /dev/null --silent -Iw \"%{http_code}\" https://example.com/my.remote.tarball.gz\n```\n\n### Downloading file {.col-span-3}\n\n```bash\ncurl https://example.com | \\\ngrep --only-matching 'src=\"[^\"]*.[png]\"' | \\\ncut -d \\\" -f2 | \\\nwhile read i; do curl https://example.com/\"${i}\" \\\n-o \"${i##*/}\"; done\n```\n\nDownload all PNG files from the site (using GNU grep)\n\n### Download the file, save the file without changing its name {.col-span-3}\n\n```bash\ncurl --remote-name \"https://example.com/linux-distro.iso\"\n```\n\nRename file\n\n```bash\ncurl --remote-name \"http://example.com/index.html\" --output foo.html\n```\n\n### continue partial download {.col-span-3}\n\n```bash\ncurl --remote-name --continue-at -\"https://example.com/linux-distro.iso\"\n```\n\n### Download files from multiple domains {.col-span-3}\n\n```bash\ncurl \"https://www.{example,w3,iana}.org/index.html\" --output \"file_#1.html\"\n```\n\n### Download a series of files {.col-span-3}\n\n```bash\ncurl \"https://{foo,bar}.com/file_[1-4].webp\" --output \"#1_#2.webp\"\n```\n\nDownload a series of files (output `foo_file1.webp`, `foo_file2.webp...bar_file1_webp`, etc.)\n\n### Redirect output to file {.col-span-3}\n\n```bash\n$ curl http://url/file > file\n```\n\n### Basic Authentication {.col-span-3}\n\n```bash\n$ curl --user username:password http://example.com/\n$ curl -u username:password http://example.com/\n```\n\n### Write to file instead of stdout {.col-span-2}\n\n```bash\n$ curl -o file http://url/file\n$ curl --output file http://url/file\n```\n\n### Download header information\n\n```bash\n$ curl -I url\n# display header information\n```\n\n### Write output to a file named remote_file {.col-span-2}\n\n```bash\n$ curl -o file http://url/file\n$ curl --output file http://url/file\n```\n\n### Execute remote script {.col-span-2}\n\n```bash\n$ curl -s http://url/myscript.sh\n```\n\n### Configuration file {.col-span-2}\n\n```bash\ncurl -K file\n# read configuration from file\ncurl --config file\n$HOME/.curlrc # default configuration file on UNIX-like systems\n```\n"
}