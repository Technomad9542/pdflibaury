{
  "id": "yaml",
  "title": "YAML",
  "intro": "|\nThis is a quick reference cheat sheet for understanding and writing YAML format configuration files.",
  "tags": [
    "config",
    "format"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#b42e28]",
  "content": "## Getting Started\n\n### Introduction\n\n[YAML](https://yaml.org/) is a data serialization language designed to be directly writable and readable by humans\n\n- YAML does not allow the use of tabs\n- Must be space between the element parts\n- YAML is CASE sensitive\n- End your YAML file with the `.yaml` or `.yml` extension\n- YAML is a superset of JSON\n- Ansible playbooks are YAML files {.marker-round}\n\n### Scalar types {.row-span-2}\n\n<!-- prettier-ignore -->\n```yaml\nn1: 1            # integer\nn2: 1.234        # float\n\ns1: 'abc'        # string\ns2: \"abc\"        # string\ns3: abc          # string\n\nb: false         # boolean type\n\nd: 2015-04-05    # date type\n```\n\n#### ↓ Equivalent JSON\n\n```json {.wrap}\n{\n  \"n1\": 1,\n  \"n2\": 1.234,\n  \"s1\": \"abc\",\n  \"s2\": \"abc\",\n  \"s3\": \"abc\",\n  \"b\": false,\n  \"d\": \"2015-04-05\"\n}\n```\n\nUse spaces to indent. There must be space between the element parts.\n\n### Variables\n\n```yaml\nsome_thing: &VAR_NAME foobar\nother_thing: *VAR_NAME\n```\n\n#### ↓ Equivalent JSON\n\n<!-- prettier-ignore -->\n```json {.wrap}\n{\n  \"some_thing\": \"foobar\",\n  \"other_thing\": \"foobar\"\n}\n```\n\n### Comments\n\n```yaml\n# A single line comment example\n\n# block level comment example\n# comment line 1\n# comment line 2\n# comment line 3\n```\n\n### Multiline strings\n\n```yaml\ndescription: |\n  hello\n  world\n```\n\n#### ↓ Equivalent JSON\n\n```json {.wrap}\n{ \"description\": \"hello\\nworld\\n\" }\n```\n\n### Inheritance {.row-span-2}\n\n```yaml\nparent: &defaults\n  a: 2\n  b: 3\n\nchild:\n  <<: *defaults\n  b: 4\n```\n\n#### ↓ Equivalent JSON\n\n```json {.wrap}\n{\n  \"parent\": {\n    \"a\": 2,\n    \"b\": 3\n  },\n  \"child\": {\n    \"a\": 2,\n    \"b\": 4\n  }\n}\n```\n\n### Reference {.row-span-2}\n\n```yaml\nvalues: &ref\n  - Will be\n  - reused below\n\nother_values:\n  i_am_ref: *ref\n```\n\n#### ↓ Equivalent JSON\n\n<!-- prettier-ignore -->\n```json {.wrap}\n{\n  \"values\": [\n    \"Will be\",\n    \"reused below\"\n  ],\n  \"other_values\": {\n    \"i_am_ref\": [\n      \"Will be\",\n      \"reused below\"\n    ]\n  }\n}\n```\n\n### Folded strings\n\n```yaml\ndescription: >\n  hello world\n```\n\n#### ↓ Equivalent JSON\n\n```json {.wrap}\n{ \"description\": \"hello world\\n\" }\n```\n\n### Two Documents\n\n```yaml\n---\ndocument: this is doc 1\n---\ndocument: this is doc 2\n```\n\nYAML uses `---` to separate directives from document content.\n\n## YAML Collections\n\n### Sequence\n\n```yaml\n- Mark McGwire\n- Sammy Sosa\n- Ken Griffey\n```\n\n#### ↓ Equivalent JSON\n\n<!-- prettier-ignore -->\n```json {.wrap}\n[\n  \"Mark McGwire\",\n  \"Sammy Sosa\",\n  \"Ken Griffey\"\n]\n```\n\n### Mapping\n\n<!-- prettier-ignore -->\n```yaml\nhr:  65       # Home runs\navg: 0.278    # Batting average\nrbi: 147      # Runs Batted In\n```\n\n#### ↓ Equivalent JSON\n\n```json {.wrap}\n{\n  \"hr\": 65,\n  \"avg\": 0.278,\n  \"rbi\": 147\n}\n```\n\n### Mapping to Sequences\n\n```yaml\nattributes:\n  - a1\n  - a2\nmethods: [getter, setter]\n```\n\n#### ↓ Equivalent JSON\n\n```json {.wrap}\n{\n  \"attributes\": [\"a1\", \"a2\"],\n  \"methods\": [\"getter\", \"setter\"]\n}\n```\n\n### Sequence of Mappings\n\n<!-- prettier-ignore -->\n```yaml\nchildren:\n  - name: Jimmy Smith\n    age: 15\n  - name: Jimmy Smith\n    age: 15\n  -\n    name: Sammy Sosa\n    age: 12\n```\n\n#### ↓ Equivalent JSON\n\n<!-- prettier-ignore -->\n```json {.wrap}\n{\n  \"children\": [\n    {\"name\": \"Jimmy Smith\", \"age\": 15},\n    {\"name\": \"Jimmy Smith\", \"age\": 15},\n    {\"name\": \"Sammy Sosa\", \"age\": 12}\n  ]\n}\n```\n\n### Sequence of Sequences\n\n<!-- prettier-ignore -->\n```yaml\nmy_sequences:\n  - [1, 2, 3]\n  - [4, 5, 6]\n  -\n    - 7\n    - 8\n    - 9\n    - 0 \n```\n\n#### ↓ Equivalent JSON\n\n```json {.wrap}\n{\n  \"my_sequences\": [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9, 0]\n  ]\n}\n```\n\n### Mapping of Mappings\n\n```yaml\nMark McGwire: { hr: 65, avg: 0.278 }\nSammy Sosa: { hr: 63, avg: 0.288 }\n```\n\n#### ↓ Equivalent JSON\n\n```json {.wrap}\n{\n  \"Mark McGwire\": {\n    \"hr\": 65,\n    \"avg\": 0.278\n  },\n  \"Sammy Sosa\": {\n    \"hr\": 63,\n    \"avg\": 0.288\n  }\n}\n```\n\n### Nested Collections\n\n```yaml\nJack:\n  id: 1\n  name: Franc\n  salary: 25000\n  hobby:\n    - a\n    - b\n  location: { country: 'A', city: 'A-A' }\n```\n\n#### ↓ Equivalent JSON\n\n```json {.wrap}\n{\n  \"Jack\": {\n    \"id\": 1,\n    \"name\": \"Franc\",\n    \"salary\": 25000,\n    \"hobby\": [\"a\", \"b\"],\n    \"location\": {\n      \"country\": \"A\",\n      \"city\": \"A-A\"\n    }\n  }\n}\n```\n\n### Unordered Sets\n\n```yaml\nset1: !!set\n  ? one\n  ? two\nset2: !!set { 'one', 'two' }\n```\n\n#### ↓ Equivalent JSON\n\n```json {.wrap}\n{\n  \"set1\": { \"one\": null, \"two\": null },\n  \"set2\": { \"one\": null, \"two\": null }\n}\n```\n\nSets are represented as a Mapping where each key is associated with a null value\n\n### Ordered Mappings\n\n```yaml\nordered: !!omap\n  - Mark McGwire: 65\n  - Sammy Sosa: 63\n  - Ken Griffy: 58\n```\n\n#### ↓ Equivalent JSON\n\n<!-- prettier-ignore -->\n```json {.wrap}\n{\n  \"ordered\": [\n    { \"Mark McGwire\": 65 },\n    { \"Sammy Sosa\": 63 },\n    { \"Ken Griffy\": 58 }\n  ]\n}\n```\n\n## YAML Reference\n\n### Terms\n\n- Sequences aka arrays or lists\n- Scalars aka strings or numbers\n- Mappings aka hashes or dictionaries {.marker-round}\n\nBased on the YAML.org [refcard](https://yaml.org/refcard.html).\n\n### Document indicators\n\n|       |                     |\n| ----- | ------------------- |\n| `%`   | Directive indicator |\n| `---` | Document header     |\n| `...` | Document terminator |\n\n### Collection indicators {.row-span-2}\n\n|      |                                 |\n| ---- | ------------------------------- |\n| `?`  | Key indicator                   |\n| `:`  | Value indicator                 |\n| `-`  | Nested series entry indicator   |\n| `,`  | Separate in-line branch entries |\n| `[]` | Surround in-line series branch  |\n| `{}` | Surround in-line keyed branch   |\n\n### Alias indicators\n\n|     |                 |\n| --- | --------------- |\n| `&` | Anchor property |\n| `*` | Alias indicator |\n\n### Special keys\n\n|      |                                 |\n| ---- | ------------------------------- |\n| `=`  | Default \"value\" mapping key     |\n| `<<` | Merge keys from another mapping |\n\n### Scalar indicators\n\n|       |                                   |\n| ----- | --------------------------------- | --------------------------------------------- | ----------- |\n| `''`  | Surround in-line unescaped scalar |\n| `\"`   | Surround in-line escaped scalar   |\n| `     | `                                 | Block scalar indicator                        |\n| `>`   | Folded scalar indicator           |\n| `-`   | Strip chomp modifier (`           | -`or`>-`)                                     |\n| `+`   | Keep chomp modifier (`            | +`or`>+`)                                     |\n| `1-9` | Explicit indentation modifier (`  | 1`or`>2`). <br/> Modifiers can be combined (` | 2-`, `>+1`) |\n\n### Tag Property (usually unspecified) {.col-span-2}\n\n|          |                                                             |\n| -------- | ----------------------------------------------------------- |\n| `none`   | Unspecified tag (automatically resolved by application)     |\n| `!`      | Non-specific tag (by default, `!!map`/`!!seq`/`!!str`)      |\n| `!foo`   | Primary (by convention, means a local `!foo` tag)           |\n| `!!foo`  | Secondary (by convention, means `tag:yaml.org,2002:foo`)    |\n| `!h!foo` | Requires `%TAG !h! <prefix>` (and then means `<prefix>foo`) |\n| `!<foo>` | Verbatim tag (always means `foo`)                           |\n\n### Misc indicators\n\n|                  |                              |\n| ---------------- | ---------------------------- |\n| `#`              | Throwaway comment indicator  |\n| <code>\\`@</code> | Both reserved for future use |\n\n### Core types (default automatic tags) {.row-span-2}\n\n|         |                                          |\n| ------- | ---------------------------------------- |\n| `!!map` | `{Hash table, dictionary, mapping}`      |\n| `!!seq` | `{List, array, tuple, vector, sequence}` |\n| `!!str` | Unicode string                           |\n\n### Escape Codes {.row-span-3}\n\n#### Numeric\n\n- `\\x12` (8-bit)\n- `\\u1234` (16-bit)\n- `\\U00102030` (32-bit)\n\n{.cols-2 .marker-none}\n\n#### Protective\n\n- `\\\\` (\\\\)\n- `\\\"` (\")\n- `\\ ` ( )\n- `\\<TAB>` (TAB)\n\n{.cols-3 .marker-none}\n\n#### C\n\n- `\\0` (NUL)\n- `\\a` (BEL)\n- `\\b` (BS)\n- `\\f` (FF)\n- `\\n` (LF)\n- `\\r` (CR)\n- `\\t` (TAB)\n- `\\v` (VTAB)\n\n{.cols-3 .marker-none}\n\n#### Additional\n\n- `\\e` (ESC)\n- `\\_` (NBSP)\n- `\\N` (NEL)\n- `\\L` (LS)\n- `\\P` (PS)\n\n{.cols-3 .marker-none}\n\n### More types\n\n|          |                             |\n| -------- | --------------------------- |\n| `!!set`  | `{cherries, plums, apples}` |\n| `!!omap` | `[one: 1, two: 2]`          |\n\n### Language Independent Scalar Types {.col-span-2}\n\n|                           |                                            |\n| ------------------------- | ------------------------------------------ |\n| `{~, null}`               | Null (no value).                           |\n| `[1234, 0x4D2, 02333]`    | [Decimal int, Hexadecimal int, Octal int]  |\n| `[1_230.15, 12.3015e+02]` | [Fixed float, Exponential float]           |\n| `[.inf, -.Inf, .NAN]`     | [Infinity (float), Negative, Not a number] |\n| `{Y, true, Yes, ON}`      | Boolean true                               |\n| `{n, FALSE, No, off}`     | Boolean false                              |\n\n## Also see\n\n- [YAML Reference Card](https://yaml.org/refcard.html) _(yaml.org)_\n- [Learn X in Y minutes](https://learnxinyminutes.com/docs/yaml/) _(learnxinyminutes.com)_\n- [YAML lint online](http://www.yamllint.com/) _(yamllint.com)_\n"
}