{
  "id": "es6",
  "title": "ES6",
  "intro": "|\nA quick reference cheatsheet of whats new in JavaScript for ES2015, ES2016, ES2017, ES2018 and beyond",
  "tags": [
    "config",
    "format"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#edc545]",
  "content": "## Getting Started\n\n### Block-scoped {.row-span-2}\n\n#### Let\n\n```js{2,4}\nfunction fn () {\n  let x = 0\n  if (true) {\n    let x = 1 // only inside this `if`\n  }\n}\n```\n\n#### Const\n\n```js\nconst a = 1;\n```\n\n`let` is the new `var`. Constants (`const`) work just like `let`, but cannot be reassigned. See:\n[Let and const](https://babeljs.io/learn-es2015/#let--const)\n\n### Template Strings {.row-span-2}\n\n#### Interpolation\n\n```js\nconst message = `Hello ${name}`;\n```\n\n#### Multi-line string\n\n```js\nconst str = `\nhello\nthe world\n`;\n```\n\nTemplates and multiline strings. See: [template strings](https://babeljs.io/learn-es2015/#template-strings)\n\n### Binary and octal literals\n\n```js\nlet bin = 0b1010010;\nlet oct = 0o755;\n```\n\nSee: [Binary and Octal Literals](https://babeljs.io/learn-es2015/#binary-and-octal-literals)\n\n### Exponential Operator\n\n```js {1}\nconst byte = 2 ** 8;\n```\n\nSame as: Math.pow(2, 8)\n\n### New library additions\n\n#### New string methods\n\n```js\n'hello'.repeat(3);\n'hello'.includes('ll');\n'hello'.startsWith('he');\n'hello'.padStart(8); // \"hello\"\n'hello'.padEnd(8); // \"hello\"\n'hello'.padEnd(8, '!'); // hello!!!\n'\\u1E9B\\u0323'.normalize('NFC');\n```\n\n#### New Number Methods\n\n```js\nNumber.EPSILON;\nNumber.isInteger(Infinity); // false\nNumber.isNaN('NaN'); // false\n```\n\n#### New Math methods\n\n```js\nMath.acosh(3); // 1.762747174039086\nMath.hypot(3, 4); // 5\nMath.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2); // 2\n```\n\n#### New Array methods\n\n```js\n//return a real array\nArray.from(document.querySelectorAll('*'));\n//similar to new Array(...), but without the special single-argument behavior\nArray.of(1, 2, 3);\n```\n\nSee: [New library additions](https://babeljs.io/learn-es2015/#math--number--string--object-apis)\n\n### kind\n\n```js\nclass Circle extends Shape {\n```\n\n#### Constructor\n\n```js {1}\nconstructor (radius) {\n  this.radius = radius\n}\n```\n\n#### method\n\n```js {1}\ngetArea () {\n  return Math.PI *2 *this.radius\n}\n```\n\n#### Call the superclass method\n\n```js {2}\nexpand(n) {\n  return super.expand(n) *Math.PI\n}\n```\n\n#### Static methods\n\n```js {1}\nstatic createFromDiameter(diameter) {\n  return new Circle(diameter /2)\n}\n```\n\nSyntactic sugar for prototypes. See: [classes](https://babeljs.io/learn-es2015/#classes)\n\n### Private class\n\nThe javascript default field is public (`public`), if you need to indicate private, you can use (`#`)\n\n```js\nclass Dog {\n  #name;\n  constructor(name) {\n    this.#name = name;\n  }\n  printName() {\n    // Only private fields can be called inside the class\n    console.log(`Your name is ${this.#name}`);\n  }\n}\n\nconst dog = new Dog('putty');\n//console.log(this.#name)\n//Private identifiers are not allowed outside class bodies.\ndog.printName();\n```\n\n#### Static private class\n\n```js\nclass ClassWithPrivate {\n  static #privateStaticField;\n  static #privateStaticFieldWithInitializer = 42;\n\n  static #privateStaticMethod() {\n    // …\n  }\n}\n```\n\n## Promises\n\n### make the commitment\n\n```js {1}\nnew Promise((resolve, reject) => {\n  if (ok) {\n    resolve(result);\n  } else {\n    reject(error);\n  }\n});\n```\n\nfor asynchronous programming. See: [Promises](https://babeljs.io/learn-es2015/#promises)\n\n### Using Promises\n\n```js{2,3}\npromise\n  .then((result) => { ··· })\n  .catch((error) => { ··· })\n```\n\n### Using Promises in finally\n\n```js {4}\npromise\n  .then((result) => { ··· })\n  .catch((error) => { ··· })\n  .finally(() => {\n    /*logic independent of success/error */\n  })\n```\n\nThe handler is called when the promise is fulfilled or rejected\n\n### Promise function\n\n```js\nPromise.all(···)\nPromise.race(···)\nPromise.reject(···)\nPromise.resolve(···)\n```\n\n### Async-await\n\n```js{2,3}\nasync function run () {\n  const user = await getUser()\n  const tweets = await getTweets(user)\n  return [user, tweets]\n}\n```\n\n`async` functions are another way to use functions. See:\n[Async Function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n\n## Destructuring\n\n### Destructuring assignment\n\n#### Arrays\n\n```js {1}\nconst [first, last] = ['Nikola', 'Tesla'];\n```\n\n#### Objects\n\n```js {1}\nlet { title, author } = {\n  title: 'The Silkworm',\n  author: 'R. Galbraith'\n};\n```\n\nSupports matching arrays and objects. See: [Destructuring](https://babeljs.io/learn-es2015/#destructuring)\n\n### Defaults\n\n```js\nconst scores = [22, 33];\nconst [math = 50, sci = 50, arts = 50] = scores;\n```\n\n---\n\n```js\n//Result:\n//math === 22, sci === 33, arts === 50\n```\n\nA default value can be assigned when destructuring an array or object\n\n### Function parameters\n\n```js {1}\nfunction greet({ name, greeting }) {\n  console.log(`${greeting}, ${name}!`);\n}\n```\n\n---\n\n```js\ngreet({ name: 'Larry', greeting: 'Ahoy' });\n```\n\nDestructuring of objects and arrays can also be done in function parameters\n\n### Defaults\n\n```js {1}\nfunction greet({ name = 'Rauno' } = {}) {\n  console.log(`Hi ${name}!`);\n}\n```\n\n---\n\n```js\ngreet(); // Hi Rauno!\ngreet({ name: 'Larry' }); // Hi Larry!\n```\n\n### Reassign keys\n\n```js {1}\nfunction printCoordinates({ left: x, top: y }) {\n  console.log(`x: ${x}, y: ${y}`);\n}\n```\n\n---\n\n```js\nprintCoordinates({ left: 25, top: 90 });\n```\n\nThis example assigns `x` to the value of the `left` key\n\n### Loop\n\n```js {1}\nfor (let {title, artist} of songs) {\n  ···\n}\n```\n\nAssignment expressions also work in loops\n\n### Object Deconstruction\n\n```js {1}\nconst { id, ...detail } = song;\n```\n\nUse the `rest(...)` operator to extract some keys individually and the rest of the keys in the object\n\n## Spread Operator {.cols-2}\n\n### Object Extensions\n\n#### with object extensions\n\n```js {2}\nconst options = {\n  ...defaults,\n  visible: true\n};\n```\n\n#### No object extension\n\n```js\nconst options = Object.assign({}, defaults, { visible: true });\n```\n\nThe object spread operator allows you to build new objects from other objects. See:\n[Object Spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator)\n\n### Array Expansion\n\n#### with array extension\n\n```js{2,3}\nconst users = [\n  ...admins,\n  ...editors,\n  'rstacruz'\n]\n```\n\n#### No array expansion\n\n```js\nconst users = admins.concat(editors).concat(['rstacruz']);\n```\n\nThe spread operator allows you to build new arrays in the same way. See:\n[Spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator)\n\n## Functions\n\n### Function parameters {.row-span-3}\n\n#### Default parameters\n\n```js {1}\nfunction greet(name = 'Jerry') {\n  return `Hello ${name}`;\n}\n```\n\n#### Rest parameters\n\n```js {1}\nfunction fn(x, ...y) {\n  // y is an array\n  return x * y.length;\n}\n```\n\n#### Extensions\n\n```js {1}\nfn(...[1, 2, 3]);\n//same as fn(1, 2, 3)\n```\n\nDefault (default), rest, spread (extension). See:\n[function parameters](https://babeljs.io/learn-es2015/#default--rest--spread)\n\n### Arrow function {.row-span-3}\n\n#### Arrow functions\n\n```js {1}\nsetTimeout(() => {\n  ···\n})\n```\n\n#### with parameters\n\n```js {1}\nreadFile('text.txt', (err, data) => {\n  ...\n})\n```\n\n#### implicit return\n\n```js{1,4,5,6}\narr.map(n => n*2)\n//no curly braces = implicit return\n//Same as: arr.map(function (n) { return n*2 })\narr.map(n => ({\n  result: n*2\n}))\n//Implicitly returning an object requires parentheses around the object\n```\n\nLike a function, but preserves `this`. See: [Arrow functions](https://babeljs.io/learn-es2015/#arrows-and-lexical-this)\n\n### Parameter setting default value\n\n```js\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello'); // Hello World\nlog('Hello', 'China'); // Hello China\nlog('Hello', ''); // Hello\n```\n\n### Used in conjunction with destructuring assignment defaults\n\n```js\nfunction foo({ x, y = 5 } = {}) {\n  console.log(x, y);\n}\n\nfoo(); // undefined 5\n```\n\n### name attribute\n\n```js\nfunction foo() {}\nfoo.name; // \"foo\"\n```\n\n### length property\n\n```js\nfunction foo(a, b) {}\nfoo.length; // 2\n```\n\n## Objects\n\n### Shorthand Syntax\n\n```js\nmodule.exports = { hello, bye };\n```\n\nsame below:\n\n```js\nmodule.exports = {\n  hello: hello,\n  bye: bye\n};\n```\n\nSee: [Object Literals Enhanced](https://babeljs.io/learn-es2015/#enhanced-object-literals)\n\n### method\n\n```js {2}\nconst App = {\n  start() {\n    console.log('running');\n  }\n};\n//Same as: App = { start: function () {···} }\n```\n\nSee: [Object Literals Enhanced](https://babeljs.io/learn-es2015/#enhanced-object-literals)\n\n### Getters and setters\n\n```js{2,5}\nconst App = {\n  get closed () {\n    return this.status === 'closed'\n  },\n  set closed (value) {\n    this.status = value ? 'closed' : 'open'\n  }\n}\n```\n\nSee: [Object Literals Enhanced](https://babeljs.io/learn-es2015/#enhanced-object-literals)\n\n### Computed property name\n\n```js {3}\nlet event = 'click';\nlet handlers = {\n  [`on${event}`]: true\n};\n//Same as: handlers = { 'onclick': true }\n```\n\nSee: [Object Literals Enhanced](https://babeljs.io/learn-es2015/#enhanced-object-literals)\n\n### Extract value\n\n```js{3,5}\nconst fatherJS = { age: 57, name: \"Zhang San\" }\nObject.values(fatherJS)\n//[57, \"Zhang San\"]\nObject.entries(fatherJS)\n//[[\"age\", 57], [\"name\", \"Zhang San\"]]\n```\n\n## Modules module\n\n### Imports import\n\n```js\nimport 'helpers';\n//aka: require('···')\n```\n\n---\n\n```js\nimport Express from 'express';\n//aka: const Express = require('···').default || require('···')\n```\n\n---\n\n```js\nimport { indent } from 'helpers';\n//aka: const indent = require('···').indent\n```\n\n---\n\n```js\nimport * as Helpers from 'helpers';\n//aka: const Helpers = require('···')\n```\n\n---\n\n```js\nimport { indentSpaces as indent } from 'helpers';\n//aka: const indent = require('···').indentSpaces\n```\n\n`import` is the new `require()`. See: [Module imports](https://babeljs.io/learn-es2015/#modules)\n\n### Exports export\n\n```js\nexport default function () { ··· }\n//aka: module.exports.default = ···\n```\n\n---\n\n```js\nexport function mymethod () { ··· }\n//aka: module.exports.mymethod = ···\n```\n\n---\n\n```js\nexport const pi = 3.14159;\n//aka: module.exports.pi = ···\n```\n\n---\n\n```js\nconst firstName = 'Michael';\nconst lastName = 'Jackson';\nconst year = 1958;\nexport { firstName, lastName, year };\n```\n\n---\n\n```js\nexport * from 'lib/math';\n```\n\n`export` is the new `module.exports`. See: [Module exports](https://babeljs.io/learn-es2015/#modules)\n\n### `as` keyword renaming\n\n```js{2,8,12-14}\nimport {\n  lastName as surname // import rename\n} from './profile.js';\n\nfunction v1() { ... }\nfunction v2() { ... }\n\nexport { v1 as default };\n//Equivalent to export default v1;\n\nexport {\n  v1 as streamV1, // export rename\n  v2 as streamV2, // export rename\n  v2 as streamLatestVersion // export rename\n};\n```\n\n### Dynamically load modules\n\n```js\nbutton.addEventListener('click', (event) => {\n  import('./dialogBox.js')\n    .then((dialogBox) => {\n      dialogBox.open();\n    })\n    .catch((error) => {\n      /*Error handling */\n    });\n});\n```\n\n[ES2020 Proposal](https://github.com/tc39/proposal-dynamic-import) introduce `import()` function\n\n### import() allows module paths to be dynamically generated\n\n```js\nconst main = document.querySelector('main');\n\nimport(`./modules/${someVariable}.js`)\n  .then((module) => {\n    module.loadPageInto(main);\n  })\n  .catch((err) => {\n    main.textContent = err.message;\n  });\n```\n\n### import.meta\n\n[ES2020](https://github.com/tc39/proposal-import-meta) Added a meta property `import.meta` to the `import` command,\nwhich returns the meta information of the current module\n\n```js\nnew URL('data.txt', import.meta.url);\n```\n\nIn the Node.js environment, `import.meta.url` always returns a local path, that is, a string of the `file:URL` protocol,\nsuch as `file:/// home/user/foo.js`\n\n### Import Assertions {.col-span-2}\n\n#### static import\n\n```js\nimport json from './package.json' assert { type: 'json' };\n//Import all objects in the json file\n```\n\n#### Dynamic Import\n\n```js\nconst json = await import('./package.json', { assert: { type: 'json' } });\n```\n\n## Generators\n\n### Generator function\n\n```js\nfunction* idMaker() {\n  let id = 0;\n  while (true) {\n    yield id++;\n  }\n}\n```\n\n---\n\n```js\nlet gen = idMaker();\ngen.next().value; // → 0\ngen.next().value; // → 1\ngen.next().value; // → 2\n```\n\nit's complicated. See: [Generators](https://babeljs.io/learn-es2015/#generators)\n\n### For..of + iterator {.row-span-2}\n\n```js\nlet fibonacci = {\n  [Symbol.iterator]() {\n    let pre = 0,\n      cur = 1;\n    return {\n      next() {\n        [pre, cur] = [cur, pre + cur];\n        return { done: false, value: cur };\n      }\n    };\n  }\n};\n\nfor (var n of fibonacci) {\n  // truncate sequence at 1000\n  if (n > 1000) break;\n  console.log(n);\n}\n```\n\nFor iterating over generators and arrays. See: [For..of iteration](https://babeljs.io/learn-es2015/#iterators--forof)\n\n### Relationship with Iterator interface\n\n```js\nvar gen = {};\ngen[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...gen]; // => [1, 2, 3]\n```\n\nThe `Generator` function is assigned to the `Symbol.iterator` property, so that the `gen` object has the `Iterator`\ninterface, which can be traversed by the `...` operator\n\n### Symbol.iterator property\n\n```js\nfunction* gen() {\n  /*some code */\n}\nvar g = gen();\n\ng[Symbol.iterator]() === g; // true\n```\n\n`gen` is a `Generator` function, calling it will generate a traverser object `g`. Its `Symbol.iterator` property, which\nis also an iterator object generation function, returns itself after execution\n\n## see also\n\n- [Learn ES2015](https://babeljs.io/docs/en/learn/)_(babeljs.io)_\n- [ECMAScript 6 Features Overview](https://github.com/lukehoban/es6features#readme) _(github.com)_\n"
}