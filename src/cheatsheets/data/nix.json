{
  "id": "nix",
  "title": "Nix",
  "intro": "|\nThe Nix quick reference cheat sheet that aims at providing help on writing basic nix code.",
  "tags": [],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#304673]",
  "content": "## Types & Syntax\n\n### String\n\n```nix\nlet\n  x = \"single-line string\";\n  y = ''\n    multi-line string\n  '';\nin\n```\n\n### Integer\n\n```nix\nlet\n  x = -123;\n  y - 123;\nin\n```\n\n### Float\n\n```nix\nlet\n  x = -0.32;\n  y = 0.45;\nin\n```\n\n### Boolean\n\n```nix\nlet\n  x = true;\n  y = false;\nin\n```\n\n### Null\n\n```nix\nlet\n  x = null;\nin\n```\n\n### Path\n\n```nix\nlet\n  x = /absolute/path;\n  y = ./relative/path;\nin\n```\n\n### Attribute Set\n\n```nix\nlet\n  x = {\n    a = 1;\n    b = 2;\n  };\n  y = { c = 3; };\nin\n```\n\nsee [Attribute Sets](#attribute-sets)\n\n### List\n\n```nix\nlet\n  x = [ 1 2.0 ];\n  y = [\n    1\n    \"this is a string\"\n    23.0\n    null\n  ];\nin\n```\n\n### Comment\n\n#### ↓ single-line comment\n\n```nix\n# your comment\n```\n\n#### ↓ multi-line comment\n\n```nix\n/*\n  your comment\n*/\n```\n\n## Scoping\n\n### Define Local Variable\n\n```nix\nlet\n  x = 1;\n  y = 2;\nin\n  x + y # -> returns 3\n```\n\n### Add Variables Into Scope\n\n```nix\nlet\n  x = 1;\nin\n  { inherit x; }\n```\n\n#### ↓ desugars to\n\n```nix\nlet\n  x = 1;\nin\n  { x = x; }\n```\n\n### Add Attributes Into Scope\n\n```nix\nlet\n  x = { y = 1; };\nin\n  { inherit (x) y; }\n```\n\n#### ↓ desugars to\n\n```nix\nlet\n  x = { y = 1; };\nin\n  { y = x.y; }\n```\n\n### Add All Attributes Into Scope\n\n```nix\nlet\n  x = { y = 1; z = 2;  };\nin\n  with x;\n  y + z # -> returns 3\n```\n\n## Conditionals\n\n### Define Conditionals\n\n```nix\nif x > 0\nthen 1\nelse -1\n```\n\n## Attribute Sets\n\n### Define Attribute Sets\n\n```nix\nlet\n  x = {\n    a = 1;\n    b = 2;\n  };\n  y = { c = 3; };\nin\n```\n\n### Update Attribute Sets\n\n```nix\n{ x = 1; } // { y = 2; } # -> returns { x = 1; y = 2; }\n{ x = 1; } // { x = 2; } # -> returns { x = 2; }\n```\n\n### Check For Attribute\n\n```nix\nlet\n  x = { y = 1; };\nin\n  x ? y # -> returns true\n```\n\n### Reference Attirbute Keys\n\n```nix\nlet\n  x = { y = 1; };\nin\n  x.y # -> returns 1\n```\n\n#### ↓ optional\n\n```nix\nlet\n  x = { y = 1; };\nin\n  x.z or 2 # -> returns 2\n```\n\n## Concatenation & Interpolation\n\n### Concatenate Lists\n\n```nix\n[ 1 2 ] ++ [ 3 4 ] # -> returns [ 1 2 3 4 ]\n```\n\n### Concatenate Paths & Strings\n\n```nix\n/bin + /sh # -> returns /bin/sh\n/bin + \"/sh\" # -> returns /bin/sh\n\"/bin\" + \"/sh\" # -> returns \"/bin/sh\"\n```\n\n### Interpolate Strings\n\n```nix\nlet\n  x = \"bar\";\nin\n  \"foo ${x} baz\" # -> returns \"foo bar baz\"\n```\n\n## Functions\n\n### Simple Function\n\n```nix\nlet\n  f = x: x + 1;\nin\n  f 1 # -> returns 2\n```\n\n### Multiple Arguments\n\n```nix\nlet\n  f = x: y: [ x  y ];\nin\n  f 1 2 # -> returns [ 1 2 ]\n```\n\n### Named Arguments\n\n```nix\nlet\n  f = {x, y}: x + y;\nin\n  f { x=1; y=2; } # -> returns 3\n```\n\n#### ↓ ignoring arguments\n\n```nix\nlet\n  f = {x, y, ... }: x + y;\nin\n  f { x=1; y=2; z=3; } # -> returns 3\n```\n\n#### ↓ default values\n\n```nix\nlet\n  f = {x, y ? 2 }: x + y;\nin\n  f { x=1; } # -> returns 3\n```\n\n#### ↓ bind to variable\n\n```nix\nlet\n  f = {x, y}@args: args.x + args.y;\nin\n  f { x=1; y=2; } # -> returns 3\n```\n\n## Sources\n\n- [NixOS/marketing](https://github.com/nixos/marketing) _(github.com)_\n"
}