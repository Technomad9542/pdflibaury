{
  "id": "ini",
  "title": "INI",
  "intro": "|\nThis is a quick reference cheat sheet for understanding and writing INI-format configuration files.",
  "tags": [],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#6d94c7]",
  "content": "## Getting Started\n\n### Introduction\n\n- INI is a configuration file with a fixed standard format\n- Base elements are keys or properties\n- Each key consists of a **name** and a **value**, separated by an equal sign (`=`)\n- **key name** is displayed to the **left side** of the equals sign\n- Equal sign (`=`) and semicolon (`;`) are **reserved** characters\n- INI configuration method comes from the MS-DOS operating system\n\nNow an informal standard for many configurations, other operating systems may use `.conf` or `.cfg` as a suffix\n\n### Example\n\n```ini\n; Here are the comments\n[owner]\nname=John Doe\norganization=Acme Products\n\n[database]\n; Here are the comments\nserver=192.0.2.42\nport=143\nfile=\"acme payroll.dat\"\n\n[section.subsection]\nfoo = bar\n```\n\n### Comments\n\nComment (`;`)\n\n```ini\n; This is the comment text and will be ignored\n```\n\nComment (`#`)\n\n```ini\n# Here is the comment text, ‚ö†Ô∏è Some compilers support it\n```\n\nComments after a line (`;`,`#`) _(not standard)_\n\n```ini\nvar = a ; this is an inline comment\nfoo = bar # this is another inline comment\n```\n\nComments must appear alone on lines in some cases\n\n### Sections\n\n- The name appears on a line by itself\n- Names are enclosed in square brackets `[` and `]`\n- No explicit `section end` delimiter\n- End at the next `section` declaration or at the end of the file\n- Section and attribute names are case insensitive\n<!--rehype:className=style-round-->\n\n```ini\n[section]\nkey1 = a\nkey2 = b\n```\n\nThe same as `JSON` below üëá\n\n```json\n{\n  \"section\": {\n    \"key1\": \"a\",\n    \"key2\": \"b\"\n  }\n}\n```\n\n### Nesting (supported by some parsers)\n\n```ini\n[section]\ndomain = cheatsheets.zip\n[section.subsection]\nfoo = bar\n```\n\nThe same as `JSON` below üëá\n\n```json\n{\n  \"section\": {\n    \"domain\": \"cheatsheets.zip\"\n    \"subsection\": {\n      \"foo\": \"bar\"\n    }\n  }\n}\n```\n\nNest to previous section (shorthand)\n\n```ini\n[section]\ndomain = cheatsheets.zip\n[.subsection]\nfoo = bar\n```\n\n### Escape character\n\n| sequence | meaning                                                                                          |\n| :------- | :----------------------------------------------------------------------------------------------- |\n| `\\\\`     | \\ (single backslash, escape escape character)                                                    |\n| `\\'`     | apostrophe                                                                                       |\n| `\\\"`     | double quotes                                                                                    |\n| `\\0`     | null character                                                                                   |\n| `\\a`     | ringtone/alert/sound                                                                             |\n| `\\b`     | Backspace, [Bell character] for some applications (https://en.wikipedia.org/wiki/Bell_character) |\n| `\\t`     | tab character                                                                                    |\n| `\\r`     | carriage return                                                                                  |\n| `\\n`     | newline                                                                                          |\n| `\\;`     | semicolon                                                                                        |\n| `\\#`     | number sign                                                                                      |\n| `\\=`     | equal sign                                                                                       |\n| `\\:`     | colon                                                                                            |\n| `\\x????` | Unicode character for the hexadecimal code point corresponding to ????                           |\n\n### Array\n\n```ini\n[section]\ndomain = cheatsheets.zip\narray[]=first value\narray[]=second value\n```\n\nThe same as `JSON` below üëá\n\n```json\n{\n  \"section\": {\n    \"domain\": \"cheatsheets.zip\",\n    \"array\": [\"first value\", \"second value\"]\n  }\n}\n```\n\n### Interpreter\n\n- [@go-ini/ini](https://github.com/go-ini/ini) _(golang)_\n- [@npm/ini](https://www.npmjs.com/package/ini) _(nodejs)_\n- [@zonyitoo/rust-ini](https://github.com/zonyitoo/rust-inii) _(rust)_\n- [@rxi/ini](https://www.npmjs.com/package/ini) _(c)_\n- [@pulzed/mINI](https://github.com/pulzed/mINI) _(c++)_\n- [@rickyah/ini-parser](https://github.com/rickyah/ini-parser) _(c#)_\n- [@Enichan/Ini](https://github.com/Enichan/Ini) _(c#)_\n\n## See also\n\n- [INI file configuration](https://en.wikipedia.org/wiki/INI_file)_(wikipedia.org)_\n"
}