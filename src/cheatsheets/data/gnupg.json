{
  "id": "gnupg",
  "title": "GnuPG",
  "intro": "A cheatsheet for GnuPG, the encryption and signing software.",
  "tags": [],
  "categories": [
    "Linux Command"
  ],
  "background": "bg-gray-500",
  "content": "## Getting Started\n\n### Software\n\nGpg4win and the GPG Suite have OS-specific features.\n\n- [GnuPG](https://gnupg.org/)\n- [Gpg4win](https://www.gpg4win.org/) (Windows)\n- [GPG Suite](https://gpgtools.org/) (macOS)\n\nSometimes GPG keys are referred as PGP keys. They're interchangeable, as they follow the\n[OpenPGP Standard](https://www.rfc-editor.org/rfc/rfc9580.html).\n\n### Create a key-pair\n\nGenerate your keys:\n\n```shell script\n$ gpg --generate-key\n```\n\n... or fully configure your keys.\n\n```shell script\n$ gpg --generate-full-keys\n```\n\n**Note:** Choose a strong passphrase! The encryption is only as strong as your passphrase.\n\n### Key management\n\nList your keys:\n\n```shell script\n$ gpg --list-keys\n```\n\nList your secret keys:\n\n```shell script\n$ gpg --list-secret-keys\n```\n\nExport your public key:\n\n```shell script\n$ gpg --export --armor <ID>\n```\n\nExport your secret key:\n\n```shell script\n$ gpg --export-secret-key --armor <ID>\n```\n\nDelete your public key:\n\n```shell script\n$ gpg --delete-key <ID>\n```\n\nDelete your secret key:\n\n```shell script\n$ gpg --delete-secret-key <ID>\n```\n\n## Encryption\n\n### Symmetric\n\nEncrypt with a passphrase:\n\n```shell script\n$ gpg -c <FILE>\n```\n\nEncrypt as ASCII with `-a` flag:\n\n```shell script\n$ gpg -ac <FILE>\n```\n\nSet output file path with `-o` flag:\n\n```shell script\n$ gpg -c <FILE> -o <PATH>\n```\n\nDecrypt with a passphrase:\n\n```shell script\n$ gpg <FILE>\n```\n\n**Note:** Choose a strong passphrase! The encryption is only as strong as your passphrase.\n\n### Asymmetric\n\nEncrypt using public-private key encryption:\n\n```shell script\n$ gpg -e -r <RECIPIENT> <FILE>\n```\n\nEncrypt as ASCII output with `-a` flag:\n\n```shell script\n$ gpg -ea -r <RECIPIENT> <FILE>\n```\n\nEncrypt and sign with `-s` flag:\n\n```shell script\n$ gpg -se -r <RECIPIENT> <FILE>\n```\n\nAdd multiple recipients:\n\n```shell script\n$ gpg -e -r <RECIPIENT1> -r <RECIPIENT2> <FILE>\n```\n\nSet output file path with `-o` flag:\n\n```shell script\n$ gpg -e -o <PATH> -r <RECIPIENT> <FILE>\n```\n\nDecrypt with your private key:\n\n```shell script\n$ gpg <FILE>\n```\n\nReplace `<RECIPIENT>` with your intended recipient's [imported public key](#importing-a-public-key) ID.\n\n### Importing a public key\n\nImport using a file:\n\n```shell script\n$ gpg --import <FILE>\n```\n\nImport using a link (macOS/Linux):\n\n```shell script\n$ curl <WEBSITE> | gpg --import\n```\n\nDon't forget to sign the imported key:\n\n```shell script\n$ gpg --sign-key <ID>\n```\n\n## Commit Signing\n\n### Local Git Setup\n\nEnable GPG signing:\n\n```shell script\n$ git config --global commit.gpgsign true\n```\n\nSet the signing key:\n\n```shell script\n$ git config --global user.signingkey <ID>\n```\n\nSet location of GPG:\n\n```shell script\n$ git config --global gpg.program <PROGRAM>\n```\n\n**Note:** Your name and email must match on Git and GnuPG.\n\n### GPG Program List\n\nReplace `<PROGRAM>` with one of the following:\n\n| Platform    | Value                                      |\n| ----------- | ------------------------------------------ |\n| Windows     | `C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe` |\n| macOS/Linux | /usr/local/bin/gpg                         |\n\n{.left-text}\n\n### Exporting your public key\n\nExport as ASCII:\n\n```shell script\n$ gpg --export --armor <ID>\n```\n\n**Note:** Platforms, like GitHub, may ask you to verify the email you set in Git and GnuPG.\n\n## Windows: Add to Startup Apps {.cols-1}\n\n### PowerShell Commands\n\nWhen you do a full restart, the GPG agent might not automatically start. Add the GnuPG's IPC tool to Startup Apps using\nPowerShell:\n\n```shell script\n$ $shell = New-Object -ComObject WScript.Shell\n$ $shortcut = $shell.CreateShortcut(\"C:\\Users\\$($Env:UserName)\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\gpg-connect-agent.lnk\")\n$ $shortcut.TargetPath = \"C:\\Program Files (x86)\\GnuPG\\bin\\gpg-connect-agent.exe\"\n$ $shortcut.Arguments = \"/bye\"\n$ $shortcut.Save()\n```\n\nStart up manually instead:\n\n```shell script\n$ gpgconf --launch gpg-agent\n```\n\nCheck if it was successfully added [here](ms-settings:startupapps).\n"
}