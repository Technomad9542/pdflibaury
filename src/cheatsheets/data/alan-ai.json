{
  "id": "alan-ai",
  "title": "Alan AI",
  "intro": "This cheat sheet covers all major script concepts, client API methods, handlers and other tools to create a multimodal\nconversational experience with Alan AI",
  "tags": [
    "AI",
    "AlanAI",
    "Prompts",
    "Tips"
  ],
  "categories": [
    "Toolkit"
  ],
  "background": "bg-[#4aa181]",
  "content": "### Legend\n\n- `pattern` — phrase to invoke a voice/text command or a response to be played\n- `value` — specified value\n- `params` — passed parameters\n- `action` — action to be performed\n- `output` — data outcome\n- `[...]` — optional data or parameters\n\n## Dialog script\n\n### Intents & patterns\n\nDefine a voice/text command to play a response\n\n```{.wrap}\nintent('pattern'[, 'patternN'], reply('pattern'))\n```\n\nDefine a voice/text command to play a response or perform an action\n\n```{.wrap}\nintent('pattern'[, 'patternN'], p => { action })\n```\n\nDefine alternatives\n\n```{.wrap}\nintent('phrase1|phrase2')\n```\n\nDefine optional words and phrases\n\n```{.wrap}\nintent('pattern (optional phrase|)')\n```\n\n### Response functions\n\nPlay a response (in case of multiple patterns, a response is picked at random)\n\n```{.wrap}\nreply('pattern'[, 'patternN'])\n```\n\nPlay a response\n\n```{.wrap}\np.play('pattern')\n```\n\nDefine voice settings for the assistant reply: `accent (en, fr, de, it, ru, es)`, `gender (male/female)`, `voice type`,\n`speaking pitch`, `speaking rate`\n\n```{.wrap}\np.play([voice(code, gender, type, pitch, rate), ]'pattern')\n```\n\nDefine play options: `force:true` (execute if the button is inactive), `activate:true` (activate the button before),\n`deactivate:true` (deactivate the button after)\n\n```{.wrap}\np.play('pattern'[, opts(options)])\n```\n\nSend a command to the app\n\n```{.wrap}\np.play({command:data})\n```\n\n### User-defined slots\n\nDefine a static list of values expected in the input\n\n```{.wrap}\n$(SLOTNAME value1|value2) => p.SLOTNAME.value\n```\n\nProvide labels to classify or identify the slot values\n\n```{.wrap}\n$(SLOTNAME value1~label1|value2~label2) => p.SLOTNAME.label\n```\n\nEnable fuzzy matching to capture similar variants\n\n```{.wrap}\n$(SLOTNAME~ value1|value2) => p.SLOTNAME.value\n```\n\nMake a slot optional\n\n```{.wrap}\n$(SLOTNAME value1|value2|)\n```\n\nCapture several slot values\n\n```{.wrap}\nintent('$(SLOTNAME value1|value2) and $(SLOTNAME value1|value2 )') => p.SLOTNAME_ (array), p.SLOTNAME_[0].value, p.SLOTNAME_[1].value\n```\n\n### Predefined slots\n\nCapture date values\n\n```{.wrap}\n$(DATE) => p.DATE.value, p.DATE.moment, p.DATE.luxon\n```\n\nCapture time values\n\n```{.wrap}\n$(TIME) => p.TIME.value, p.TIME.moment\n```\n\nCapture cardinal numbers\n\n```{.wrap}\n$(NUMBER) => p.NUMBER.value, p.NUMBER.number\n```\n\nCapture ordinal numbers\n\n```{.wrap}\n$(ORDINAL) => p.ORDINAL.value, p.ORDINAL.number\n```\n\nCapture locations\n\n```{.wrap}\n$(LOC) => p.LOC.value\n```\n\nCapture names\n\n```{.wrap}\n$(NAME) => p.NAME.value\n```\n\n### Dynamic slots\n\nDefine a dynamic slot at the project level\n\n```{.wrap}\nproject.name = {en: \"value1|value2|value3\"}\n$(SLOTNAME p:name) => p.SLOTNAME.value\n```\n\nDefine a dynamic slot at the dialog session level\n\n```{.wrap}\np.userData.name = {en: \"value1|value2|value3\"}\n$(SLOTNAME u:name) => p.SLOTNAME.value\n```\n\nGet data for a dynamic slot with the visual state\n\n```{.wrap}\nlet name = [\"value1|value2|value3\"]\np.visual.data = {en: name};\n$(SLOTNAME v:name) => p.SLOTNAME.value\n```\n\nDefine a dynamic slot in a short form\n\n```{.wrap}\nproject.name = {en: \"value1|value2|value3\"}\n$(p:name) => p.SLOTNAME.value\n```\n\nDefine labels for dynamic slots: see [User-defined slots](#user-defined-slots).\n\nEnable fuzzy matching for dynamic slots: see [User-defined slots](#user-defined-slots).\n\nMake a dynamic slot optional: see [User-defined slots](#user-defined-slots).\n\nCapture several slot values: see [User-defined slots](#user-defined-slots).\n\n### RegEx slots\n\nCapture digit and/or letter combination\n\n```{.wrap}\nconst reg = \"([A-Za-z]{1}\\\\s?){6}\"\n$(SLOTNAME* ${reg}) => p.SLOTNAME.value\n```\n\nCapture any user’s input\n\n```{.wrap}\n$(SLOTNAME* .+) => p.SLOTNAME.value\n```\n\n### Contexts\n\nDefine a context\n\n```{.wrap}\nlet contextName = context(() => { action })\n```\n\nActivate a context\n\n```{.wrap}\nintent('pattern', p => {..., p.then(contextName)}\n```\n\nPass data to the context\n\n```{.wrap}\np.then(contextName, state: {data:yourData}) => p.state.data\n```\n\nResolve a context\n\n```{.wrap}\np.resolve([data:yourData])\n```\n\nReset a context\n\n```{.wrap}\np.resetContext()\n```\n\nDefine intents to be matched at any time without switching the current context\n\n```{.wrap}\nintent(noctx, 'pattern', ...) or noContext(() => {intent(...)})\n```\n\nPlay a prompt for an expected input\n\n```{.wrap}\nfallback('pattern1'[, 'patternN'])\n```\n\nTitle a context\n\n```{.wrap}\ntitle('contextName')\n```\n\n### Predefined objects\n\nStore static device- and user-specific data passed from the client app\n\n```{.wrap}\nauthData.data => p.authData.data\n```\n\nStore state data to be available globally at the project scope\n\n```{.wrap}\nproject.info = {data:yourData} => project.info.data\n```\n\nStore the intent match score\n\n```{.wrap}\np.score\n```\n\nStore data to be passed between contexts\n\n```{.wrap}\np.state.data\n```\n\nStore visual context data to be passed from the client app with `setVisualState()`\n\n```{.wrap}\np.visual.data\n```\n\nStore user-specific state data to be accessible during the dialog session\n\n```{.wrap}\np.userData.data\n```\n\n### Predefined callbacks\n\nDefine actions to be performed when the script is saved and dialog model is built\n\n```{.wrap}\nonCreateProject(() => { action })\n```\n\nDefine actions to be performed when the dialog session starts\n\n```{.wrap}\nonCreateUser((p) => { action })\n```\n\nDefine actions to be performed when the dialog session ends\n\n```{.wrap}\nonCleanupUser((p) => { action })\n```\n\nDefine actions to be performed when the visual state is set\n\n```{.wrap}\nonVisualState((p, s) => { action })\n```\n\nDefine actions to be performed when a user event is triggered in the client app: `buttonReady`, `buttonClicked`,\n`micPermissionPrompt`, `micAllowed`, `firstActivate`, `showPopup`, `popupCloseClicked`, `recognized`\n\n```{.wrap}\nonUserEvent((p, e) => { action })\n```\n\nDefine actions to be performed when a context is activated\n\n```{.wrap}\nonEnter((p) => { action })\n```\n\n### Q&A service\n\nDefine a URL of a resource to be indexed\n\n```{.wrap}\ncorpus({url: url, depth: depthLevel})\n```\n\nDefine text corpus to be used by the assistant in the dialog\n\n```{.wrap}\ncorpus('text')\n```\n\n### Built-in JS libraries\n\nMake API calls\n\n```{.wrap}\naxios, request\n```\n\nWork with time\n\n```{.wrap}\nmoment-timezone, luxon\n```\n\nWork with arrays, numbers, objects, strings and so on\n\n```{.wrap}\nlodash\n```\n\n### Other\n\nProvide a list of hints to help recognize specific terms\n\n```{.wrap}\nrecognitionHints('hint'[, 'hintN'])\n```\n\nWrite info messages to Alan Studio logs\n\n```{.wrap}\nconsole.log(data)\n```\n\nWrite error messages to Alan Studio logs\n\n```{.wrap}\nconsole.error(data)\n```\n\n## Client SDK\n\n### Client API methods\n\nSend information about the visual state from the client app to the dialog script\n\n```{.wrap}\nsetVisualState(visualStateData:object)\n```\n\nSend data or perform actions without a voice/text command\n\n```{.wrap}\nprojectAPI.method = function(p, param, callback) {\n  p.userData.data = param.data;\n  callback();\n};\n\ncallProjectApi(method:string, data:object, callback:function)\n```\n\nPlay a text message in the client app\n\n```{.wrap}\nplayText(text:string)\n```\n\nSend a text message to Alan as the user’s input\n\n```{.wrap}\nsendText(text:string)\n```\n\nExecute a command in the client app\n\n```{.wrap}\nplayCommand(command:object)\n```\n\n### Client API methods (continued)\n\nActivate the Alan button programmatically\n\n```{.wrap}\nactivate()\n```\n\nDeactivate the Alan button programmatically\n\n```{.wrap}\ndeactivate()\n```\n\nCheck the Alan button state\n\n```{.wrap}\nisActive()\n```\n\nRemove the Alan button from the parent element, page (supported on Web, Ionic)\n\n```{.wrap}\nremove()\n```\n\nCheck the state of the wake word (supported on iOS, Android)\n\n```{.wrap}\ngetWakewordEnabled()\n```\n\nSet the state of the wake word (supported on iOS, Android)\n\n```{.wrap}\nsetWakewordEnabled(enabled:boolean)\n```\n\n### Handlers\n\n// Examples are provided for the Web platform\n\nHandle commands sent from the dialog script to the client app\n\n```{.wrap}\nonCommand: function (commandData) { action }\n```\n\nHandle Alan button state changes\n\n```{.wrap}\nonButtonState: function (e) { action }\n```\n\nHandle connection status to the virtual assistant project in the Alan Cloud\n\n```{.wrap}\nonConnectionStatus: function (e) { action }\n```\n\nHandle events received from Alan\n\n```{.wrap}\nonEvent: function (e) { action }\n```\n\n## Also see\n\n- [Alan AI website](https://alan.app)\n- [About the Alan Platform](https://alan.app/platform)\n- [Alan AI documentation](https://alan.app/docs)\n"
}