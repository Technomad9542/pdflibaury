{
  "id": "svelte",
  "title": "Svelte",
  "intro": "|\nA Svelte cheat sheet with the most important concepts, functions, reactivity, and more. A complete quick reference for beginners, updated for Svelte 5.",
  "tags": [
    "svelte",
    "web"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#FF3E00]",
  "content": "## Getting Started\n\n### Basic Syntax\n\n```js\n<script>\n  let name = 'world';\n</script>\n\n<h1>Hello {name}!</h1>\n```\n\n### Expressions\n\n```js\n<script>\n  let firstName = \"Zehan\";\n  let lastName = \"Khan\";\n\n  function fullName() {\n    return `${firstName} ${lastName}`;\n  }\n</script>\n\n<h1>Hello {fullName()}!</h1>\n```\n\n### Attributes\n\n```js\n<script>\n  let avatarUrl = 'https://example.com/avatar.png';\n</script>\n\n<img src={avatarUrl} alt=\"Avatar\" />\n<button class=\"btn\">Click me</button>\n```\n\n### Functions in Markup\n\n```js\n<script>\n  function name() {\n    return \"Zehan\";\n  }\n</script>\n\n<h1>Hi {name()}!</h1>\n```\n\n### Conditional Rendering {.col-span-2}\n\n```js\n<script>\n  let temperature = 24;\n  let city = \"New York\";\n</script>\n\n{#if temperature >= 20}\n  <p>It is {temperature}°C (Warm) in {city}</p>\n{:else}\n  <p>It is {temperature}°C in {city}</p>\n{/if}\n```\n\nNote: Svelte components must always return a root element or content.\n\n## Components\n\n### Functional Component\n\n```js\n<script>\n  let { name = \"User\" } = $props();\n</script>\n\n<div class=\"UserProfile\">\n  <div>Hello</div>\n  <div>{name}</div>\n</div>\n```\n\n### Embed an internal Component\n\n```js\n<script>\n  import UserAvatar from './UserAvatar.svelte';\n</script>\n\n<div class=\"UserProfile\">\n  <UserAvatar />\n  <UserAvatar />\n</div>\n```\n\n### Embed an external Component\n\n```js\n<script>\n  import ComponentName from 'some-library';\n</script>\n\n<div class=\"UserProfile\">\n  <ComponentName />\n</div>\n```\n\nNote: External components should be installed via npm first.\n\n### Advanced Functional Components\n\n```js\n<script>\n  let { firstName, lastName } = $props();\n\n  function fullName() {\n    return `${firstName} ${lastName}`;\n  }\n</script>\n\n<p>{fullName()}</p>\n```\n\n## Properties {.cols-2}\n\n### Passing Properties to a Component\n\n```js\n<Student firstName=\"Zehan\" lastName=\"Khan\" age={23} pro={true} />\n```\n\n### Assigning the Properties from a Component\n\n```js\n<script>\n  let { firstName, lastName, age } = $props();\n</script>\n\n<h1>{firstName} {lastName} is {age}.</h1>\n```\n\n## State {.cols-1}\n\n### Local State\n\n```js\n<script>\n  let name = $state(\"Zehan\");\n\n  function updateName() {\n    name = prompt(\"What is your name?\") || name;\n  }\n</script>\n\n<h1>{name}</h1>\n<button onclick={updateName}>Update name</button>\n```\n\n## Events {.cols-1}\n\n### Event Listener\n\n```js\n<script>\n  function handleClick(event) {\n    event.preventDefault();\n    alert(\"Hello World\");\n  }\n</script>\n\n<a href=\"#\" onclick|preventDefault={handleClick}>\n  Say Hi\n</a>\n```\n\nNote: The most common event listeners are `onclick` and `onsubmit`.\n\n## Loops {.cols-2}\n\n### Looping through an Array\n\n```js\n<script>\n  let elements = [\"one\", \"two\", \"three\"];\n</script>\n\n<ul>\n  {#each elements as value, index}\n    <li>{value}</li>\n  {/each}\n</ul>\n```\n\n### Looping through an Array of Objects\n\n```js\n<script>\n  let elements = [\n    { name: \"one\", value: 1 },\n    { name: \"two\", value: 2 },\n    { name: \"three\", value: 3 }\n  ];\n</script>\n\n<ul>\n  {#each elements as element, index}\n    <li>\n      The value for {element.name} is {element.value}\n    </li>\n  {/each}\n</ul>\n```\n\n## Forms {.cols-1}\n\n### Form Example\n\n```js\n<script>\n  let username = $state(\"\");\n  let password = $state(\"\");\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    alert(`Logging in with ${username} and ${password}`);\n  }\n</script>\n\n<form onsubmit={handleSubmit}>\n  <input type=\"text\" placeholder=\"Username\" bind:value={username} />\n  <input type=\"password\" placeholder=\"Password\" bind:value={password} />\n  <input type=\"submit\" value=\"Login\" />\n</form>\n```\n\n## CSS {.cols-1}\n\n### Scoped CSS\n\n```js\n<style>\n  .student {\n    color: blue;\n  }\n</style>\n\n<div class=\"student\">Zehan Khan</div>\n```\n\n## Fetching Data {.cols-1}\n\n### Fetching Data with onMount\n\n```js\n<script>\n  import { onMount } from 'svelte';\n  let notifications = [];\n  let loading = $state(true);\n\n  onMount(async () => {\n    const res = await fetch(\"https://notifications.com\");\n    notifications = await res.json();\n    loading = false;\n  });\n</script>\n\n{#if loading}\n  <p>Loading notifications...</p>\n{:else}\n  <ul>\n    {#each notifications as note}\n      <li>{note.title}</li>\n    {/each}\n  </ul>\n{/if}\n```\n\nNote: Use `onMount` for side effects like API calls.\n\n## Lifecycle Hooks {.cols-1}\n\n### onMount\n\n```js\n<script>\n  import { onMount } from 'svelte';\n\n  onMount(() => {\n    console.log('Component mounted');\n  });\n</script>\n```\n\n### beforeUpdate\n\n```js\n<script>\n  import { beforeUpdate } from 'svelte';\n\n  beforeUpdate(() => {\n    console.log('Before component updates');\n  });\n</script>\n```\n\n### afterUpdate\n\n```js\n<script>\n  import { afterUpdate } from 'svelte';\n\n  afterUpdate(() => {\n    console.log('After component updates');\n  });\n</script>\n```\n\n### onDestroy\n\n```js\n<script>\n  import { onDestroy } from 'svelte';\n\n  onDestroy(() => {\n    console.log('Component destroyed');\n  });\n</script>\n```\n\nNote: Svelte lifecycle functions are similar to React Hooks, but they are imported individually and used directly in the\n`<script>` block.\n\n## More Svelte Features {.cols-1}\n\n### Derived Store\n\n```js\n// store.js\nimport { writable, derived } from 'svelte/store';\n\nexport const count = writable(0);\nexport const double = derived(count, ($count) => $count * 2);\n```\n\n```js\n// App.svelte\n<script>\n  import { count, double } from './store.js';\n</script>\n\n<p>Count: {$count}</p>\n<p>Double: {$double}</p>\n```\n\n### Readable Store\n\n```js\nimport { readable } from 'svelte/store';\n\nexport const time = readable(new Date(), function start(set) {\n  const interval = setInterval(() => {\n    set(new Date());\n  }, 1000);\n\n  return function stop() {\n    clearInterval(interval);\n  };\n});\n```\n\n### Reactive Declarations\n\n```js\n<script>\n  let a = $state(2);\n  let b = $state(3);\n  let sum = $derived(a + b);\n</script>\n\n<p>{sum}</p>\n```\n\n### Reactive Statements with Side Effects\n\n```js\n<script>\n  let name = 'Zehan';\n  $effect(() => console.log('Name changed to', name));\n</script>\n```\n\n### Bind to DOM Properties\n\n```js\n<script>\n  let text = $state('');\n</script>\n\n<textarea bind:value={text} />\n<p>{text.length} characters</p>\n```\n\n### Bind Grouped Inputs (Radio, Checkbox)\n\n```js\n<script>\n  let selected = $state('apple');\n</script>\n\n<label><input type=\"radio\" bind:group={selected} value=\"apple\" /> Apple</label>\n<label><input type=\"radio\" bind:group={selected} value=\"orange\" /> Orange</label>\n<p>Selected: {selected}</p>\n```\n\n### Class and Style Directives\n\n```js\n<script>\n  let isActive = true;\n</script>\n\n<div class:active={isActive}>Toggle me</div>\n```\n\n```js\n<script>\n  let size = 16;\n</script>\n\n<p style:font-size={`${size}px`}>Resizable text</p>\n```\n\n### Await Blocks\n\n```js\n<script>\n  let userPromise = fetch('https://jsonplaceholder.typicode.com/users/1')\n    .then(res => res.json());\n</script>\n\n{#await userPromise}\n  <p>Loading...</p>\n{:then user}\n  <p>{user.name}</p>\n{:catch error}\n  <p>Error: {error.message}</p>\n{/await}\n```\n\n### SSR with SvelteKit (Basic Example)\n\n```js\n// +page.server.js\nexport async function load({ fetch }) {\n  const res = await fetch('/api/data');\n  const data = await res.json();\n  return { data };\n}\n```\n\n```js\n// +page.svelte\n<script>\n  let { data } = $props();\n</script>\n\n<h1>{data.title}</h1>\n```\n\nNote: Requires SvelteKit setup for SSR routes.\n"
}