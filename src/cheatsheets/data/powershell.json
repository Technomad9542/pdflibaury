{
  "id": "powershell",
  "title": "PowerShell",
  "intro": "This is a quick reference cheat sheet to getting started with PowerShell scripting.",
  "tags": [
    "script",
    "windows"
  ],
  "categories": [
    "Programming",
    "Operating System"
  ],
  "background": "bg-[#397fe4]",
  "content": "## Basic Commands\n\n### Helper Commands\n\n**_Powershell follows Verb-Noun format for their commands._**\n\nSome common Verbs:\n\n| Verb    | Description                                       |\n| ------- | ------------------------------------------------- |\n| Get     | Used to retrieve information.                     |\n| Set     | Used to configure or change settings.             |\n| New     | Used to create new instances of objects.          |\n| Remove  | Used to delete or remove items.                   |\n| Invoke  | Used to execute a specific action or operation.   |\n| Start   | Used to initiate a process or operation.          |\n| Stop    | Used to halt or terminate a process or operation. |\n| Enable  | Used to activate or enable a feature.             |\n| Disable | Used to deactivate or disable a feature.          |\n| Test    | Used to perform tests or checks.                  |\n| Update  | Used to update or refresh data or configurations. |\n\nLists available modules\n\n```powershell\nGet-Module --ListAvailable\n```\n\nLists available cmdlets and functions.\n\n```powershell\nGet-Command -Module ActiveDirectory\n```\n\nRetrieves help\n\n```powershell\nGet-Help <cmd>\nGet-Help <cmd> -Examples\nGet-Help -Name Get-Process -Parameter Id\n```\n\nLists aliases and their corresponding cmdlet names.\n\n```powershell\nGet-Alias | Select-Object Name, Definition\n```\n\n**Get-Member:** Displays the properties and methods of objects.\n\n```powershell\nGet-Process | Get-Member\n```\n\n### Object Manipulation {.col-span-2}\n\n**Select-Object:** Selects specific properties from objects or customizes their display.\n\n```powershell\nGet-Process | Select-Object Name, CPU\n```\n\n**Where-Object:** Filters objects based on specified conditions.\n\n```powershell\nGet-Service | Where-Object { $PSItem.Status -eq 'Running' }\n#OR\nGet-Service | ? { $_.Status -eq 'Running' }\n```\n\n**Measure-Object:** Calculates statistics, like sum, average, and count, for object properties.\n\n```powershell\nGet-Process | Measure-Object -Property WorkingSet -Sum\n```\n\n**ForEach-Object:** Performs an operation on each object in a collection. (BEAWARE: Below command will prefix of\nfiles/folder in the current dir)\n\n```powershell\nGet-ChildItem | ForEach-Object { Rename-Item $_ -NewName \"Prefix_$_\" }\n```\n\n**Sort-Object:** Sorts objects by specified properties.\n\n```powershell\nGet-ChildItem | Sort-Object Length -Descending\n```\n\n**Format-Table:** Formats output as a table with specified columns.\n\n```powershell\nGet-Service | Format-Table -AutoSize  # ft alias\n```\n\n**Format-List:** Formats output as a list of properties and values.\n\n```powershell\nGet-Process | Format-List -Property Name, CPU  # fl alias\n```\n\n### FileSystem {.col-span-2}\n\n```powershell\nNew-Item -path file.txt -type 'file' -value 'contents'\nNew-Item -path file.txt -type 'dir'\nCopy-Item <src> -destination <dest>\nMove-Item -path  <src> -destination <dest>\nRemove-Item <file>\nTest-Path <path>\nRename-Item -path <path> -newname <newname>\n\n# using .NET Base Class Library\n[System.IO.File]::WriteAllText('test.txt', '')\n[System.IO.File]::Delete('test.txt')\n\nGet-Content -Path \"test.txt\"\nGet-Process | Out-File -FilePath \"processes.txt\"# Output to file\nGet-Process | Export-Csv -Path \"processes.csv\"  # Output to csv\n$data = Import-Csv -Path \"data.csv\"             # Import from csv\n```\n\n## System Management\n\n### Windows Management Instrumentation {.col-span-2}\n\n```powershell\n# Retrieve BIOS information\nGet-CimInstance -ClassName Win32_BIOS\n# Retrieve information about locally connected physical disk devices\nGet-CimInstance -ClassName Win32_DiskDrive\n# Retrieve information about install physical memory (RAM)\nGet-CimInstance -ClassName Win32_PhysicalMemory\n# Retrieve information about installed network adapters (physical + virtual)\nGet-CimInstance -ClassName Win32_NetworkAdapter\n# Retrieve information about installed graphics / video card (GPU)\nGet-CimInstance -ClassName Win32_VideoController\n\n# List all the classNames\nGet-CimClass | Select-Object -ExpandProperty CimClassName\n# Explore the various WMI classes available in the root\\cimv2 namespace\nGet-CimClass -Namespace root\\cimv2\n# Explore the child WMI namespaces underneath the root\\cimv2 namespace\nGet-CimInstance -Namespace root -ClassName __NAMESPACE\n\n\n```\n\n### Network Management\n\n```powershell\n# Test network connectivity to a remote host\nTest-Connection -ComputerName google.com\n\n# Retrieve network adapter information\nGet-NetAdapter\n\n# Retrieve IP address information\nGet-NetIPAddress\n\n# Retrieve routing table information\nGet-NetRoute\n\n# Test if a port is open on a remote host\nTest-NetConnection google.com -Port 80\n\n```\n\n### User & Group Management {.col-span-2}\n\n```powershell\n# Retrieve local user account information\nGet-LocalUser\n\n# Create a new local user account\nNew-LocalUser -Name NewUser -Password (ConvertTo-SecureString \"Password123\" -AsPlainText -Force)\n\n# Remove a local user account\nRemove-LocalUser -Name UserToRemove\n\n# Retrieve local group information\nGet-LocalGroup\n\n# Add a member to a local group\nAdd-LocalGroupMember -Group Administrators -Member UserToAdd\n```\n\n### Security & Permissions\n\n```powershell\n# Retrieve access control lists for file/dir\nGet-Acl C:\\Path\\To\\File.txt\n\n# Set access control lists for a file/dir\nSet-Acl -Path C:\\Path\\To\\File.txt -AclObject $aclObject\n```\n\n### Registry Management {.col-span-2}\n\n```powershell\n# Retrieve registry key values\nGet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\" | Select DisplayName, DisplayVersion\n\n# Set registry key values\nSet-ItemProperty -Path \"HKLM:\\Software\\MyApp\" -Name \"SettingName\" -Value \"NewValue\"\n\n# Create a new registry key value\nNew-ItemProperty -Path \"HKCU:\\Software\\MyApp\" -Name \"NewSetting\" -Value \"NewValue\" -PropertyType String\n\n# Remove a registry key value\nRemove-ItemProperty -Path \"HKCU:\\Software\\MyApp\" -Name \"SettingToRemove\"\n\n# Check if a registry key exists\nTest-Path \"HKLM:\\Software\\MyApp\"\n```\n\n## Scripting\n\n### Variables {.col-span-2}\n\nInitializing a variable with/without a specified type:\n\n```powershell\n$var = 0\n[int] $var = 'Trevor'         # (throws an exception)\n[string] $var = 'Trevor'      # (doesn't throw an exception)\n$var.GetType()\n\n# Multiple Assigning\n$a,$b,$c = 'a','b','c'\n\n# Create an array\n$arrayvar = @('va1','va2')\n\n# Create dict\n$dict = @{k1 = 'test'; k2 = 'best'}\n```\n\nVariable Commands\n\n```powershell\nNew-Variable -Name FirstName -Value Trevor\nNew-Variable FirstName -Value Trevor -Option <ReadOnly/Constant>\n\nGet-Variable\nGet-Variable | ? { $PSItem.Options -contains 'constant' }\nGet-Variable | ? { $PSItem.Options -contains 'readonly' }\n\nRemove-Variable -Name firstname\n# Removes ReadOnly var\nRemove-Variable -Name firstname -Force\n```\n\nVariable types int32, int64, string, bool\n\n### Operators\n\n```powershell\n# operators\n# (a <op> b)\n\n= , += / -= , ++ / --\n-eq / -ne , -lt / -gt , -le / -ge\n\n$FirstName = 'Trevor'\n$FirstName -like 'T*'\n$true; $false #bool true/false\n\n# ternary operator\n$FoodToEat = $BaconIsYummy ? 'bacon' : 'beets'\n\n# -notin or -in\n'Celery' -in @('Bacon', 'Sausage', 'Steak')\n\n# output: True\n5 -is [int32]\n\n# regex match, array can be use\n'Trevor' -match '^T\\w*'\n\n# Find multiple matches.\n$regex = [regex]'(\\w*)'\n$regex.Matches('this is test').Value\n\n```\n\n### Structure\n\n#### I/O operation\n\n```powershell\n\"This displays a string\"\n\nWrite-Host \"color\" -ForegroundColor Red\n\n$age = Read-host \"Enter age\"\n\n$pwd = Read-host \"password\" -asSecureString\n\nClear-Host\n```\n\n#### Flow Controls\n\n```powershell\nIF(<#Condition#>){\n<#Commands#>}ELSEIF(){}ELSE{}\n\nSwitch($var){\n\t\"val1\"{<#Commands#>; break}\n    \"val2\"{<#Commands#>; break}\n}\n\nFor($ct=0;$ct -le 3;$ct++){}\n\nForEach($var in $arr){}\n\nwhile($var -ne 0){}\n\nDo{}While()\n\n```\n\n### Function / Modules {.row-span-2}\n\n#### Example 1\n\n```powershell\nfunction funcname{\n\n    [CmdletBinding()]\n\tparam(\n\t\t[Parameter(Mandatory)]\n\t\t[String]$user\n\t)\n\tWrite-Host \"welcome \" $user\n    return \"value\"\n}\n$var = funcname -user pcb\n```\n\n#### Example 2\n\n```powershell\nfunction Get-EvenNumbers {\n    [CmdletBinding()]\n    param (\n        [Parameter(ValueFromPipeline = $true)]\n        [int] $Number\n    )\n    begin {<#command#>}\n    process {\n        if ($Number % 2 -eq 0) {\n            Write-Output $Number\n        }\n    }\n    end {<#command#>}\n}\n1..10 | Get-EvenNumbers\n\n```\n\n#### Modules\n\n```powershell\n# PowerShell looks module in the path\n$env:PSModulePath\n\n# lists all modules installed on system\nGet-Module -ListAvailable\n# modules imported into current session\nGet-Module\n\nImport-Module <moduleName>\nRemove-Module <moduleName>\n\nFind-Module -Tag cloud\nFind-Module -Name ps*\n\n# Create an in-memory PowerShell module\nNew-Module -Name trevor -ScriptBlock {\n  function Add($a,$b) { $a + $b } }\n\n\n```\n\n### Tips\n\n- In most of the languages, escape character is backslash **\\\\** whereas in PowerShell it is backtick **`**\n\n```powershell\n\n```\n\n## Also see {.cols-1}\n\n- [Microsoft PowerShell](https://learn.microsoft.com/en-us/powershell/scripting/samples/sample-scripts-for-administration?view=powershell-7.3)\n  _(learn.microsoft.com)_\n"
}