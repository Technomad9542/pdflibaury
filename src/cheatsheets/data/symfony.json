{
  "id": "symfony",
  "title": "Symfony",
  "intro": "|\nThis Symfony Cheat Sheet is a non exhaustive list of main symfony basics that you can use or need.",
  "tags": [
    "php",
    "web"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#67526d]",
  "content": "## Getting Started \r\n\r\n### Installation \r\n\r\n```bash\r\ncurl -sS https://get.symfony.com/cli/installer | bash\r\n```\r\n- [Doc Symfony Download](https://symfony.com/download) \r\n\r\n{.marker-round}\r\n\r\n### Symfony CLI: Basic Commands {.col-span-2}  \r\n\r\n\r\n| Command                         | Description                                   |\r\n|:--------------------------------|:----------------------------------------------|\r\n| `symfony check:requirements`    | Check system requirements for running Symfony |\r\n| `symfony version`               | Display the Symfony CLI version               |\r\n| `symfony help`                  | Display all available commands                |\r\n| `symfony help <cmd>`            | Display help for a specific command           |\r\n| `symfony server:start`          | Start server                                  |\r\n| `symfony server:stop`           | Stop server                                   |\r\n| `symfony serve -d`              | Run Symfony server in background              |\r\n\r\n\r\n\r\n### Creating a New Symfony Project   {.col-span-3}\r\n\r\n| Command                                                       | Description                                        |\r\n|:--------------------------------------------------------------|:---------------------------------------------------|\r\n| `symfony new <dir>`                                           | Create a new Symfony project in `<dir>`            |\r\n| `symfony new my_project_directory --version=\"7.3.x\" --webapp` | Create a new web application                       |\r\n| `symfony new my_project_directory --version=\"7.3.x\"`          | Create a new API application                       |\r\n| `composer create-project symfony/skeleton <dir>`              | Create a new Symfony project using Composer        |\r\n\r\n----\r\n\r\n[Doc Symfony creating app](https://symfony.com/doc/current/setup.html#creating-symfony-applications) {.link-arrow}\r\n\r\n\r\n\r\n### Symfony Console Basic Usage \r\n\r\n| CMD                       | Description                                               |\r\n|:--------------------------|:----------------------------------------------------------|\r\n| `bin/console`             | List all available commands                               |\r\n| `bin/console <namespace>` | List all commands in a specific namespace or bundle       |\r\n| `bin/console <cmd>`       | Run a specific command                                    |\r\n| `bin/console help <cmd>`  | Show help for a specific command                          |\r\n| `bin/console --env=<env>` | Run console in environment: dev, test, or prod            |\r\n| `bin/console cache:clear` | Clear the cache                                           |\r\n\r\n### Linting Commands   {.col-span-2}\r\n\r\n| CMD                            | Description                                            |\r\n|:-------------------------------|:-------------------------------------------------------|\r\n| `bin/console lint:container`   | Check service arguments for type mismatches            |\r\n| `bin/console lint:twig <dir>`  | Lint Twig templates for syntax errors                  |\r\n| `bin/console lint:yaml <dir>`  | Lint YAML files for syntax errors                      |\r\n| `bin/console lint:xliff <dir>` | Lint XLIFF translation files                           |\r\n\r\n\r\n### Debugging Commands   {.col-span-3}\r\n\r\n| CMD                                          | Description                             |\r\n|:---------------------------------------------|:----------------------------------------|\r\n| `bin/console debug:asset-map`                | Show all mapped assets                  |\r\n| `bin/console debug:autowiring`               | List all autowireable services          |\r\n| `bin/console debug:config <bundle>`          | Dump configuration of a bundle          |\r\n| `bin/console debug:container`                | List all public services                |\r\n| `bin/console debug:container <service>`      | Get info about a specific service       |\r\n| `bin/console debug:container --env-vars`     | Show environment variables in container |\r\n| `bin/console debug:container --tags`         | List tagged public services             |\r\n| `bin/console debug:container --tag=<t>`      | List services with a specific tag       |\r\n| `bin/console debug:dotenv`                   | Display parsed dotenv values            |\r\n| `bin/console debug:dotenv <search>`          | Show dotenv values matching a search    |\r\n| `bin/console debug:event-dispatcher`         | List all event listeners                |\r\n| `bin/console debug:firewall <name>`          | Show details of a firewall              |\r\n| `bin/console debug:form`                     | Show form type information              |\r\n| `bin/console debug:messenger`                | List dispatchable messages              |\r\n| `bin/console debug:router`                   | List all registered routes              |\r\n| `bin/console debug:router <name>`            | Get info about a specific route         |\r\n| `bin/console debug:translation <loc>`        | Show messages for a locale              |\r\n\r\n### AssetMap Commands  {.col-span-2}\r\n\r\n| CMD                                   | Description                                        |\r\n|:--------------------------------------|:---------------------------------------------------|\r\n| `bin/console asset-map:compile`       | Compile assets for production                      |\r\n| `bin/console importmap:require <pkg>` | Add an NPM package to the import map               |\r\n| `bin/console importmap:install`       | Download all importmap packages                    |\r\n| `bin/console importmap:update`        | Update all importmap packages                      |\r\n| `bin/console importmap:remove <pkg>`  | Remove a package from import map                   |\r\n| `bin/console importmap:outdated`      | List outdated importmap packages                   |\r\n| `bin/console importmap:audit`         | Check dependencies for vulnerabilities             |\r\n\r\n\r\n\r\n\r\n## ORM & Migration \r\n\r\n### Database Connection    {.col-span-2}\r\n\r\n\r\n```bash\r\n# MySQL \r\nDATABASE_URL=\"mysql://username:password@127.0.0.1:3306/db_name?serverVersion=X.Y.Z&charset=utf8mb4\"\r\n\r\n# MariaDB \r\nDATABASE_URL=\"mysql://username:password@127.0.0.1:3307/db_name?serverVersion=X.Y.Z-MariaDB&charset=utf8mb4\"\r\n\r\n# PostgreSQL \r\nDATABASE_URL=\"postgresql://username:password@127.0.0.1:5432/db_name?serverVersion=X.Y.Z&charset=utf8\"\r\n```\r\n----\r\n\r\n`username` : user of DBMS <br>\r\n`password` : password of DBMS <br>\r\n`127.0.0.1`:  `3306` MySQL `3307` MariaDB `5432` PostgreSQL <br> \r\n`db_name` : name of data base <br>\r\n`serverVersion` : to know server version <code>SHOW GLOBAL VARIABLE LIKE</code> `%version%` in your DBMS\r\n\r\n\r\n\r\n\r\n### Doctrine Commands  {.col-span-3}\r\n\r\n\r\n\r\n| CMD                                                                                                                                         | Description                              |\r\n|:--------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------|\r\n| `bin/console doctrine:database:create`or `php bin/console d:d:c`                                                                            | Create the configured database           |\r\n| `bin/console doctrine:database:drop`  or `php bin/console d:d:d`                                                                            | Drop the configured database             |\r\n| `bin/console doctrine:mapping:info`                                                                                                         | List mapped entities                     |\r\n| `bin/console doctrine:schema:update --dump-sql`                                                                                             | Generate SQL to sync DB schema           |\r\n| `bin/console doctrine:schema:update --force`                                                                                                | Sync DB schema with mapping info         |\r\n| `bin/console doctrine:schema:validate`                                                                                                      | Validate the mapping files               |\r\n| `bin/console doctrine:query:sql <sql cmd>`                                                                                                  | Run a raw SQL query                      |\r\n| `bin/console doctrine:query:dql <dql cmd>`                                                                                                  | Run a DQL query                          |\r\n| `bin/console doctrine:fixtures:load`                                                                                                        | Load data fixtures into the database     |\r\n\r\n---\r\n\r\nYou can run <code>php bin/console doctrine:schema:drop --force && php bin/console doctrine:schema:update --force && php bin/console doctrine:fixtures:load -n</code> to Load data fixtures & reset sequence to 0 \r\n\r\n----\r\n\r\n[Doc Symfony Database](https://symfony.com/doc/current/doctrine.html#configuring-the-database) {.link-arrow}\r\n\r\n\r\n\r\n### Migration Commands  {.col-span-3}\r\n\r\n| CMD                                                                 | Description                                                         |\r\n|:--------------------------------------------------------------------|:--------------------------------------------------------------------|\r\n| `bin/console make:migration`                                        | Generate a new migration based on schema changes                    |\r\n| `bin/console doctrine:migration:generate`                           | Generate a new migration based on schema changes                    |\r\n| `bin/console doctrine:migration:migrate` or `php bin/console d:m:m` | Execute pending migrations to update the database                   |\r\n| `bin/console doctrine:migration:status`                             | Show status of migrations (pending, executed)                       |\r\n| `bin/console doctrine:migration:diff`                               | Compare current schema with the database and generate migration SQL |\r\n\r\n\r\n## Symfony Maker\r\n\r\n### Maker-Bundle List  {.col-span-2}\r\n\r\n| Command                      | Description                                                                                          |\r\n|:-----------------------------|:-----------------------------------------------------------------------------------------------------|\r\n| `bin/console list make `     | List all make commands available                                                                     |\r\n| `make:auth`                  | Create a Guard authenticator of different flavors                                                    |\r\n| `make:command`               | Create a new console command class                                                                   |\r\n| `make:controller`            | Create a new controller class                                                                        |\r\n| `make:crud`                  | Create CRUD for Doctrine entity class                                                                |\r\n| `make:docker:database`       | Add a database container to your compose.yaml file                                                   |\r\n| `make:entity`                | Create or update a Doctrine entity class, and optionally an API Platform resource                    |\r\n| `make:fixtures`              | Create a new class to load Doctrine fixtures                                                         |\r\n| `make:form`                  | Create a new form class                                                                              |\r\n| `make:functional-test`       | Create a new test class                                                                              |\r\n| `make:listener`              | [make:subscriber] Creates a new event subscriber class or a new event listener class                 |\r\n| `make:message`               | Create a new message and handler                                                                     |\r\n| `make:messenger-middleware`  | Create a new messenger middleware                                                                    |\r\n| `make:migration`             | Create a new migration based on database changes                                                     |\r\n| `make:registration-form`     | Create a new registration form system                                                                |\r\n| `make:reset-password`        | Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle          |\r\n| `make:schedule`              | Create a scheduler component                                                                         |\r\n| `make:security:custom`       | Create a custom security authenticator                                                               |\r\n| `make:security:form-login`   | Generate the code needed for the form_login authenticator                                            |\r\n| `make:serializer:encoder`    | Create a new serializer encoder class                                                                |\r\n| `make:serializer:normalizer` | Create a new serializer normalizer class                                                             |\r\n| `make:stimulus-controller`   | Create a new Stimulus controller                                                                     |\r\n| `make:subscriber`            | Creates a new event subscriber class or a new event listener class                                   |\r\n| `make:test`                  | [make:unit-test make:functional-test] Create a new test class                                        |\r\n| `make:twig-component`        | Create a Twig (or Live) component                                                                    |\r\n| `make:twig-extension`        | Create a new Twig extension with its runtime class                                                   |\r\n| `make:unit-test`             | Create a new test class                                                                              |\r\n| `make:user`                  | Create a new security user class                                                                     |\r\n| `make:validator`             | Create a new validator and constraint class                                                          |\r\n| `make:voter`                 | Create a new security voter class                                                                    |\r\n| `make:webhook`               | Create a new Webhook                                                                                 |\r\n\r\n\r\n[Doc Symfony Maker Bundle](https://symfony.com/bundles/SymfonyMakerBundle/current/index.html)   {.link-arrow}\r\n\r\n## Controller Basics\r\n\r\n### Route Attributes and Descriptions  {.col-span-3}\r\n\r\n\r\n`use Symfony\\Component\\Routing\\Attribute\\Route;`\r\n\r\n| Attribute                                                                   | Description                                |\r\n|:----------------------------------------------------------------------------|:-------------------------------------------|\r\n| `#[Route('/path')]`                                                         | Define a route for a controller method     |\r\n| `#[Route('/path', name: 'name')]`                                           | Define a named route for a method          |\r\n| `#[Route('/path', methods: ['GET'])]`                                       | Define allowed HTTP methods                |\r\n| `#[Route('/blog/{slug}')]`                                                  | Define a route with a parameter            |\r\n| `#[Route('/page/{page}', requirements: ['page' => '\\d+'])]`                 | Define a route with a parameter constraint |\r\n| `#[Route(path: ['en' => '/about-us', 'nl' => '/over-ons'], name: 'about')]` | Define localized routes                    |\r\n\r\n[Doc Symfony Route Parameters](https://symfony.com/doc/current/routing.html#route-parameters)  {.link-arrow}\r\n\r\n### AbstractController Methods  {.col-span-3}\r\n\r\n| Method                                                 | Description                                   |\r\n|:-------------------------------------------------------|:----------------------------------------------|\r\n| `$this->render('template.html')`                       | Returns a Response with the rendered template |\r\n| `$this->redirectToRoute('homepage')`                   | Returns a RedirectResponse to a named route   |\r\n| `$this->redirectToRoute('name', ['param' => 'value'])` | Returns a redirect to a route with parameters |\r\n| `$this->redirectToRoute('name', [], 301)`              | Returns a RedirectResponse with status code   |\r\n| `$this->redirect('http://example.com')`                | Returns a RedirectResponse to an external URL |\r\n| `$this->createNotFoundException($msg)`                 | Returns a NotFoundHttpException               |\r\n| `$this->createForm(FormType::class, $data)`            | Creates a new Form instance based on the type |\r\n\r\n### Form Methods {.col-span-2}\r\n\r\n| Method                           | Description                     |\r\n|:---------------------------------|:--------------------------------|\r\n| `$form->handleRequest($request)` | Handle a form submission        |\r\n| `$form->isSubmitted()`           | Check if the form was submitted |\r\n| `$form->isValid()`               | Check if the form is valid      |\r\n\r\n\r\n## Form Type : [Doc Symfony Form types](https://symfony.com/doc/current/reference/forms/types.html)  \r\n\r\n\r\n### Form Fields: Text Fields\r\n\r\n| Type           | Description                             |\r\n|:---------------|:----------------------------------------|\r\n| `TextType`     | A basic text input field                |\r\n| `TextareaType` | A multi-line textarea field             |\r\n| `EmailType`    | An email field (`<input type=\"email\">`) |\r\n| `PasswordType` | A password field                        |\r\n| `SearchType`   | A search field                          |\r\n| `UrlType`      | A URL field (`<input type=\"url\">`)      |\r\n| `TelType`      | A tel (phone number) input field        |\r\n| `UuidType`     | A UUID field                            |\r\n\r\n\r\n### Form Fields: Numeric Fields\r\n\r\n| Type           | Description                                |\r\n|:---------------|:-------------------------------------------|\r\n| `IntegerType`  | A number field for integers                |\r\n| `MoneyType`    | A money field, with a specifiable currency |\r\n| `NumberType`   | A number field                             |\r\n| `PercentType`  | A number field for percentages             |\r\n| `RangeType`    | A range input field (slider)               |\r\n\r\n\r\n\r\n### Form Fields: Choice Fields\r\n\r\n| Type           | Description                             |\r\n|:---------------|:----------------------------------------|\r\n| `ChoiceType`   | Field for selecting one or more options |\r\n| `EnumType`     | Choose from PHP enum cases              |\r\n| `EntityType`   | Choose from a Doctrine entity           |\r\n| `CountryType`  | Choose a country                        |\r\n| `LanguageType` | Choose a language                       |\r\n| `LocaleType`   | Choose a locale                         |\r\n| `TimezoneType` | Choose a timezone                       |\r\n| `CurrencyType` | Choose a currency                       |\r\n\r\n\r\n\r\n### Form Fields: Symfony UX Fields\r\n\r\n| Type            | Description                        |\r\n|:----------------|:-----------------------------------|\r\n| `CropperType`   | A Cropper.js image cropper field   |\r\n| `DropzoneType`  | A Dropzone file upload field       |\r\n\r\n\r\n\r\n### Form Fields: Date and Time Fields\r\n\r\n| Type               | Description                 |\r\n|:-------------------|:----------------------------|\r\n| `DateType`         | A date field                |\r\n| `DateIntervalType` | A date interval field       |\r\n| `DateTimeType`     | A date and time field       |\r\n| `TimeType`         | A time field                |\r\n| `BirthdayType`     | A date field for birthdays  |\r\n| `WeekType`         | Select a year and week      |\r\n\r\n\r\n\r\n### Form Fields: Other Fields\r\n\r\n| Type           | Description                         |\r\n|:---------------|:------------------------------------|\r\n| `CheckboxType` | A single checkbox field             |\r\n| `FileType`     | A file upload field                 |\r\n| `RadioType`    | A radio button field                |\r\n| `HiddenType`   | A hidden field                      |\r\n\r\n\r\n\r\n### Form Fields: Field Groups\r\n\r\n| Type              | Description                                                |\r\n|:------------------|:-----------------------------------------------------------|\r\n| `CollectionType`  | A group of fields that can be added or removed             |\r\n| `RepeatedType`    | A field that is repeated (e.g., password confirmation)     |\r\n\r\n\r\n\r\n## Validation Attributes and Descriptions :  [Doc Symfony Validation](https://symfony.com/doc/current/validation.html)\r\n\r\n\r\n### General Constraints\r\n| Attribute                  | Description                                       |\r\n|:---------------------------|:--------------------------------------------------|\r\n| `#[Assert\\NotBlank]`       | Value is not an empty string/array, false or null |\r\n| `#[Assert\\Blank]`          | Value is an empty string or null                  |\r\n| `#[Assert\\NotNull]`        | Value is not strictly equal to null               |\r\n| `#[Assert\\IsNull]`         | Value is exactly equal to null                    |\r\n| `#[Assert\\Type('string')]` | Value is of a specific type                       |\r\n\r\n### Validation: Comparison Constraints  {.col-span-2}\r\n| Attribute                           | Description                                       |\r\n|:------------------------------------|:--------------------------------------------------|\r\n| `#[Assert\\<Not>EqualTo('Foo')]`     | Value is (not) equal to another value             |\r\n| `#[Assert\\<Not>IdenticalTo('Foo')]` | Value is (not) identical to another value         |\r\n| `#[Assert\\LessThan<OrEqual>(5)]`    | Value is less than (or equal to) another value    |\r\n| `#[Assert\\GreaterThan<OrEqual>(5)]` | Value is greater than (or equal to) another value |\r\n| `#[Assert\\Range(min: 2, max: 10)]`  | Number or DateTime object is within a range       |\r\n \r\n### Validation: String Constraints  {.col-span-2}\r\n| Attribute                          | Description                                           |\r\n|:-----------------------------------|:------------------------------------------------------|\r\n| `#[Assert\\Length(2, 10)]`          | String is between `<min>` and `<max>` characters long |\r\n| `#[Assert\\Email]`                  | String is a valid email address                       |\r\n| `#[Assert\\Url]`                    | String is a valid URL                                 |\r\n| `#[Assert\\Hostname]`               | String is a valid hostname                            |\r\n| `#[Assert\\Ip]`                     | String is a valid IP address                          |\r\n| `#[Assert\\NoSuspiciousCharacters]` | String does not contain spoofing characters           |\r\n| `#[Assert\\Uuid]`                   | String is a valid UUID                                |\r\n| `#[Assert\\CssColor]`               | String is a valid CSS color                           |\r\n\r\n\r\n### Validation: Date and Time Constraints\r\n| Attribute            | Description                                       |\r\n|:---------------------|:--------------------------------------------------|\r\n| `#[Assert\\Date]`     | Value is a valid date string in `Y-m-d` format    |\r\n| `#[Assert\\DateTime]` | Value is a valid datetime in the specified format |\r\n| `#[Assert\\Time]`     | Value is a valid time string in `H:i:s` format    |\r\n| `#[Assert\\Timezone]` | Value is a valid timezone identifier              |\r\n\r\n### Validation: Password Constraints  {.col-span-2}\r\n| Attribute                          | Description                                 |\r\n|:-----------------------------------|:--------------------------------------------|\r\n| `#[Assert\\UserPassword]`           | String is the authenticated user's password |\r\n| `#[Assert\\NotCompromisedPassword]` | Password is not found in any data breaches  |\r\n| `#[Assert\\PasswordStrength]`       | Password has sufficient entropy             |\r\n\r\n### Validation: Financial and Other Number Constraints\r\n| Attribute              | Description                                      |\r\n|:-----------------------|:-------------------------------------------------|\r\n| `#[Assert\\Bic]`        | Value is a valid Business Identifier Code (BIC)  |\r\n| `#[Assert\\CardScheme]` | Value is a valid credit card number              |\r\n| `#[Assert\\Currency]`   | Value is a valid 3-letter ISO 4217 currency code |\r\n| `#[Assert\\Luhn]`       | Value passes the Luhn algorithm                  |\r\n| `#[Assert\\Iban]`       | Value is a valid IBAN                            |\r\n| `#[Assert\\Isbn]`       | Value is a valid ISBN                            |\r\n\r\n\r\n### Validation: File Constraints\r\n| Attribute         | Description                                     |\r\n|:------------------|:------------------------------------------------|\r\n| `#[Assert\\File]`  | Value is a valid file path or File object       |\r\n| `#[Assert\\Image]` | Same as File, but only accepts image MIME types |\r\n\r\n\r\n### Validation: Number Constraints {.col-span-2}\r\n| Attribute                    | Description                 |\r\n|:-----------------------------|:----------------------------|\r\n| `#[Assert\\Positive<OrZero>]` | Value is positive (or zero) |\r\n| `#[Assert\\Negative<OrZero>]` | Value is negative (or zero) |\r\n\r\n\r\n### Validation: Choice Constraints {.col-span-2}\r\n| Attribute                            | Description                               |\r\n|:-------------------------------------|:------------------------------------------|\r\n| `#[Assert\\Choice(['A', 'B', 'C'])]`  | Value is one of the specified choices     |\r\n| `#[Assert\\Country]`                  | Value is a valid ISO 3166-1 country code  |\r\n| `#[Assert\\Language]`                 | Value is a valid two-letter language code |\r\n| `#[Assert\\Locale]`                   | Value is a valid locale identifier        |\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
}