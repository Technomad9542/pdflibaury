{
  "id": "emacs",
  "title": "Emacs",
  "intro": "|\n[Emacs](https://www.gnu.org/software/emacs) is the extensible, customizable, self-documenting real time display text editor.\nThis reference was made for Emacs 27.",
  "tags": [
    "editor",
    "text",
    "shortcut"
  ],
  "categories": [
    "Toolkit"
  ],
  "background": "bg-[#7752a9]",
  "content": "## Getting started\n\n### Starting Emacs\n\nTo enter Emacs, just type its name:\n\n```shell\n$ emacs\n```\n\n---\n\n| -           | -                      |\n| ----------- | :--------------------- |\n| `C-z`       | Suspend Emacs          |\n| `C-x` `C-c` | Exit Emacs permanently |\n\n{.shortcuts}\n\n### Global Description {.secondary}\n\n| -         | -                                           |\n| --------- | :------------------------------------------ |\n| `C-<key>` | Means hold the control, and press `<key>`   |\n| `M-<key>` | Means press the Esc once, and press `<key>` |\n\n{.shortcuts}\n\nNOTICE: This cheatsheet follows the above rules.\n\n### Motion {.row-span-2}\n\n| Backward  | Forward   | Entity to move over            |\n| --------- | --------- | :----------------------------- |\n| `C-b`     | `C-f`     | Haracter                       |\n| `M-b`     | `M-f`     | Word                           |\n| `C-p`     | `C-n`     | Line                           |\n| `C-a`     | `C-e`     | Line beginning<br/>_(or end)_  |\n| `M-a`     | `M-e`     | Sentence                       |\n| `M-{`     | `M-}`     | Paragraph                      |\n| `C-x` `[` | `C-x` `]` | Page                           |\n| `C-M-b`   | `C-M-f`   | Sexp                           |\n| `C-M-a`   | `C-M-e`   | Function                       |\n| `M-<`     | `M->`     | Buffer beginning<br>_(or end)_ |\n\n{.shortcuts .show-header}\n\n### Case Change\n\n| -           | -                |\n| ----------- | :--------------- |\n| `M-u`       | Uppercase word   |\n| `M-l`       | Lowercase word   |\n| `M-c`       | Capitalize word  |\n| `C-x` `C-u` | Uppercase region |\n| `C-x` `C-l` | Lowercase region |\n\n{.shortcuts}\n\n### Files\n\n| -           | -                                                |\n| ----------- | :----------------------------------------------- |\n| `C-x` `C-f` | Read a file into Emacs                           |\n| `C-x` `C-s` | Save a file back to disk                         |\n| `C-x` `s`   | Save all files                                   |\n| `C-x` `i`   | Insert contents of another file into this buffer |\n| `C-x` `C-v` | Replace this file with your file                 |\n| `C-x` `C-w` | Write buffer to a specified file                 |\n| `C-x` `C-q` | Toggle read-only status of buffer                |\n\n{.shortcuts}\n\n### Error Recovery\n\n| -                           | -                                          |\n| --------------------------- | :----------------------------------------- |\n| `C-g`                       | Abort partially typed or executing command |\n| `M-x` recover-session       | Recover files lost by a system crash       |\n| `C-x` `u`<br>`C-_`<br>`C-/` | Undo an unwanted change                    |\n| `M-x` revert-buffer         | Restore a buffer to its original contents  |\n| `C-l`                       | Redraw garbaged screen                     |\n\n{.shortcuts}\n\n### Transposing {.row-span-2}\n\n| -           | -                    |\n| ----------- | :------------------- |\n| `C-t`       | Transpose characters |\n| `M-t`       | Transpose words      |\n| `C-x` `C-t` | Transpose lines      |\n| `C-M-t`     | Transpose sexps      |\n\n{.shortcuts .table-fixed}\n\n#### Scroll\n\n| -         | -                                              |\n| --------- | :--------------------------------------------- |\n| `C-v`     | Scroll to next screen                          |\n| `M-v`     | Scroll to previous screen                      |\n| `C-x` `<` | Scroll left                                    |\n| `C-x` `>` | Scroll right                                   |\n| `C-l`     | Scroll current line to <br>center, top, bottom |\n\n{.shortcuts .table-fixed}\n\n#### Goto\n\n| -         | -                   |\n| --------- | :------------------ |\n| `M-g` `g` | Goto line           |\n| `M-g` `c` | Goto char           |\n| `M-m`     | Back to indentation |\n\n{.shortcuts .table-fixed}\n\n### Marking\n\n| -                 | -                       |\n| ----------------- | :---------------------- |\n| `C-@`<br/>`C-SPC` | Uet mark here           |\n| `C-x` `C-x`       | Exchange point and mark |\n| `M-@`             | Set mark arg words away |\n| `M-h`             | Mark paragraph          |\n| `C-x` `C-p`       | Mark page               |\n| `C-M-@`           | Mark sexp               |\n| `C-M-h`           | Mark function           |\n| `C-x` `h`         | Mark entire buffer      |\n\n{.shortcuts}\n\n### Killing and Deleting {.row-span-2}\n\n| Backward      | Forward | Entity to kill           |\n| ------------- | ------- | :----------------------- |\n| `DEL`         | `C-d`   | Character <br>_(delete)_ |\n| `M-DEL`       | `M-d`   | Word                     |\n| `M-0` `C-k`   | `C-k`   | Line <br/> _(to end of)_ |\n| `C-x` `DEL`   | `M-k`   | Sentence                 |\n| `M--` `C-M-k` | `C-M-k` | Sexp                     |\n\n{.shortcuts .show-header}\n\n#### Killing\n\n| -          | -                                    |\n| ---------- | :----------------------------------- |\n| `C-W`      | Kill region C-w                      |\n| `M-w`      | Copy region to kill ring             |\n| `M-z` char | Kill through next occurrence of char |\n| `C-y`      | Yank back last thing killed          |\n| `M-y`      | Replace last yank with previous kill |\n\n{.shortcuts}\n\n### Getting Help\n\n| -         | -                                        |\n| --------- | :--------------------------------------- |\n| `C-x` `1` | Remove help window                       |\n| `C-M-v`   | Scroll help window                       |\n| `C-h` `a` | Apropos: show commands matching a string |\n| `C-h` `k` | Describe the function a key runs         |\n| `C-h` `f` | Describe a function                      |\n| `C-h` `m` | Get mode-specific information            |\n\n{.shortcuts}\n\nThe help system is simple. Type `C-h` (or `F1`) and follow the directions. If you are a first-time user, type `C-h` `t`\nfor a tutorial.\n\n### Multiple Windows {.col-span-2}\n\nWhen two commands are shown, the second is a similar command for a frame instead of a window.\n\n| -               | -               | -                                   |\n| --------------- | --------------- | :---------------------------------- |\n| `C-x` `5` `1`   | `C-x` `1`       | Delete all other windows            |\n| `C-x` `5` `2`   | `C-x` `2`       | Split window, above and below       |\n| `C-x` `5` `0`   | `C-x` `0`       | Delete this window                  |\n| `C-x` `3`       |                 | Split window, side by side          |\n| `C-M-v`         |                 | Scroll other window                 |\n| `C-x` `5` `o`   | `C-x` `o`       | Switch cursor to another window     |\n| `C-x` `5` `b`   | `C-x` `4` `b`   | Select buffer in other window       |\n| `C-x` `5` `C-o` | `C-x` `4` `C-o` | Display buffer in other window      |\n| `C-x` `5` `f`   | `C-x` `4` `f`   | Find file in other window           |\n| `C-x` `5` `r`   | `C-x` `4` `r`   | Find file read-only in other window |\n| `C-x` `5` `d`   | `C-x` `4` `d`   | Run Dired in other window           |\n| `C-x` `5` `.`   | `C-x` `4` `.`   | Find tag in other window            |\n| `C-x` `^`       |                 | Grow window taller                  |\n| `C-x` `{`       |                 | Shrink window narrower              |\n| `C-x` `}`       |                 | Grow window wider                   |\n\n{.shortcuts}\n\n### Formatting\n\n| -           | -                                        |\n| ----------- | :--------------------------------------- |\n| `TAB`       | Indent current line (mode-dependent)     |\n| `C-M-\\`     | Indent region (mode-dependent)           |\n| `C-M-q`     | Indent sexp (mode-dependent)             |\n| `C-x` `TAB` | Indent region rigidly arg columns        |\n| `M-;`       | Indent for comment                       |\n| `C-o`       | Insert newline after point               |\n| `C-M-o`     | Move rest of line vertically down        |\n| `C-x` `C-o` | Delete blank lines around point          |\n| `M-^`       | Join line with previous (with arg, next) |\n| `M-\\`       | Delete all white space around point      |\n| `M-SPC`     | Put exactly one space at point           |\n| `M-q`       | Fill paragraph                           |\n| `C-x` `f`   | Set fill column to arg                   |\n| `C-x` `.`   | Set prefix each line starts with         |\n| `M-o`       | Set face                                 |\n\n{.shortcuts}\n\n### Info {.row-span-2}\n\n| -         | -                                           |\n| --------- | :------------------------------------------ |\n| `C-h` `i` | Enter the Info documentation reader         |\n| `C-h` `S` | Find specified function or variable in Info |\n\n{.shortcuts .table-fixed}\n\n#### Moving within a node\n\n| -     | -                 |\n| ----- | :---------------- |\n| `SPC` | Scroll forward    |\n| `DEL` | Scroll reverse    |\n| `b`   | Beginning of node |\n\n{.shortcuts .table-fixed}\n\n#### Moving between nodes\n\n| -   | -                                      |\n| --- | :------------------------------------- |\n| `n` | Next node                              |\n| `p` | Previous node                          |\n| `u` | Move up                                |\n| `m` | Select menu item by name               |\n| `n` | Select nth menu item by number (1–9)   |\n| `f` | Follow cross reference (return with l) |\n| `l` | Return to last node you saw            |\n| `d` | Return to directory node               |\n| `t` | Go to top node of Info file            |\n| `g` | Go to any node by name                 |\n\n{.shortcuts .table-fixed}\n\n#### Other\n\n| -   | -                                |\n| --- | :------------------------------- |\n| `h` | Run Info tutorial                |\n| `i` | Look up a subject in the indices |\n| `s` | Search nodes for regexp          |\n| `q` | Quit Info                        |\n\n{.shortcuts .table-fixed}\n\n### Minibuffer\n\nThe following keys are defined in the minibuffer.\n\n| -     | -                                       |\n| ----- | :-------------------------------------- |\n| `TAB` | Complete as much as possible            |\n| `SPC` | Complete up to one word                 |\n| `RET` | Complete and execute                    |\n| `?`   | Show possible completions               |\n| `M-p` | Fetch previous minibuffer input         |\n| `M-n` | Fetch later minibuffer input or default |\n| `M-r` | Regexp search backward through history  |\n| `M-s` | Regexp search forward through history   |\n| `C-g` | Abort command                           |\n\n{.shortcuts}\n\nType `C-x` `ESC` `ESC` to edit and repeat the last command that used the minibuffer. Type `F10` to activate menu bar\nitems on text terminals.\n\n### Tags\n\n| -                        | -                                          |\n| ------------------------ | :----------------------------------------- |\n| `M-.`                    | Find a tag (a definition)                  |\n| `C-u` `M-.`              | Find next occurrence of tag                |\n| `M-x` visit-tags-table   | Specify a new tags file                    |\n| `M-x` tags-search        | Regexp search on all files in tags table   |\n| `M-x` tags-query-replace | Run query-replace on all the files         |\n| `M-,`                    | Continue last tags search or query-replace |\n\n{.shortcuts}\n\n### Rectangles\n\n| -             | -                                   |\n| ------------- | :---------------------------------- |\n| `C-x` `r` `r` | Copy rectangle to register          |\n| `C-x` `r` `k` | Kill rectangle                      |\n| `C-x` `r` `y` | Yank rectangle                      |\n| `C-x` `r` `o` | Open rectangle, shifting text right |\n| `C-x` `r` `c` | Blank out rectangle                 |\n| `C-x` `r` `t` | Prefix each line with a string      |\n\n{.shortcuts}\n\n### Keyboard Macros\n\n| -                         | -                                   |\n| ------------------------- | :---------------------------------- |\n| `C-x` `(`                 | Start defining a keyboard macro     |\n| `C-x` `)`                 | End keyboard macro definition       |\n| `C-x` `e`                 | Execute last-defined keyboard macro |\n| `C-u` `C-x` `(`           | Append to last keyboard macro       |\n| `M-x` name-last-kbd-macro | Name last keyboard macro            |\n| `M-x` insert-kbd-macro    | Insert Lisp definition in buffer    |\n\n{.shortcuts}\n\n### Buffers\n\n| -           | -                     |\n| ----------- | :-------------------- |\n| `C-x` `b`   | Select another buffer |\n| `C-x` `C-b` | List all buffers      |\n| `C-x` `k`   | Kill a buffer         |\n\n{.shortcuts}\n\n## Emacs Search\n\n### Regex (common) {.row-span-2}\n\n| -             | -                                            |\n| ------------- | :------------------------------------------- |\n| `.` `(dot)`   | Any single character except a newline        |\n| `*`           | Zero or more repeats                         |\n| `+`           | One or more repeats                          |\n| `?`           | Zero or one repeat                           |\n| `\\`           | Quote special characters                     |\n| `\\c`          | Quote regular expression special character c |\n| `\\|`          | Alternative (“or”)                           |\n| `\\(...\\)`     | Grouping                                     |\n| `\\(:?...\\)`   | Shy grouping                                 |\n| `\\(:NUM...\\)` | Explicit numbered grouping                   |\n| `\\n`          | Same text as nth group                       |\n| `\\b`          | At word break                                |\n| `\\B`          | Not at word break                            |\n\n### Regex (entry)\n\n| Start | End   | Entity |\n| ----- | ----- | :----- |\n| `^`   | `$`   | Line   |\n| `\\<`  | `\\>`  | Word   |\n| `\\_<` | `\\_>` | Symbol |\n| `\\‘`  | `\\’`  | Buffer |\n\n{.show-header}\n\n### Regex (conflict)\n\n| These   | Others   | class                     |\n| ------- | -------- | :------------------------ |\n| `[...]` | `[^...]` | Explicit set              |\n| `\\w`    | `\\W`     | Word-syntax character     |\n| `\\sc`   | `\\Sc`    | Character with syntax c   |\n| `\\cc`   | `\\Cc`    | Character with category c |\n\n{.show-header}\n\n### Incremental Search\n\n| -       | -                                 |\n| ------- | :-------------------------------- |\n| `C-s`   | Search forward                    |\n| `C-r`   | Search backward                   |\n| `C-M-s` | Regular expression search         |\n| `C-M-r` | Reverse regular expression search |\n| `M-p`   | Select previous search string     |\n| `M-n`   | Select next later search string   |\n| `RET`   | Exit incremental search           |\n| `DEL`   | Undo effect of last character     |\n| `C-g`   | Abort current search              |\n\n{.shortcuts}\n\nUse `C-s` or `C-r` again to repeat the search in either direction. If Emacs is still searching, `C-g` cancels only the\npart not matched.\n\n### Query Replace\n\n| -            | -                                    |\n| ------------ | :----------------------------------- |\n| `M-%`        | Interactively replace a text string  |\n| `M-x` regexp | Using regular expressions            |\n| `SPC` / `y`  | Replace this one, go on to next      |\n| `,`          | Replace this one, don’t move         |\n| `DEL` / `n`  | Skip to next without replacing       |\n| `!`          | Replace all remaining matches        |\n| `^`          | Back up to the previous match        |\n| `RET`        | Exit query-replace                   |\n| `C-r`        | Enter recursive edit (C-M-c to exit) |\n\n{.shortcuts}\n\n## Misc\n\n### Shells\n\n| -           | -                                      |\n| ----------- | :------------------------------------- |\n| `M-!`       | Execute a shell command                |\n| `M-&`       | Execute a shell command asynchronously |\n| `M-`        | Run a shell command on the region      |\n| `C-u` `M-`  | Filter region through a shell command  |\n| `M-x` shell | Start a shell in window shell          |\n\n{.shortcuts}\n\n### International Character Sets {.col-span-2}\n\n| -                          | -                                  |\n| -------------------------- | :--------------------------------- |\n| `C-x` `RET` `l`            | specify principal language         |\n| `M-x` list-input-methods   | show all input methods             |\n| `C-\\`                      | enable or disable input method     |\n| `C-x` `RET` `c`            | set coding system for next command |\n| `M-x` list-coding-systems  | show all coding systems            |\n| `M-x` prefer-coding-system | choose preferred coding system     |\n\n{.shortcuts}\n\n### Registers\n\n| -               | -                                    |\n| --------------- | :----------------------------------- |\n| `C-x` `r` `s`   | Save region in register              |\n| `C-x` `r` `i`   | Insert register contents into buffer |\n| `C-x` `r` `SPC` | Save value of point in register      |\n| `C-x` `r` `j`   | Jump to point saved in register      |\n\n{.shortcuts}\n\n### Miscellaneous\n\n| -          | -                 |\n| ---------- | :---------------- |\n| `C-u` num  | Numeric argument  |\n| `M--`      | Negative argument |\n| `C-q` char | Quoted insert     |\n\n{.shortcuts}\n\n### Commands Dealing with Emacs Lisp\n\n| -                  | -                                  |\n| ------------------ | :--------------------------------- |\n| `C-x` `C-e`        | Eval sexp before point             |\n| `C-M-x`            | Eval current defun                 |\n| `M-x` eval-region  | Eval region                        |\n| `M-:`              | Read and eval minibuffer           |\n| `M-x` load-library | Load a Lisp library from load-path |\n\n{.shortcuts}\n\n### Simple Customization\n\n| -                 | -                             |\n| ----------------- | :---------------------------- |\n| `M-x` `customize` | customize variables and faces |\n\nMaking global key bindings in Emacs Lisp:\n\n```{.wrap}\n(global-set-key (kbd \"C-c g\") ’search-forward)\n(global-set-key (kbd \"M-#\") ’query-replace-regexp)\n```\n\n### Abbrevs\n\n| -                 | -                                        |\n| ----------------- | :--------------------------------------- |\n| `C-x` `a` `g`     | Add global abbrev                        |\n| `C-x` `a` `l`     | Add mode-local abbrev                    |\n| `C-x` `a` `i` `g` | Add global expansion for this abbrev     |\n| `C-x` `a` `i` `l` | Add mode-local expansion for this abbrev |\n| `C-x` `a` `e`     | Explicitly expand abbrev                 |\n| `M-/`             | Expand previous word dynamically         |\n\n{.shortcuts}\n\n### Spelling Check\n\n| -                   | -                                     |\n| ------------------- | :------------------------------------ |\n| `M-$`               | Check spelling of current word        |\n| `M-x` ispell-region | Check spelling of all words in region |\n| `M-x` ispell-buffer | Check spelling of entire buffer       |\n| `M-x` flyspell-mode | Toggle on-the-fly spell checking      |\n\n{.shortcuts}\n\n### Writing Commands {.col-span-2}\n\n#### Syntax\n\n```lisp\n(defun command-name (args)\n\"documentation\" (interactive \"template\")\nbody)\n```\n\n#### Example\n\n```lisp\n(defun this-line-to-top-of-window (line)\n    \"Reposition current line to top of window.\nWith prefix argument LINE, put point on LINE.\"\n    (interactive \"P\")\n    (recenter (if (null line)\n                  0\n              (prefix-numeric-value line))))\n```\n\nThe interactive spec says how to read arguments interactively. Type `C-h` `f` interactive `RET` for more details.\n"
}