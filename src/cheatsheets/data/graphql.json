{
  "id": "graphql",
  "title": "GraphQL",
  "intro": "|\nThis quick reference cheat sheet provides a brief overview of GraphQL.",
  "tags": [
    "query",
    "API"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#cc44a2]",
  "content": "## Getting Started\n\n### Overview\n\n- An alternative approach to RESTful APIs\n- GraphQL is a query language for APIs\n- Easily describe the shape of the GraphQL API using clear shared terms.\n- Clients issue queries/mutations to read and update data\n- GraphQL syntax can express complex entity relations\n- Libraries to implement GraphQL in [different languages](https://graphql.org/code/)\n\n[GraphQL](https://graphql.org/) {.link-arrow}\n\n### Schema\n\n|                |                                  |\n| -------------- | -------------------------------- |\n| `schema`       | GraphQL schema definition        |\n| `query`        | Read and traverse data           |\n| `mutation`     | Modify data or trigger an action |\n| `subscription` | Run a query when an event occurs |\n\n### Built-in Scalar Types\n\n|           |                                              |\n| --------- | -------------------------------------------- |\n| `Int`     | Signed 32‐bit integer                        |\n| `Float`   | Signed double-precision floating-point value |\n| `String`  | UTF‐8 character sequence                     |\n| `Boolean` | true or false                                |\n| `ID`      | A Unique identifier                          |\n\n### Type Definitions\n\n|             |                   |\n| ----------- | ----------------- |\n| `scalar`    | Scalar Type       |\n| `type`      | Object Type       |\n| `interface` | Interface Type    |\n| `union`     | Union Type        |\n| `enum`      | Enum Type         |\n| `input`     | Input Object Type |\n\n### Type Modifiers\n\n|              |                                   |\n| ------------ | --------------------------------- |\n| `String`     | Nullable String                   |\n| `String!`    | Non-null String                   |\n| `[String]`   | List of nullable Strings          |\n| `[String]!`  | Non-null list of nullable Strings |\n| `[String!]!` | Non-null list of non-null Strings |\n\n### Input Arguments {.row-span-2}\n\n#### Basic Input\n\n```js\ntype Query {\n    users(limit: Int): [User]\n}\n```\n\n#### Input with default value\n\n```js\ntype Query {\n    users(limit: Int = 10): [User]\n}\n```\n\n#### Input with multiple arguments\n\n```js\ntype Query {\n    users(limit: Int, sort: String): [User]\n}\n```\n\n#### Input with multiple arguments and default values\n\n```js {.wrap}\ntype Query {\n    users(limit: Int = 10, sort: String): [User]\n}\ntype Query {\n    users(limit: Int, sort: String = \"asc\"): [User]\n}\ntype Query {\n    users(limit: Int = 10, sort: String = \"asc\"): [User]\n}\n```\n\n### Input Types\n\n```js\ninput ListUsersInput {\n    limit: Int\n    since_id: ID\n}\n```\n\n```js\ntype Mutation {\n    users(params: ListUsersInput): [User]!\n}\n```\n\n### Custom Scalars\n\n```js\nscalar Url\ntype User {\n    name: String\n    homepage: Url\n}\n```\n\n### Interfaces\n\n```js\ninterface Foo {\n    is_foo: Boolean\n}\ninterface Goo {\n    is_goo: Boolean\n}\ntype Bar implements Foo {\n    is_foo: Boolean\n    is_bar: Boolean\n}\ntype Baz implements Foo, Goo {\n    is_foo: Boolean\n    is_goo: Boolean\n    is_baz: Boolean\n}\n```\n\nObject implementing one or more Interfaces\n\n### Unions\n\n```js\ntype Foo {\n    name: String\n}\ntype Bar {\n    is_bar: String\n}\nunion SingleUnion = Foo\nunion MultipleUnion = Foo | Bar\ntype Root {\n    single: SingleUnion\n    multiple: MultipleUnion\n}\n```\n\nUnion of one or more Objects\n\n### Enums\n\n```js {.wrap}\nenum USER_STATE {\n    NOT_FOUND\n    ACTIVE\n    INACTIVE\n    SUSPENDED\n}\ntype Root {\n    stateForUser(userID: ID!): USER_STATE!\n    users(state: USER_STATE, limit: Int = 10): [User]\n}\n```\n\n## Also see\n\n- [GraphQL Schema Language Cheat Sheet](https://github.com/sogko/graphql-schema-language-cheat-sheet) _(github.com)_\n"
}