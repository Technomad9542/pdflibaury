{
  "id": "fastapi",
  "title": "FastAPI",
  "intro": "|\nA concise cheatsheet for FastAPI, a fast and modern web framework for building APIs with Python 3.7+.",
  "tags": [
    "web",
    "python",
    "backend"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#3730a3]",
  "content": "## Getting Started {.cols-3}\n\n### Install & Run\n\n```bash\npip install fastapi uvicorn\nuvicorn main:app --reload\n```\n\n### Hello World\n\n```python\nfrom fastapi import FastAPI\napp = FastAPI()\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello FastAPI\"}\n```\n\n### CLI Run Hint\n\n```bash\nuvicorn main:app --reload\n```\n\n## Routing & Parameters {.cols-3}\n\n### Path Parameter\n\n```python\n@app.get(\"/items/{id}\")\ndef read(id: int):\n    return {\"id\": id}\n```\n\n### Query Parameter\n\n```python\n@app.get(\"/search\")\ndef find(q: str = \"default\"):\n    return {\"q\": q}\n```\n\n### Optional Query\n\n```python\n@app.get(\"/filter\")\ndef filter_data(limit: int = 10, active: bool = True):\n    return {\"limit\": limit, \"active\": active}\n```\n\n## Request Body & Validation {.cols-3}\n\n### Using Pydantic\n\n```python\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: float\n```\n\n### JSON Body\n\n```python\n@app.post(\"/items/\")\ndef create(item: Item):\n    return item\n```\n\n### Response Model\n\n```python\n@app.post(\"/items/\", response_model=Item)\ndef create(item: Item):\n    return item\n```\n\n## Forms, Files, Headers {.cols-3}\n\n### Form Input\n\n```python\nfrom fastapi import Form\n\n@app.post(\"/login\")\ndef login(user: str = Form(...)):\n    return {\"user\": user}\n```\n\n### File Upload\n\n```python\nfrom fastapi import UploadFile, File\n\n@app.post(\"/upload\")\ndef upload(f: UploadFile = File(...)):\n    return {\"filename\": f.filename}\n```\n\n### Headers / Cookies\n\n```python\nfrom fastapi import Header, Cookie\n\n@app.get(\"/info\")\ndef info(ua: str = Header(None)):\n    return {\"UA\": ua}\n```\n\n## Middleware & Dependency {.cols-2}\n\n### Middleware\n\n```python\n@app.middleware(\"http\")\nasync def log_req(req, call_next):\n    res = await call_next(req)\n    return res\n```\n\n### Dependency\n\n```python\nfrom fastapi import Depends\n\ndef auth(token: str = \"\"):\n    if token != \"xyz\": raise HTTPException(401)\n    return True\n\n@app.get(\"/secure\")\ndef secure(_: bool = Depends(auth)):\n    return {\"secure\": True}\n```\n\n## Errors & JSON API {.cols-2}\n\n### HTTP Error\n\n```python\nfrom fastapi import HTTPException\n\n@app.get(\"/err\")\ndef error():\n    raise HTTPException(404, \"Not Found\")\n```\n\n### JSON API\n\n```python\nfrom fastapi import FastAPI\n\n@app.get(\"/json\")\ndef get_data():\n    return {\"status\": \"ok\"}\n```\n\n## Templates & Static {.cols-2}\n\n### Mount Static\n\n```python\nfrom fastapi.staticfiles import StaticFiles\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n```\n\n### Jinja2 Support\n\n```python\nfrom fastapi.templating import Jinja2Templates\ntemplates = Jinja2Templates(\"templates\")\n```\n\n## Routers & Structure {.cols-2}\n\n### Routers (Blueprints)\n\n```python\nfrom fastapi import APIRouter\nrouter = APIRouter()\n\n@router.get(\"/\")\ndef admin():\n    return {\"admin\": True}\n\napp.include_router(router, prefix=\"/admin\")\n```\n\n### Folder Layout\n\n```bash\nproject/\n├── main.py\n├── static/\n├── templates/\n├── routers/\n│   └── admin.py\n└── models/\n```\n\n## Docs & Status {.cols-2}\n\n### Built-in Docs\n\n- Swagger: `/docs`\n- ReDoc: `/redoc`\n\n### Custom Status Code\n\n```python\nfrom fastapi import status\n\n@app.post(\"/create\", status_code=status.HTTP_201_CREATED)\ndef create():\n    return {\"msg\": \"Created\"}\n```\n"
}