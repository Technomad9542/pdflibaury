{
  "id": "toml",
  "title": "TOML",
  "intro": "|\nThis is a quick reference cheat sheet to the TOML format configuration file syntax.",
  "tags": [
    "config",
    "format"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#848484]",
  "content": "## Getting Started\n\n### Introduction\n\n[TOML](https://toml.io/en/) is a minimal configuration file format that's easy to read due to obvious semantics.\n\n- [Document](https://toml.io/en/latest) _(toml.io)_\n- [Learn X in Y minutes](https://learnxinyminutes.com/docs/toml/) _(learnxinyminutes.com)_\n\n### Examples\n\n```toml\nbool = true\ndate = 2006-05-27T07:32:00Z\nstring = \"hello\"\nnumber = 42\nfloat = 3.14\nscientificNotation = 1e+12\n```\n\n### Comments\n\n```yaml\n# A single line comment example\n\n# block level comment example\n# comment line 1\n# comment line 2\n# comment line 3\n```\n\n### Integer\n\n```toml\nint1 = +42\nint2 = 0\nint3 = -21\nintegerRange = 64\n```\n\n### Float\n\n```toml\nfloat2 = 3.1415\nfloat4 = 5e+22\nfloat7 = 6.626e-34\n```\n\n### Boolean\n\n```toml\nbool1 = true\nbool2 = false\nboolMustBeLowercase = true\n```\n\n### Datetime\n\n```toml\ndate1 = 1989-05-27T07:32:00Z\ndate2 = 1989-05-26T15:32:00-07:00\ndate3 = 1989-05-27T07:32:00\ndate4 = 1989-05-27\ntime1 = 07:32:00\ntime2 = 00:32:00.999999\n```\n\n### String\n\n```toml\nstr1 = \"I'm a string.\"\nstr2 = \"You can \\\"quote\\\" me.\"\nstr3 = \"Name\\tJos\\u00E9\\nLoc\\tSF.\"\n```\n\nSee: [Strings](#toml-strings)\n\n### Table\n\n```toml\n[owner]\nname = \"Tom Preston-Werner\"\ndob = 1979-05-27T07:32:00-08:00\n```\n\nSee: [Tables](#toml-tables)\n\n### Array\n\n```toml\narray1 = [1, 2, 3]\narray2 = [\"Commas\", \"are\", \"delimiter\"]\narray3 = [8001, 8001, 8002]\n```\n\n### Friendly Array {.col-span-2}\n\n```toml\narray1 = [ \"Don't mix\", \"different\", \"types\" ]\narray2 = [ [ 1.2, 2.4 ], [\"all\", 'strings', \"\"\"are the same\"\"\", '''type'''] ]\narray3 = [\n  \"Whitespace\", \"is\",\n  \"ignored\"\n]\n```\n\n## TOML Strings\n\n### Multiline String\n\n```toml\nmultiLineString = \"\"\"\nMulti-line basic strings are surrounded\nby three quotation marks on each side\nand allow newlines.\n\"\"\"\n```\n\n### Literal String\n\n```toml {.wrap}\npath = 'C:\\Users\\nodejs\\templates'\npath2 = '\\\\User\\admin$\\system32'\nquoted = 'Tom \"Dubs\" Preston-Werner'\nregex = '<\\i\\c*\\s*>'\n```\n\nSurrounded by single quotes. Escaping are not allowed.\n\n### MultiLine Literal String\n\n```toml\nre = '''\\d{2} apps is t[wo]o many'''\nlines = '''\nThe first newline is\ntrimmed in raw strings.\nAll other whitespace\nis preserved.\n'''\n```\n\n## TOML Tables\n\n### Basic\n\n```toml\n[name]\nfoo = 1\nbar = 2\n```\n\n`foo` and `bar` are keys in the table called `name`\n\n### Nested\n\n```toml\n[table1]\n\tfoo = \"bar\"\n\n[table1.nested_table]\n\tbaz = \"bat\"\n```\n\n### Array-like {.row-span-2}\n\n```toml\n[[comments]]\nauthor = \"Nate\"\ntext = \"Great Article!\"\n\n[[comments]]\nauthor = \"Anonymous\"\ntext = \"Love it!\"\n```\n\n#### ↓ Equivalent JSON\n\n```json\n{\n  \"comments\": [\n    {\n      \"author\": \"Nate\",\n      \"text\": \"Great Article!\"\n    },\n    {\n      \"author\": \"Anonymous\",\n      \"text\": \"Love It!\"\n    }\n  ]\n}\n```\n\n### Dot separated\n\n```toml\n[dog.\"tater.man\"]\ntype = \"pug\"\n```\n\n#### ↓ Equivalent JSON\n\n```json\n{\n  \"dog\": {\n    \"tater.man\": {\n      \"type\": \"pug\"\n    }\n  }\n}\n```\n\n### Multi-nested\n\n```toml\n[foo.bar.baz]\nbat = \"hi\"\n```\n\n#### ↓ Equivalent JSON\n\n```json\n{\n  \"foo\": {\n    \"bar\": {\n      \"baz\": {\n        \"bat\": \"hi\"\n      }\n    }\n  }\n}\n```\n\n### Ignore whitespace\n\n```toml\n[a.b.c]          # this is best practice\n[ d.e.f ]        # same as [d.e.f]\n[ g .  h  .i ]   # same as [g.h.i]\n[ j . \"ʞ\" .'l' ] # same as [j.\"ʞ\".'l']\n```\n\n### Inline Table {.col-span-2}\n\n```toml\nname = { first = \"Tom\", last = \"Preston-Werner\" }\npoint = { x = 1, y = 2 }\nanimal = { type.name = \"pug\" }\n```\n"
}