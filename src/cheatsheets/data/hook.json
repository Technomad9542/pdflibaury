{
  "id": "hook",
  "title": "Hook",
  "intro": "|\nThe [Hook](https://github.com/hook-lang/hook/) cheat sheet is a one-page reference sheet for the Hook programming language.",
  "tags": [
    "script",
    "interpret"
  ],
  "categories": [
    "Programming"
  ],
  "background": "bg-[#1131e2]",
  "content": "## Getting Started\n\n### Introduction\n\n- [GitHub](https://github.com/hook-lang/hook)\n- [Playground](https://hook-lang.github.io/hook-playground)\n- [Examples](https://github.com/hook-lang/hook/tree/main/examples)\n- [VSCode Extension](https://marketplace.visualstudio.com/items?itemName=fabiosvm.hook)\n\n### What does Hook look like?\n\n```rs\nfn factorial(n) {\n  if (n == 0)\n    return 1;\n  return n * factorial(n - 1);\n}\n```\n\nHook features a modern syntax similar to `C`.\n\n### Hello, world!\n\n```js\nprintln('Hello, World!');\n// Hello, World!\n```\n\nThe `Hello, World!` program in Hook.\n\n### Installing with Homebrew\n\n```text\nbrew tap hook-lang/hook\nbrew install hook\nhook --help\n```\n\nThe interpreter is available on [`Homebrew`](https://brew.sh).\n\n### Installing on Windows {.col-span-2}\n\n```text\ncd %tmp%\ncurl -sSLO https://raw.githubusercontent.com/hook-lang/hook/main/scripts/install.bat\ninstall\n```\n\nThis is how you can install it on `Windows`.\n\n## Types and Values\n\n### Basic Types\n\n|          |           |\n| -------- | :-------- |\n| `Nil`    | `Bool`    |\n| `Number` | `String`  |\n| `Range`  | `Array`   |\n| `Record` | `Closure` |\n\nList of basic types.\n\n### Bool\n\n```js\nlet x = true;\nlet y = false;\n```\n\nBool is a boolean type. So, it can be `true` or `false`.\n\n### Numbers\n\n```js\nlet x = 0;\nlet degree = 45; // integer number\nlet pi = 3.14; // floating-point number\n```\n\nNumbers can be integers or floating-point.\n\n### Strings\n\n```js\nlet empty = '';\n\nlet name = 'John';\n\nlet message = 'Hello, \"John\"!';\n```\n\nStrings can be single or double-quoted.\n\n### Ranges\n\n```js\nlet range = 1..5;\n\nprintln(range);\n// 1..5\n```\n\nRanges are a sequence of integers.\n\n### Arrays\n\n```js\nlet fruits = ['apple', 'banana', 'cherry'];\n\nprintln(fruits);\n// [\"apple\", \"banana\", \"cherry\"]\n```\n\nArrays are a sequence of elements.\n\n### Records\n\n```js\nlet p = { x: 5, y: 10 };\n\nprintln(p);\n// {x: 5, y: 10}\n```\n\nRecords maps fields to values.\n\n### The **nil** value\n\n```swift\nlet x = nil;\nvar y;\n```\n\n```js\nprintln(x); // nil\nprintln(y); // nil\n```\n\n`nil` is the absence of a value.\n\n### Falsy values\n\n```swift\nif (nil) \"true\" else \"false\";   // false\nif (false) \"true\" else \"false\"; // false\nif (true) \"true\" else \"false\";  // true\nif (0) \"true\" else \"false\";     // true\nif (1) \"true\" else \"false\";     // true\nif (\"\") \"true\" else \"false\";    // true\nif ([]) \"true\" else \"false\";    // true\nif ({}) \"true\" else \"false\";    // true\n```\n\nJust `nil` and `false` are falsy.\n\n## Syntax\n\n### Comments\n\n```js\n// This is a single-line comment.\n\n// And this is\n// a multi-line\n// comment. ;)\n```\n\nHook supports single-line comments only. Sorry!\n\n### Semi-colons {.col-span-2}\n\n<!-- prettier-ignore -->\n```js\nprintln(1) ; println(2) ; println(3) ;\nprintln(4) ; println(5)\n; println(6) ;\n;                                      // error: unexpected token `;`\n```\n\nSemi-colons are required and empty statements are not allowed.\n\n### Blocks\n\n```js\n{\n  println('Hello');\n  {\n    println('World');\n  }\n}\n```\n\nBlocks are used to define a scope.\n\n### Reserved words\n\n|         |          |            |         |\n| ------- | :------- | :--------- | :------ |\n| `as`    | `break`  | `continue` | `do`    |\n| `else`  | `false`  | `fn`       | `for`   |\n| `from`  | `if`     | `import`   | `in`    |\n| `inout` | `let`    | `loop`     | `match` |\n| `nil`   | `return` | `struct`   | `trait` |\n| `true`  | `var`    | `while`    |         |\n\nThere are few reserved words.\n\n### Identifiers\n\n```php\nvar lowercase;\nvar CAPS_LOCK;\nvar camelCase;\nvar PascalCase;\nvar snake_case;\nvar _123;\n```\n\nIdentifiers are case-sensitive.\n\n## Variables\n\n### Variables\n\n```js\nvar x; // x contains nil\nx = 5; // now, x contains a number\nx = 'foo'; // a string\n\nprintln(x);\n```\n\nValues have types, but variables don't.\n\n### Immutable variables {.col-span-2}\n\n```js\nlet x = 5;\n\nx = 10; // error: cannot assign to immutable variable `x`\n\nlet y; // error: unexpected token `;`\n```\n\nImmutable variables must be initialized when declared.\n\n### Scopes {.col-span-2}\n\n```js\nlet x = 5;\n{\n  let y = 15;\n  println(x); // 10\n  println(y); // 15\n}\nprintln(x); // 5\nprintln(y); // error: variable `y` is used but not defined\n```\n\nWhen a heap-allocated variable goes out of scope, it is automatically deallocated.\n\n### Shadowing\n\n```js\nlet x = 5;\n{\n  let x = 10; // shadows the outer `x`\n  println(x); // 10\n}\nprintln(x); // 5\n```\n\nVariables can be shadowed.\n\n## Operators and Expressions\n\n### Arithmetic\n\n```js\nprintln(5 + 10); // 15\nprintln(5 - 10); // -5\nprintln(5 * 10); // 50\nprintln(5 / 10); // 0.5\nprintln(5 % 10); // 5\nprintln(-5); // -5\n```\n\nThe basic arithmetic operators.\n\n### Comparison\n\n```js\nprintln(5 == 10); // false\nprintln(5 != 10); // true\nprintln(5 < 10); // true\nprintln(5 > 10); // false\nprintln(5 <= 10); // true\nprintln(5 >= 10); // false\n```\n\nThe comparison operators.\n\n### Logical\n\n```js\nprintln(true && false); // false\nprintln(true || false); // true\nprintln(!true); // false\n```\n\nThe logical operators.\n\n### Bitwise and shift\n\n```js\nprintln(5 & 10); // 0\nprintln(5 | 10); // 15\nprintln(5 ^ 10); // 15\nprintln(~5); // -6\nprintln(5 << 1); // 10\nprintln(5 >> 1); // 2\n```\n\nThe bitwise and shift operators.\n\n### Assignments\n\n```js\nvar x = 5; // 5\nx += 10; // 15\nx -= 10; // 5\nx *= 10; // 50\nx /= 10; // 5\nx %= 10; // 5\nx &= 10; // 0\nx |= 10; // 10\nx ^= 5; // 15\nx <<= 5; // 480\nx >>= 5; // 15\nx++; // 16\nx--; // 15\n```\n\nThe assignment operators.\n\n### Teh ternary operator\n\n```js\nlet x = 5;\nlet y = if (x > 5) 10 else 20;\n\nprintln(y);\n// 20\n```\n\nIn Hook, the ternary operator is `if else`.\n\n## Branching\n\n### If\n\n```js\nlet x = 10;\n\nif (x > 5) {\n  println('x is greater than 5');\n}\n// x is greater than 5\n```\n\nThe `if` statement.\n\n### If else\n\n```js\nlet x = 11;\n\nif (x == 5) {\n  println('x is 5');\n} else if (x == 10) {\n  println('x is 10');\n} else {\n  println('x is neither 5 nor 10');\n}\n// x is neither 5 nor 10\n```\n\nThe `if else` statement.\n\n### Match\n\n```rs\nlet x = 5;\n\nmatch (x) {\n  1 => println(\"one\");\n  2 => println(\"two\");\n  3 => println(\"three\");\n  _ => println(\"other\");\n}\n// other\n```\n\nThe `match` statement.\n\n## Looping\n\n### While\n\n```js\nvar x = 0;\n\nwhile (x < 5) {\n  print(x);\n  x += 1;\n}\n// 01234\n```\n\nThe `while` loop.\n\n### Do while\n\n```js\nvar x = 0;\n\ndo {\n  print(x);\n  x += 1;\n} while (x < 5);\n// 01234\n```\n\nThe `do while` loop.\n\n### For\n\n```js\nfor (var i = 0; i < 5; i++) {\n  print(i);\n}\n// 01234\n```\n\nThe classic `for` loop.\n\n### Loop\n\n```rs\nloop {\n  println(\"Press Ctrl+C to stop\");\n}\n```\n\nThe unconditional `loop`.\n\n### Break\n\n```js\nvar i = 0;\n```\n\n```rs\nloop {\n  if (i == 5) break;\n\n  print(i);\n  i += 1;\n}\n// 01234\n```\n\nUse `break` to exit a loop.\n\n### Continue\n\n```js\nvar i = 0;\n```\n\n```rs\nloop {\n  i += 1;\n  if (i % 2 == 0) continue;\n\n  print(i);\n\nif (i == 5) break;\n}\n// 135\n```\n\nUse `continue` to skip the rest of the loop body.\n\n## Strings\n\n### Indexing a string\n\n```js\nlet s = 'Hello';\n\nprintln(s[0]); // H\nprintln(s[1]); // e\nprintln(s[4]); // o\n```\n\nIndexing a string returns a 1-character string.\n\n### Slicing a string\n\n```js\nlet s = \"Hello, World!\";\n\nprintln(s[0..5]);        // Hello,\nprintln(s[7..12]);       // World!\n```\n\nPass a range to slice a string.\n\n### Concatening strings\n\n```js\nlet greeting = 'Hi' + ' there!';\n\nprintln(greeting);\n// Hi there!\n```\n\nUse the `+` operator to concatenate strings.\n\n## Arrays\n\n### Indexing an array\n\n```js\nlet a = [1, 2, 3];\n\nprintln(a[0]); // 1\nprintln(a[1]); // 2\nprintln(a[2]); // 3\n```\n\nIndexing an array returns an element.\n\n### Slicing an array\n\n```js\nlet a = [1, 2, 3, 4];\n\nprintln(a[0..2]);            // [1, 2, 3]\nprintln(a[1..3]);            // [2, 3, 4]\nprintln(a[2 .. len(a) - 1]); // [3, 4]\n```\n\nArrays are zero-indexed.\n\n### Appending an element\n\n```js\nvar a = [1, 2];\n\na[] = 3;\n\nprintln(a);\n// [1, 2, 3]\n```\n\nArrays are mutable. Use `[]` to append an element.\n\n### Element assignment\n\n```js\nvar a = [1, 2, 3];\n\na[0] = 4;\n\nprintln(a);\n// [4, 2, 3]\n```\n\nUpdate an element in an array.\n\n### Concatening arrays\n\n```js\nlet a = [1, 2];\nlet b = [3];\nlet c = a + b;\n\nprintln(c);\n// [1, 2, 3]\n```\n\nUse the `+` operator to concatenate arrays.\n\n### Subtracting arrays\n\n```js\nlet a = [1, 2, 2, 3];\nlet b = [2];\nlet c = a - b;\n\nprintln(c);\n// [1, 3]\n```\n\nGet the difference between two arrays.\n\n## Functions and Closures\n\n### Function declaration\n\n```rs\nfn sum(a, b) {\n  return a + b;\n}\n\nprintln(sum(5, 10));\n// 15\n```\n\nFunctions are first-class citizens.\n\n### Function call\n\n```rs\nfn greet(name) {\n  println(\"Hi, \" + name + \"!\");\n}\n\ngreet(\"John\", \"Doe\");\n// Hi, John!\n```\n\nThe number of arguments is adjusted.\n\n### Anonymous functions\n\n```js\nlet sum = |a, b| {\n  return a + b;\n};\n\nprintln(sum(5, 10));\n// 15\n```\n\nAnonymous functions are also supported.\n\n### Closures\n\n```js\nlet pi = 3.14;\n```\n\n```rs\nfn area(r) {\n  return pi * r * r;\n}\n\nprintln(area(5));\n// 78.5\n```\n\nClosures in Hook capture values only.\n\n### Higher-order functions\n\n```rs\nfn apply(f, x) {\n  return f(x);\n}\n\nfn double(x) {\n  return x * 2;\n}\n\nprintln(apply(double, 5));\n// 10\n```\n\nFunctions can be passed as arguments or returned.\n\n### Syntax sugar for functions\n\n```rs\nfn factorial(n) =>\n  if (n == 0) 1\n  else n * factorial(n - 1);\n\nprintln(factorial(5));\n// 120\n```\n\nUse `=>` when the body is a single expression.\n\n### Recursion\n\n```rs\nfn fib(n) {\n  if (n < 2)\n    return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\nprintln(fib(10));\n// 55\n```\n\nRecursion is supported.\n\n### Built-in functions\n\n```js\nprintln(type(5));\n// number\nprintln('1' + to_string(2));\n// 12\nprintln(len('foo'));\n// 3\n```\n\nThere are many built-in functions.\n\n### More built-in functions\n\n|             |           |             |\n| ----------- | :-------- | :---------- |\n| `print`     | `println` | `type`      |\n| `is_nil`    | `is_bool` | `to_number` |\n| `to_string` | `hex`     | `len`       |\n| `exit`      | `assert`  | `panic`     |\n\nSee: [Built-in Functions](https://github.com/hook-lang/hook/blob/main/docs/built-in.md)\n\n## Structs\n\n### Structs\n\n```rs\nstruct Point {\n  x, y\n}\n```\n\n```js\nlet p = Point { 5, 10 };\n\nprintln(p);\n// {x: 5, y: 10}\n```\n\nA struct is a prototype for a record.\n\n### Accessing fields\n\n```js\nprintln(p.x); // 5\nprintln(p.y); // 10\n```\n\nUse `.` to access a field in a record.\n\n### Field assignment\n\n```js\np.x = 10;\np.y = 20;\n\nprintln(p);\n// {x: 10, y: 20}\n```\n\nUpdate a value of a field in a record.\n\n## Destructuring\n\n### Destructuring an array\n\n```js\nlet a = [1, 2];\nlet [x, y] = a;\n\nprintln(x); // 1\nprintln(y); // 2\n```\n\nVaruables are declared and assigned.\n\n### Destructuring a record\n\n```js\nlet p = { x: 5, y: 10 };\nlet { x } = p;\n\nprintln(x);\n// 5\n```\n\nUse `{}` to destructure a record.\n\n### Placeholder\n\n```js\nlet a = [1, 2];\nlet [x] = a;\nlet [_, y] = a;\n\nprintln(x); // 1\nprintln(y); // 2\n```\n\nUse `_` skip leading or middle elements.\n\n## Modularity\n\n### Importing a module\n\n```js\nimport math;\n```\n\n```js\nprintln(math.sqrt(25));\n// 5\n```\n\nUse `import` to bring a module into scope.\n\n### Exporting symbols\n\n```rs\n// my_module.hk\nfn useful_fn() {\n  return \"Nothing\";\n}\n\nreturn { useful: useful_fn };\n```\n\nReturn a record with the symbols to export.\n\n### Importing local modules\n\n```python\nimport \"./my_module.hk\" as my;\n```\n\n```js\nprintln(my.useful());\n// Nothing\n```\n\nSpecify the path to the local module.\n\n### Selective import\n\n```js\nimport { pow, sqrt } from math;\n\nlet [ b, c ] = [ 4, 3 ];\nlet a = sqrt(pow(b, 2) + pow(c, 2));\n\nprintln(a);\n// 5\n```\n\nUse `{}` to import specific symbols.\n\n### Core modules\n\n|            |          |        |           |\n| ---------- | :------- | :----- | :-------- |\n| `math`     | `os`     | `io`   | `numbers` |\n| `strings`  | `arrays` | `utf8` | `hashing` |\n| `encoding` | `socket` | `json` | `lists`   |\n\nSee: [Core Modules](https://github.com/hook-lang/hook/blob/main/docs/core-modules.md)\n\n### Extension modules\n\n|           |           |         |           |\n| --------- | :-------- | :------ | :-------- |\n| `bigint`  | `crypto`  | `curl`  | `fastcgi` |\n| `geohash` | `leveldb` | `mysql` | `redis`   |\n| `regex`   | `sqlite`  | `uuid`  | `zeromq`  |\n\nThis is a list of extension modules.\n\n### **io** module\n\n```js\nimport { stderr, writeln } from io;\n\nwriteln(stderr, \"Something went wrong\");\n// Something went wrong\n```\n\nPrinting to `stderr` using `io` module.\n\n### **hashing** module\n\n```python\nimport hashing as h;\n```\n\n```js\nlet d = h.sha256('Hello, world!');\n\nprintln(hex(d));\n// 315f5bdb76d078c43b8ac0064e4a...\n```\n\n`hashing` module provides hash functions.\n\n### **json** module\n\n```js\nimport json;\n```\n\n```js\nlet j = '{\"x\": 1, \"y\": 2}';\nlet p = json.decode(j);\n\nprintln(p.x); // 1\n\nlet k = json.encode(p);\nprintln(type(k)); // string\n```\n\nUse `json` module for working with JSON.\n\n## Error Handling\n\n### Errors {.col-span-2}\n\n```js\nprintln(to_int('foo'));\n\n// runtime error: type error: argument #1 is not a convertible string\n//   at to_int() in <native>\n//   at main() in example.hk:1\n```\n\nHook uses panic mode for error handling. When an error occurs, the interpreter stops.\n\n### Syntax error\n\n```js\nprintln('Hello, World!');\n\n// syntax error: unexpected end of file\n//   at main() in example.hk:1,25\n```\n\nHook has a strict syntax.\n\n### Panic\n\n```js\npanic('Something went wrong');\n\n// panic: Something went wrong\n//   at main() in example.hk:1\n```\n\nUse the `panic` built-in function to raise an error.\n\n### Assert {.col-span-2}\n\n```js\nassert(5 > 10, '5 is not greater than 10');\n\n// assert: 5 is not greater than 10\n//   at main() in example.hk:1\n```\n\nUse the `assert` built-in function to check a condition.\n\n### Returning errors {.col-span-2}\n\n```rs\nfn divide(a, b) {\n  if (b == 0)\n    return [nil, \"division by zero\"];\n  return a / b;\n}\n\nif (let [ok, err] = divide(5, 0); ok) {\n  println(ok);\n} else {\n  println(err);\n}\n// division by zero\n```\n\nUse a pair to return a value and an error.\n\n### Passing errors\n\n```rs\nif (let [ok, err] = divide(5, 0); err) {\n  return [nil, err];\n}\n```\n\nPass an error without handling it.\n"
}